using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;
using System.IO;

namespace PetriNetLib
{
  public class PetriNetCompiler
  {
    //mutable gen : Generator;
    mutable _gen : Generator;
    mutable proc : PetriNetProcessor;
    mutable only_ : bool;
    [FlagAccessor(
                  Debug, Events, PrintBinding
                )]
    public Flags : PetriNetFlags;
    
    public PhaseTwo() : void
    {
      //when (!only_)
        //gen.PhaseTwo();   
      _gen.PhaseTwo();
    }
    
    public Process(ty : TypeBuilder, typer : Typer, file : string, page : string, only_ : bool) : void
    {
      this.only_ = only_;
      def parser = Parser(page);
      parser.Parse(file);
      def file = System.IO.Path.GetFileNameWithoutExtension(file);
      proc = PetriNetProcessor(file, Flags, typer, ty, parser.Places, parser.Transitions, parser.Arcs, parser.Decls);
      proc.Process();      
      //gen = Generator(proc.OutModel, proc);
      _gen = Generator($"$file.h", proc.OutModel, proc);
      //when (!only_)
        //gen.PhaseOne();
      _gen.PhaseOne();
      ty.UserData["PetriNetGen"] = this;
    }
    
    public MainGen() : void
    {
      //when (!only_)
        //gen.Generate();
      _gen.Generate();
    }
  }
}
