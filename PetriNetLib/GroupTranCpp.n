using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;

namespace PetriNetLib
{
  /// <summary>
  /// Description of GroupTranCpp.
  /// </summary>
  class GroupTranCpp : GenTranCpp
  {
    public grouped : list[GenTranCpp];
    public gen : CppGenerator;
    
    public this(grouped : list[GenTranCpp], generator : CppGenerator)
    {
      base(null, generator);
      this.gen = generator;
      this.grouped = grouped;
    }
    
    public override Priority : int
    {
      [Memoize]
      get
      {
        grouped.Max(_.priority)
      }
    }
    
    public override IsTimed : bool
    {
      get
      {
        false
      }
    }
    
    public override CompleteTran : bool
    {
      [Memoize]
      get
      {
        true
      }
    }
    
    public override ExecName : string
    {
      get
      {
        Name
      }
    }
 
    public override GroupBindMode : bool
    {
      [Memoize]
      get
      {
        def sorted = grouped.OrderByDescending(x => x.priority).NToList();
        def in_arc_bind = sorted.Map(x => x.InArcProcess);
        
        def expr_eq(x, y)
        {
          def e1 = x.OrderBy(x => x.place.idx);
          def e2 = y.OrderBy(x => x.place.idx);
          
          def equal(x, y)
          {
            | (<[ $(n : usesite)]>, <[ $(n2 : usesite)]>) => n == n2
            | _                                           => false
          }
          
          if (x.Length != y.Length) false else
          e1.ElementsEqual(e2, (x, y) => equal(x.expr, y.expr))
        }
        
        
        //x.InArcProcess.OrderBy(x => x.place.idx).Select(x => x.bind_expr)
        in_arc_bind.ElementsEqual(expr_eq);
      }
    }
    
    public override PartOfGroup : option[GroupTranCpp]
    {
      get
      {
        None()
      }
    }
    
    public override Name : string
    {
      [Memoize]
      get
      {
        //def sorted = tran.OrderByDescending((x, _) => x.priority);
        def name = grouped.Map(_.UnnamedIdx);
        def name = name.Fold("", (x, a) => $"$x$a");
        $"GroupTransition$name"
      }
    }
  }
}
