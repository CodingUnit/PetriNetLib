using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;

namespace PetriNetLib
{
  /// <summary>
  /// Description of GenTranCpp.
  /// </summary>
  [Record]
  [Lens]
  class GenTranCpp : Transition, IEquatable[GenTranCpp]
  {
    gen : CppGenerator;

    public this(tran : Transition, gen : CppGenerator)
    {
      if (tran != null)
      base(tran.idx, tran.id, tran.name, tran.guard, tran.time_expr, tran.code_segment, tran.input, tran.output, tran.priority, tran.net, tran.UnnamedIdx); else
      base();
      this.gen = gen;
    }

    public Equals(tr : GenTranCpp) : bool
    {
      this == tr : object
    }

    public virtual Priority : int
    {
      get
      {
        priority
      }
    }
    
    public Code : string
    {
      [Memoize]
      get
      {
        if (code_segment is <[]>) "" else
        if (output is <[]>)
        {
          (code_segment |> gen.ConvExpr(_, true)) + ";";
        } else
        {
          match (output)
          {
            | <[ $(n : usesite)]> => def ty = gen.TypeOfVar(n);
                                     def code = code_segment |> gen.ConvExpr(_, true);
                                     $<#$ty $n = $code;#>
            | _                   => throw InvalidOperationException("unknown expr")
          }
        }
      }
    }
    
    public IsCopyVar(place : GenPlaceCpp, arc : Arc) : bool
    {
      def is_use(n, a)
      {
        // выходные позиции с дугами исключая эту, использует это имя в разных выражениях
        // или сложное выражение использует это имя
        OutputPlacesArcs.Exclude(x => x[0] == place : object).Exists((_, a) => a.IsUseVar(n)) || a.IsUseVarComplex(n)
      }

      match (arc.ExprWithoutTime)
      {
        | <[ () ]>             =>
              def check2(places)
              {
                match (places.Find((p, _) => place == p : object))
                {
                  | Some((_, Arc(ExprWithoutTime = <[ () ]>))) => true
                  | _                                          => false
                }
              }
              match (arc.from)
              {
                | ArcSource.PlaceEnd      => check2(OutputPlacesArcs)
                | ArcSource.TransitionEnd => check2(InputPlacesArcs)
              }
        | <[ $(n : usesite) ]> => 
              def check(places)
              {
                match (places.Find((p, _) => place : object == p))
                {
                  // если у места дуги с названиями без времени равны и выражение - переменная
                  | Some((_, Arc(ExprWithoutTime = <[ $(n2 : usesite) ]>) as a)) 
                      when (n == n2) => !is_use(n, a) // и не используется в других выходных дугах
                  | _                => false
                }
              }

            match (arc.from)
            {
              | ArcSource.PlaceEnd      => check(OutputPlacesArcs)
              | ArcSource.TransitionEnd => check(InputPlacesArcs)
            }
        | _ => false  
      }
    }

    public IsCopyVarOut(place : GenPlaceCpp, arc : Arc) : bool
    {
      match (arc.ExprWithoutTime)
      {
        | <[ () ]>             =>
              def check2(places)
              {
                match (places.Find((p, _) => place == p : object))
                {
                  | Some((_, Arc(ExprWithoutTime = <[ () ]>))) => true
                  | _                                          => false
                }
              }
              match (arc.from)
              {
                | ArcSource.PlaceEnd      => check2(OutputPlacesArcs)
                | ArcSource.TransitionEnd => check2(InputPlacesArcs)
              }
        | <[ $(n : usesite) ]> => 
              def check(places)
              {
                match (places.Find((p, _) => place : object == p))
                {
                  // если у места дуги с названиями без времени равны и выражение - переменная
                  | Some((_, Arc(ExprWithoutTime = <[ $(n2 : usesite) ]>))) 
                      when (n == n2) => true
                  | _                => false
                }
              }

            match (arc.from)
            {
              | ArcSource.PlaceEnd      => check(OutputPlacesArcs)
              | ArcSource.TransitionEnd => check(InputPlacesArcs)
            }
        | _ => false  
      }
    }
    
    public virtual PartOfGroup : option[GroupTranCpp]
    {
      [Memoize]
      get
      {
        gen.GroupTransitions.Find(x => x.grouped.Contains(this))
        //def places = InputGenPlaces;//
        //def place = places.Where(x => !x.OutputGenTransitions.ElementsEqual((x, y) => x.priority == y.priority))
        //               .Map(x => (x, x.OutputGenTransitions.Where((x : Transition, _) => x.IsUnnamed)
        //                  .Select(x => x[0])));
        //match (place.Find(x => x[1].Contains(this)))
        //{
        //  | Some((_, g)) => g.Fold("", (x, a) => $"$(x.UnnamedIdx)$a") |> Some
        //  | _            => None()
        //}
      }
    }

    public virtual ExecName : string
    {
      get
      {
        if (IsUnnamed) Name else $"tran_$Name"
      }
    }

    public PlacesParticipate : list[GenPlaceCpp]
    {
      [Memoize]
      get
      {
        def to_func = OutputGenPlaces.Filter(_.IsFuncPlace);
        def places = if (!to_func.IsEmpty()) 
                      {
                        def outpath = to_func.SelectMany(x => x.PathThroughOrdinaryPlaces.Fold([], (x, a) => if (x is PetriNetNode.Place(p)) p :: a else a)).NToList();
                        InputGenPlaces + outpath
                      } else
                      {
                        def output = OutputGenPlaces.SelectMany(x => x.OutputGenTransitions.Where(x => x.IsFuncTran).SelectMany(x => x.OutputGenPlaces)).Concat(OutputGenPlaces);
                        InputGenPlaces.Concat(output)
                      }
        places.Distinct().Filter(x => !x.IsFuncPlace)
      }
    }

    public PlacesParticipateMask : string
    {
      [Memoize]
      get
      {
        def str = PlacesParticipate.Fold("", (x, a) => if (a.IsEmpty()) $"pl_$(x.Name)" else $"pl_$(x.Name) | $a");
        $"(tplace)($str)"
      }
    }

    public IsInline : bool
    {
      [Memoize]
      get
      {
        InputGenPlaces.Count() == 1 && InputGenPlaces.First().IsFuncPlace
      }
    }
    
    public IsFuncTran : bool
    {
      [Memoize]
      get
      {
        InputGenPlaces.Exists(x => x.port is Some(PortType.InOut))
      }
    }

    public InArcProcess : list[InArcBindingCpp]
    {
      [Memoize]
      get
      {
        InputPlacesArcs.Map((x, a) => InArcBindingCpp(x, gen, this, [], a))
      }
    }

    public OutArcProcess : list[OutArcProcessCpp]
    {
      [Memoize]
      get
      {
        OutputPlacesArcs.Map((p, a) => OutArcProcessCpp(p, this, a, gen))
      }
    }

    public NextTran : list[GenTranCpp]
    {
      [Memoize]
      get
      {
        def out_tran = OutputGenPlaces.SelectMany(x => x.OutputGenTransitions.Select(y => (x, y)));
        def tr_next = out_tran.Where((p, x : GenTranCpp) => (x.IsImmediate && !x.IsTimed && !x.IsPartOfFuncPlace && !x.PartOfGroup.HasValue) || (p.port is Some(PortType.In) && x.Name == p.Name))
                         .Select((_, x : GenTranCpp) => x);
        
        tr_next.NToList()
      }
    }
    
    public IsInputPort(pl : GenPlaceCpp) : bool
    {
      def other = InputGenPlaces.Except(pl).Where(_.InputPort);
      pl.Name == Name || other.IsEmpty()
    }
    
    public virtual CompleteTran : bool
    {
      [Memoize]
      get
      {
        IsImmediate && !IsTimed && !IsPartOfFuncPlace && !IsFuncTran
      }
    }
    
    public LockTran : string
    {
      [Memoize]
      get
      {
        if (PartOfGroup is Some(g)) $"tr_GroupTransition$g" else $"tr_$(ExecName)";
      }
    }
    
    public virtual GroupBindMode : bool
    {
      get
      {
        false
      }
    }
    
    public Body : string
    {
      [Memoize]
      get
      {
        //def places = PlacesParticipateMask;
        //def tr_next = NextTran;
        
        //def next_tran(x)
        //{
        //  if (x.IsFuncTran)
        //  {
        //    def var = if (x.InputGenPlaces.First().Colour.IsComplexType) $"*res_$(x.InArcProcess.First().bind_var)" else $"res_$(x.InArcProcess.First().bind_var)";
        //    (x, var) 
        //  } else (x, "")
        //}

        //def tr_next = tr_next.Map(next_tran);
        //def tr_next = tr_next.Map((x, p) => $<#$(x.ExecName)($p);#>);
        match (this)
        {
          | GroupTranCpp as g => gen.CreateGroupTranBody(g)
          | _                 => def body = gen.CreateTranBody(this);
                                $<#$body;
                                 #>
        }
      }
    }

    public DfsIterator : IEnumerable[PetriNetNode]
    {
      [Memoize]
      get
      {        
        def it = DfsIter(gen);
        it.Dfs(this |> PetriNetNode.Tran).ToArray()
      }
    }

    public PathThroughOrdinaryPlaces : IEnumerable[PetriNetNode]
    {
      [Memoize]
      get
      {
        def visit(v)
        {
          | PetriNetNode.Place(p) when p.IsTimed => false
          | _                                    => true
        }

        DfsIterator.Visit(visit).ToArray()
      }
    }

    public InputPlacesArcs : list[GenPlaceCpp * Arc]
    {
      [Memoize]
      get
      {
        gen.Places.MapIndex((p, i) => (p, gen.Proc.OutputMatrix[i, idx]))
          .Filter((_, a) => a != null)
          .SelectMany((p, a) => a.Map(x => (p, x))).NToList()
      }
    }

    public virtual InputGenPlaces : list[GenPlaceCpp]
    {
      [Memoize]
      get
      {
        gen.Places.MapIndex((p, i) => (p, gen.Proc.OutputMatrix[i, idx]))
          .Filter((_, a) => a != null)
          .Map((p : GenPlaceCpp, _) => p)
      }
    }

    public IsPartOfFuncPlace : bool
    {
      [Memoize]
      get
      {
        InputGenPlaces.Exists(x => x.IsFuncPlace && x.FuncTran == this : object)
      }
    }

    public OutputPlacesArcs : list[GenPlaceCpp * Arc]
    {
      [Memoize]
      get
      {
        gen.Places.MapIndex((p, i) => (p, gen.Proc.InputMatrix[i, idx]))
          .Filter((_, a) => a != null)
          .SelectMany((p, a) => a.Map(x => (p, x))).NToList()
      }
    }

    public virtual OutputGenPlaces : list[GenPlaceCpp]
    {
      [Memoize]
      get
      {
        gen.Places.MapIndex((p, i) => (p, gen.Proc.InputMatrix[i, idx]))
          .Filter((_, a) => a != null)
          .Map((p, _) => p)
      }
    }
  }
}
