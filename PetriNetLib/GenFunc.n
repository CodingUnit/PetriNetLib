using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using CommonLib.Macros;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler;

namespace PetriNetLib
{
  public enum FuncPrefix
  {
    | None
    | GetBytes
    | GetStruct
    | Func
    | Ext
  }

  /// <summary>
  /// Description of GenFunc.
  /// </summary>
  [Record]
  public class GenFunc
  {
    public expr : PExpr;
    public gen  : Generator;

    public NameWithPrefix : string
    {
      [Memoize]
      get
      {
        match (expr)
        {
          | <[ def $(n : usesite)(..$_) { ..$_ } ]> 
          | <[ def $(n : usesite)(..$_) : $_t { ..$_ } ]> => n
          | _                                             => throw InvalidOperationException()
        }
      }
    }

    public Body : list[PExpr]
    {
      [Memoize]
      get
      {
        match (Processed)
        {
          | <[ def $(_ : usesite)(..$_) { ..$expr } ]> 
          | <[ def $(_ : usesite)(..$_) : $_t { ..$expr } ]> => expr
          | _                                                => throw InvalidOperationException()
        }
      }
    }
   
     public Parms : list[PParameter]
    {
      [Memoize]
      get
      {
        match (expr)
        {
          | <[ def $(_ : usesite)(..$parms) { ..$_ } ]> 
          | <[ def $(_ : usesite)(..$parms) : $_t { ..$_ } ]> => parms
          | _                                                 => throw InvalidOperationException()
        }
      }
    }
    
    public static IsFunc(expr : PExpr) : bool
    {
      | <[ def $(_ : usesite)(..$_) { ..$_ } ]>
      | <[ def $(_ : usesite)(..$_) : $_ { ..$_ } ]> => true
      | _                                            => false
    }

    public Name : string
    {
      [Memoize]
      get
      {
        if (Prefix.IsEmpty()) NameWithPrefix else NameWithPrefix.Substring(Prefix.Length)
      }
    }

    public PrefixType : FuncPrefix
    {
      [Memoize]
      get
      {
        match (Prefix)
        {
          | "EXT_"        => FuncPrefix.Ext
          | "FUNC_"       => FuncPrefix.Func
          | "get_struct__" => FuncPrefix.GetStruct
          | "get_bytes__" => FuncPrefix.GetBytes
          | _             => FuncPrefix.None
        }
      }
    }

    //public static FuncInitDecl(name : string, parms : list[GenColour], ret : option[string]) : string
    //{
    //  def parms = parms.Map(x => x.ParmType);
    //  def ret = if (ret is Some(r)) r else "void";
    //    def func = $<#$ret(*func)(..$(parms; ","))#>;          //void( function_hal::*self_func_type )( );
    //    //def parms = if (parms.IsEmpty()) "" else $<#, ..$(parms; ",")#>;
    //    //def funct = $<#$ret(T::*func)(T *obj$parms)#>;
    //    $<#void init_$name($func)
    //      {
    //        $name = func;
    //      }
         
    //      #>
    //      /*
    //       template <class T>
    //      void init_$name(T *obj, $funct)
    //      {
    //        $name = function(obj, func);
    //      }
    //      */
    //}
    
    //public static FuncTypedefDecl(name : string, parms : list[GenColour], ret : string) : string
    //{
    //    def parms = parms.Map(x => x.ParmType);
    //    //def parms = if (parms.IsEmpty()) "" else $<#..$(parms; ",")#>;
    //    $<#$ret (*$name)(..$(parms; ","))#>
    //}
    
    //public FuncTypedef : string
    //{
    //  [Memoize]
    //  get
    //  {
    //    def ret = if (IsVoid) "void" else ReturnType;
    //    def parms = ParmsColour.Map(x => x.ParmType);
    //    //def parms = if (parms.IsEmpty()) "" else $<#..$(parms; ",")#>;
    //    $<#$ret (*$Name)(..$(parms; ","))#>
    //  }
    //}
    
    //public static FuncTypedef() : string
    //{
    //  [Memoize]
    //  get
    //  {
    //    def ret = if (IsVoid) "void" else ReturnType;
    //    def parms = if (Parms.IsEmpty()) "" else $<#, ..$(parms; ",")#>;
    //    $<#$ret (*Name)(..$(parms; ","))#>
    //  }
    //}
    //public FuncSetDecl : string
    //{
    //  [Memoize]
    //  get
    //  {
    //    FuncInitDecl(Name, ParmsColour, if (IsVoid) None() else Some(ReturnType))
    //  }
    //}
    
    public Prefix : string
    {
      [Memoize]
      get
      {
        if (NameWithPrefix.StartsWith("EXT_")) "EXT_" else
          if (NameWithPrefix.StartsWith("FUNC_")) "FUNC_" else
            if (NameWithPrefix.StartsWith("get_bytes__")) "get_bytes__" else
            if (NameWithPrefix.StartsWith("get_struct__")) "get_struct__" else ""
      }
    }

    //public IsVoid : bool
    //{
    //  [Memoize]
    //  get
    //  {
    //    ReturnType == "void"
    //  }
    //}
    
    //public ReturnType : string
    //{
    //  [Memoize]
    //  get
    //  {
    //    match (expr)
    //    {
    //      | <[ def $(_ : usesite)(..$_) { ..$_ } ]> =>
    //          //def ty = Typer(gen.TypingMethod);
    //          match (gen.Typer.TypeExpr(expr))
    //          {
    //            | TExpr.DefFunctionsIn(h :: _, _) => h.ReturnType |> gen.ConvType
    //            | _                               => throw InvalidOperationException()
    //          }

    //      | <[ def $(_ : usesite)(..$_) : $t { ..$_ } ]> => t.ToString()
    //      | _                                            => throw InvalidOperationException()
    //    }


    //  }
    //}

    //public Decl : string
    //{
    //  [Memoize]
    //  get
    //  {
    //    def ret = ReturnType;
    //    def expr = Body.Map(gen.ConvExpr(_, true));
    //    def ctx = gen.ReadCtxVar();
    //    def ctx = if (!ctx.IsEmpty()) $<#..$(ctx; ",")
    //    #> else "";
    //    def (last, expr) = expr.PartitionLast();
    //    def parms = Parms.Map(gen.ConvParm);
    //    def n = Name;
    //    $<#$ret $n(..$(parms; ","))
    //      {$ctx..$(expr;";\n")
    //        return $last;
    //      }
    //      #>
    //  }
    //}
    
    public ParmsCall : list[string]
    {
      get
      {
        []
      }
    }
    
    public ParmsColour : list[GenColour]
    {
      [Memoize]
      get
      {
        Parms.Map(x => gen.Colours[x.Type.ToString()])
      }
    }
    
    //public ParmsType : list[string]
    //{
    //  [Memoize]
    //  get
    //  {
    //    ParmsColour.Map(_.ParmType)
    //  }
    //}
    
    //public Call(parms : list[PExpr]) : string
    //{
    //    match (PrefixType)
    //    {
    //      | FuncPrefix.Ext        => if (ReturnType == "void") 
    //                                 {
    //                                   //def ty = if (ParmsType.Length != 0) $<#<..$(ParmsType; ",")>#> else "";
    //                                  $<#$(Name)(..$(parms; ","))#>
    //                                 }
    //                                else 
    //                                {
    //                                  //def ty = ReturnType :: ParmsType;
    //                                  $<#$(Name)(..$(parms; ","))#>
    //                                }
    //      | FuncPrefix.GetBytes   => //
    //                                 def parm = parms.First();// |> gen.ConvExpr(_, false);
    //                                 def parmtype = Parms.First().Type.ToString();
    //                                 def type = gen.Colours[parmtype];
    //                                 if (type.IsComplexType)
    //                                 {
    //                                   match (parm)
    //                                   {
    //                                     | <[ $(n : usesite) ]> => $<#$(n).get_bytes()#>
    //                                     | e                    => def var = Macros.NewSymbol();
    //                                                               def expr = e |> gen.ConvExprPlaceCtx(_, type, false);
    //                                                               gen.AddCtxVar($<#$parmtype $var = $expr;#>);
    //                                                               $<#$var.get_bytes()#>
    //                                   }
    //                                } else
    //                                 $<#bytesn((void *)&$(parm), sizeof($(parmtype)))#>
    //      | FuncPrefix.GetStruct  => def parm = parms.First();
    //                                 $<#(*($ReturnType *)$(parm).get_buf())#>
    //      | _                     => 
    //        def parms = parms.Map(x => gen.ConvExpr(x, false));
    //        $<#$Name(..$(parms; ","))#>
    //    }
    //}
    
    public Processed : PExpr
    {
      [Memoize]
      get
      {
          def proc_parms(p, t, b)
          {
            def proc_parm(p, (parm, e))
            {
              def (p, e) = match (p)
                            {
                              | <[parameter: $(n : usesite) : Index.[$(type : usesite)]]> => 
                                  match (gen.Model.GetIndex(type))
                                  {
                                    | Some((t, _)) => (<[parameter: $(n : usesite) : $(t : usesite)]> :: parm, e)
                                    | _            => (parm, e)
                                  }
                              | p => (p :: parm, e)  
                            }

              def e = if (t is Some(t))      
                        match (e)
                        {
                          | [] => e
                          | lst => def (last, e : list[PExpr]) = lst.PartitionLast();
                            def last = match (last)
                            {
                              | <[ {(..$e)} ]>
                              | <[(..$e)]> when e.All(x => x is PExpr.Assign) => <[ $t(..$e)]>
                              | e => e
                            }
                            e + [last]
                        } else e;

              (p, e)
            }

            def expr = <[ {..$b} ]>;
            def (p, expr) = p.Fold(([], expr :: []), proc_parm);
            (p.Rev(), expr)
          }
        
        match (expr)
        {
          | <[ def $(n : usesite)(..$parms) { ..$body } ]> => 

            def (parms, expr) = proc_parms(parms, None(), body);

            <[ def $(n : usesite)(..$parms) { ..$expr } ]>

          | <[ def $(n : usesite)(..$parms) : $t { ..$body } ]> => 

            def (parms, expr) = proc_parms(parms, Some(t), body);

            <[ def $(n : usesite)(..$parms) : $t { ..$expr } ]>

          | _                     => throw InvalidOperationException()
        }
      }
    }

  }
}
