using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using PetriNetModel;

namespace PetriNetLib
{
  /// <summary>
  /// Description of GenTran.
  /// </summary>
  partial class Generator
  {
    CreateTranBody(tran : Transition) : PExpr
    {
      def input  = tran.InputPlaces;
      def output = tran.OutputPlaces;
      //def map    = Hashtable();
      
      def input = input.Map((x, a) => InArcBinding(x, tran, [], a.expr));
      
      foreach (i in input)
      {
        match (i.expr)
        {
          | <[ $_(..$p) ]> => foreach (p in p)
                              {
                                | <[ $(n : usesite)]> => match (input.Find(x => x.bind_var == n))
                                                         {
                                                           | Some(x) => i.Depends ::= x;
                                                           | _       => ()
                                                         }
                                | _                   => ()
                              }
          | _ => ()
        }
        //map[i.name] = i;
      }
      
      def input    = input.Sort((x, y) => y.priority - x.priority); 
      def add_proc = output.Map((p, a) => OutArcProcess(p, tran, a));
      
      def extract = input.Map(_.extract_expr);
      def add_body = add_proc.Map(_.add_token);
      def code = tran.code_segment ?? <[]>;
      def body = extract + (code :: add_body);
      def body = if (tran.guard is <[]>) body else 
                  <[ when ($(tran.guard)) {..$body}]> :: [];
      
          
      def fold(x, a)
      {
        if (a == null)
        {
          <[  
              when ($(x.check_expr))
              {
               $(x.bind_expr);
               {..$body}
              }
          ]>
        } else
        {
          <[  
              when ($(x.check_expr))
              {
               $(x.bind_expr);
               $a
              }
          ]>
        }
      }
      
      
      //def input = eval(input, []);
      
      input.Fold(null, fold);
    }
    
  }
}
