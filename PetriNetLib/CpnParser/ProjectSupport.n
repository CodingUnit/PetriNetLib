//using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

[assembly: ProjectSupport("CPNML", typeof(CpnML.Grammar.Typing.ProjectSupport))]

namespace CpnML.Grammar.Typing
{
  public partial class ProjectSupport : IProjectSupport
  {
    public RefreshReferences(_cancellationToken : CancellationToken, project : Project) : object
    {
        def context = DependentPropertyEvalContext(project);
        context
    }
    
    public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
    {
        IgnoreParams();
    }
    public DeconstructType(symbol : Nitra.Declarations.DeclarationSymbol, type : out Nitra.Declarations.TypeSymbol, typeArgs : out System.Collections.Immutable.ImmutableArray[Nitra.Declarations.TypeSymbol]) : bool
    {
        IgnoreParams();
        false
    }
    
    public GetSymbolById(data : object, symbolId : int) : ValueOption[Nitra.Declarations.DeclarationSymbol]
    {
        IgnoreParams();
        VNone()
    }
    
    public Postprocessing(cancellationToken : System.Threading.CancellationToken, project : Nitra.ProjectSystem.Project, asts : System.Collections.Immutable.ImmutableArray[(Nitra.Declarations.IAst * bool)], data : object) : void
    {
        IgnoreParams();
    }
    
    public VisitGlobalSymbols(data : object, callback : System.Predicate[Nitra.Declarations.DeclarationSymbol]) : void
    {
        IgnoreParams();
    }
  }
}
