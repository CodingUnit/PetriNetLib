namespace CpnML.Grammar
{
  syntax module Base
  {
    using Nitra.Core;
    using Nitra;
    using Nitra.CStyleComments;
    
    
	  extend token IgnoreToken
    {
     | [SplitAtCompletionPosition] SpaceToken = Spaces;
     | MultiLineComment = "(*" (!"*)" Any)* "*)";
    }

    /*extend token IgnoreToken
    {
      //| [SpanClass(Comment)] SingleLineComment = SingleLineComment;
      
    }*/

		regex UnicodeLineSeparator      = '\u2028';
    regex UnicodeParagraphSeparator = '\u2029';
    regex NewLineCharacter          = '\n' | '\r' | UnicodeLineSeparator | UnicodeParagraphSeparator;
    regex NewLine                   = "\r\n" | NewLineCharacter;
    //regex Whitespace                = [Zs] | '\t' | '\v' | '\f' | '\uFEFF';
    regex Space                     = Whitespace | NewLineCharacter;
    regex Spaces                    = Space+;

    //void s = Spaces*;                // optional spacer

    regex Whitespace = [Zs] | '\t' | '\v' | '\f';
    //regex Spaces     = Whitespace*;

		token String = '"' (!'"' Any)* '"';

	  regex Integer  = '0' | ['1'..'9'] ['0'..'9']*;
	  token Numeric = Minus="~"? Val=Integer
    {
      GetValue() : int
      { 
        def val = int.Parse(GetText(Val));
        if (Minus.HasValue) -val else val
      }
    }

    [SpanClass(Number)]
    token FloatingNumber = Minus="~"? Val=Number
    {
      token Number = Integer Fraction? Exponent?;
      regex Digits   = ['0'..'9']+;
      regex Fraction = "." Digits;
      regex Exponent = ("E" | "e") ("-" | "+")? Digits;

      GetValue() : double 
      {
        def val = double.Parse(Val.GetText());
        if (Minus.HasValue) -val else val
      }
    }

    token Boolean
    {
      | True = "true"
      | False = "false"
    }

    regex KeywordToken =   "fun"    | "var" | "val" | "orelse" | "andalso" 
                           | "case" | "in"  | "end" | "int"    | "string" 
                           | "real" | "if"  | "intinf" | "bool" | "unit";

    regex IdentifierBody = IdentifierStartCharacter IdentifierPartCharacters*;

    regex LetterCharacter           = [Lu, Ll, Lt, Lm, Lo, Nl];
    regex CombiningCharacter        = [Mn, Mc];
    regex DecimalDigitCharacter     = [Nd];
    regex ConnectingCharacter       = [Pc];
    regex FormattingCharacter       = [Cf];

    regex IdentifierStartCharacter  = LetterCharacter | "_";
    regex IdentifierPartCharacters  = LetterCharacter 
                                      | DecimalDigitCharacter
                                      | ConnectingCharacter 
                                      | CombiningCharacter
                                      | FormattingCharacter
                                      | '-';

	  token Identifier = !Keyword !'=' IdentifierBody
    {
      token Keyword = KeywordToken !IdentifierPartCharacters;
    }
    
    token AnyIdentifier = IdentifierBody;    

    syntax Attributes = '[' (Identifier; ',')+ ']';

  }
}
