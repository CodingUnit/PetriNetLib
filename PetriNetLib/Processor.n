using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Macro;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.Immutable;
using CommonLib.Macros;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;

namespace PetriNetLib
{
  
  /*
  todo:
    - fifo places
    - sorted tokens places
  */
  class PetriNetProcessor
  {
    mutable places      : array[Place];
    mutable transitions : array[Transition];
    mutable arcs        : array[Arc];
    public  glob_refs   : Hashtable[string, PExpr]     = Hashtable();
    public  vars        : Hashtable[string, ColourSet] = Hashtable();
    public  colour_sets : Hashtable[string, ColourSet] = Hashtable();
    [Accessor]
    mutable ml_decls    : list[PExpr];
    [Accessor]
    name : string;
    tree_places : list[CpnTree.Place];
    tree_tran   : list[CpnTree.Transition];
    tree_arcs   : list[CpnTree.Arc];
    tree_decls  : list[CpnDecl];
    [Accessor]
    typer : Typer;
    [Accessor]
    typebuilder : TypeBuilder;
    
    public OutModel : OutModel
    {
      [Memoize]
      get
      {
        OutModel(places, transitions, arcs, vars, glob_refs, colour_sets, ml_decls)
      }
    }
    
    //mutable matrix_len         : array[int];
    mutable input_matrix       : array[2, list[Arc]];
    mutable output_matrix      : array[2, list[Arc]];
    //mutable incidence_matrix   : array[2, int];
    colours            : list[Colour] = [];
    [Accessor]
    converter          : Converter = Converter();
    
    public Flags : PetriNetFlags {get; private set;}
    
    public InputTransitionArcs(tran : Transition) : list[Place * Arc]
    {
      places.MapIndex((p, i) => (p, output_matrix[i, tran.idx]))
      .Filter((_, a) => a != null)
      .SelectMany((p, a) => a.Map(x => (p, x))).NToList()
    }
    
    public OutputTransitionArcs(tran : Transition) : list[Place * Arc]
    {
      places.MapIndex((p, i) => (p, input_matrix[i, tran.idx]))
      .Filter((_, a) => a != null)
      .SelectMany((p, a) => a.Map(x => (p, x))).NToList()
    }
    
    public InputPlaceArcs(place : Place) : list[Transition * Arc]
    {
      transitions.MapIndex((p, i) => (p, input_matrix[place.idx, i]))
      .Filter((_, a) => a != null)
      .SelectMany((p, a) => a.Map(x => (p, x))).NToList()
    }
    
    public OutputPlaceArcs(place : Place) : list[Transition * Arc]
    {
      transitions.MapIndex((p, i) => (p, output_matrix[place.idx, i]))
      .Filter((_, a) => a != null)
      .SelectMany((p, a) => a.Map(x => (p, x))).NToList()
    }
    
    //public InputArcs() : IEnumerable[Place * Transition * list[Arc]]
    //{
    //  foreach (_ in places with p)
    //  {
    //    foreach (_ in transitions with t)
    //    {
    //      def arc = input_matrix[p, t];
    //      if (arc != null) 
    //        yield (places[p], transitions[t], arc) 
    //      else ()
    //    }
    //  }
    //}

    //public OutputArcs() : IEnumerable[Place * Transition * list[Arc]]
    //{
    //  foreach (_ in places with p)
    //  {
    //    foreach (_ in transitions with t)
    //    {
    //      def arc = output_matrix[p, t];
    //      when (arc != null)
    //        yield (places[p], transitions[t], arc)
    //    }
    //  }
    //}
    
    BuildMatrix() : void
    {
      def places = places.Length;
      def tran   = transitions.Length;
      
      
      //when (matrix_len == null || matrix_len[0] != places || matrix_len[1] != tran)
      //{
      input_matrix     = array(places, tran);
      output_matrix    = array(places, tran);
      //}
      
      //matrix_len = array[places, tran];
    }
    
    public this(name : string, flags : PetriNetFlags, ty : Typer, typebuilder : TypeBuilder, places : list[CpnTree.Place], tran : list[CpnTree.Transition], arcs : list[CpnTree.Arc], decls : list[CpnDecl])
    {
      this.name = name;
      this.Flags = flags;
      tree_places = places;
      tree_tran = tran;
      tree_arcs = arcs;
      tree_decls = decls;
      typer = ty;
      this.typebuilder = typebuilder;
    }
    
    public Process() : void
    {
      mutable pidx : int = 0;
      mutable tidx : int = 0;
      
      def create_place(p)
      {
        | CpnTree.Place(n, id, t, i, port) =>
            def col = colour_sets[t];
            def expr = i |> converter.ParseML;
            def place = Place(pidx, id, n, col, expr.Value, port, p, this, 0);
            pidx++;
            place
      }
      
      def create_tran(t)
      {
        | CpnTree.Transition(n, id, g, t, c) =>
        
            def get_func(c)
            {
              match (c.IndexOf("action"))
              {
                | -1 => <[]>
                | n  => 
                
                def firstbrace_str = c.Substring(n + 6);
                def firstbrace = firstbrace_str.IndexOf('(') + 1;
                def lastbrace = firstbrace_str.LastIndexOf(')');
                def len = lastbrace - firstbrace;
                match (converter.ParseML(firstbrace_str.Substring(firstbrace, len)))
                {
                  | Some(<[]>)               => <[]>
                  | Some(<[ {..$_} ]> as e)
                  | Some(e)                  => e
                  | _                        => throw InvalidOperationException("parsing error")
                }
              }
          
            
            }
        
            def guard = g.MapDefault(x => converter.ParseML(x.Trim('[', ']')).Value, <[]>);
            def time  = t.MapDefault(converter.ParseML, Some(<[]>)).Value;
            def code  = c.MapDefault(get_func, <[]>);
            
            
            def tran = Transition(tidx, id, n, guard, time, code, 0, this);
            tidx++;
            tran
      }
      
      def create_arcs(a)
      {
        | CpnTree.Arc(t, from, to, dir) => 
            def expr = converter.ParseML(t).Value;
            def placeend = end => places.First(x => x.id == end) |> ArcSource.PlaceEnd;
            def transend = end => transitions.First(x => x.id == end) |> ArcSource.TransitionEnd;
            def (f, t, k) = match (dir)
            {
              | Dir.Reset     => (placeend, transend, ArcKind.Reset)
              | P2T           => (placeend, transend, ArcKind.Normal)
              | Inhibitor     => (placeend, transend, ArcKind.Inhibitor)
              | _             => (transend, placeend, ArcKind.Normal)
            }
            def from = from |> f;
            def to =   to   |> t;
            Arc(expr, from, to, k)
      }
      
      def (color, decls) = tree_decls.PartitionType();
      foreach (d : CpnDecl.ColourSet in color)
      {
        match (d)
        {
          | CpnDecl.ColourSet("OPTIONS", Colour.Enum(opts)) => 
              foreach (opt in opts)
              {
                | "events"        => Flags |= PetriNetFlags.Events
                | "print_binding" => Flags |= PetriNetFlags.PrintBinding
                | _               => ()
              }
          | _                                            => colour_sets[d.name] = ColourSet(d.name, d.type);
        }
      }
      
      foreach (d in decls)
      {
        | CpnDecl.Var(i, c) => vars[i] = colour_sets[c]
        | GlobRef(i, v)     => def expr = converter.ParseML(v).Value;
                               glob_refs[i] = expr
        | ML(str)           => def expr = converter.ParseML(str).Value;
                               ml_decls ::= expr
        | _                 => ()
      }
      
      places      = tree_places.MapToArray(create_place);
      transitions = tree_tran.MapToArray(create_tran);
      def (both_arcs, other_arcs)   = tree_arcs.Partition(x => x.type == Dir.Both);
      
      def create_two_arcs(b)
      {
        def (dir1, dir2) = if (places.Exists(x => x.id == b.from)) (Dir.P2T, Dir.T2P) else (Dir.T2P, Dir.P2T);
        def a1 = CpnTree.Arc(b.text, b.from, b.to, dir1);
        def a2 = CpnTree.Arc(b.text, b.to, b.from, dir2);
        a1 :: a2 :: []
      }
      
      def both_arcs = both_arcs.SelectMany(create_two_arcs).NToList();
      
      def tree_arcs = both_arcs + other_arcs;
      arcs          = tree_arcs.MapToArray(create_arcs);
      BuildMatrix();
      foreach (Arc(_, f, t, _) as a in arcs with i)
      {
        match (f, t)
        {
          | (ArcSource.PlaceEnd(p),      ArcSource.TransitionEnd(t)) => 
            add_arc(output_matrix, p.idx, t.idx, a);
          | (ArcSource.TransitionEnd(t), ArcSource.PlaceEnd(p))      => 
            add_arc(input_matrix, p.idx, t.idx, a);
          | _                                                        => ()
        }
      }
      //ProcessTransparent();
      //BuildMatrix();
    }
    
    add_arc(matrix : array[2, list[Arc]], p : int, t : int, a : Arc) : void
    {
      def val = matrix[p, t];
      def val = if (val == null) [a] else a :: val;
      matrix[p, t] = val
    }
    
    //AddArc(from : Transition, a : Arc, to : Place) : void
    //{
    //  //def place = (a.to :> ArcSource.PlaceEnd).place;
    //  //def toplace = (to :> ArcSource.PlaceEnd).place;
    //  //input_matrix[place.idx, tran.idx] = null;
    //  def a = Arc.to_lens.Set(a, to |> ArcSource.PlaceEnd);
    //  add_arc(input_matrix, to.idx, from.idx, a);
    //}
    
    //DeleteTran(tran : Transition) : void
    //{
    //  def idx = tran.idx;
    //  foreach ((p, _) in tran.OutputPlaces)
    //  {
    //    input_matrix[p.idx, idx] = null;
    //  }
    //  foreach ((p, _) in tran.InputPlaces)
    //  {
    //    output_matrix[p.idx, idx] = null;
    //  }
    //  transitions[tran.idx] = null;
    //}
    
    //DeletePlace(pl : Place) : void
    //{
    //  def idx = pl.idx;
    //  foreach ((p, _) in pl.InputTransitions)
    //  {
    //    input_matrix[idx, p.idx] = null;
    //  }
    //  foreach ((p, _) in pl.OutputTransitions)
    //  {
    //    output_matrix[idx, p.idx] = null;
    //  }
    //  places[pl.idx] = null;
    //}
    //// TODO: сделать прозрачные если переходы после позиций имеют входы
    //ProcessTransparent() : void
    //{
    //  def transparent = places.Where(_.IsTransparent);
    //  foreach (p in transparent)
    //  {
    //    def (tran, outarc) = p.OutputTransitions.First();
    //    //def place = outarc.to;
    //    def input = p.InputTransitions;
        
    //    foreach ((t, a) in input)
    //    {
    //      def expr = match (a.expr, outarc.expr)
    //                {
    //                  | (<[ () ]>, <[ () ]>)                      => <[ () ]>
    //                  | (<[ $(_ : usesite) ]> as b, <[ () ]>)
    //                  | (<[ () ]>, <[ $(_ : usesite) ]> as b)
    //                  | (<[ () ]>, <[ (..$_) ]> as b)
    //                  | (<[ $(_ : usesite) ]>, <[ (..$_) ]> as b)
    //                  | (<[ (..$_) ]> as b, <[ $(_ : usesite) ]>)
    //                  | (<[ (..$_) ]> as b, <[ () ]>)             => b
    //                }
    //      foreach ((p, _) in tran.OutputPlaces)
    //      {
    //        def arc = Arc.expr_lens.Set(a, expr);
    //        AddArc(t, arc, p);
    //        //RetargetTranTo(t, arc, place);
    //      }
    //    }
    //  }
      
    //  foreach (p in transparent)
    //  {
    //    def (output, _) = p.OutputTransitions.First();
    //    DeleteTran(output);
    //    DeletePlace(p);
    //  }
    //}
  }
}
