using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Macro;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.Immutable;
using CommonLib.Macros;
using Nemerle.Compiler.Parsetree;

namespace PetriNetLib
{
  
  //using Nemerle.Builtins.Function;
  
  //[Lens]
  //[Record]
  //public class Colour
  //{
  //  public idx  : int;
  //  public type : Type;
  //}
  
  [Record]
  class Token
  {
    public value  : object;//TokenVal[Colour];
    public colour : Colour;
    
    public this(val : object)
    {
      value = val;
      //colour = Colour(-1, val.GetType());
    }
    
  }
  
  [Record]
  [Lens]
  class Place
  {
    public idx    : int;
    public id     : string;
    public name   : string;
    public colour : ColourSet;
    
    public init_mark : PExpr;
    public tree      : CpnTree.Place;
    public net       : PetriNet;
      
    public override GetHashCode() : int
    {
      idx
    }
  }
  
  [Record]
  class TokenSet
  {
    public num   : int;
    public token : Token;
  }
  
  [Record]
  [Lens]
  class Transition
  { 
    public idx : int;
    public id  : string;
    public name : string;
    public guard : PExpr;
    
    public time_expr : PExpr;
    public code_segment : PExpr;
    public priority : int;
    public net : PetriNet;
    
    public override GetHashCode() : int
    {
      idx
    }
  }
  
  [Record]
  variant ArcSource
  {
    | PlaceEnd {place : Place}
    | TransitionEnd {tran : Transition}
  }
  
  
  [Record]
  [Lens]
  class Arc
  { 
    public expr : PExpr;
    
    public from : ArcSource;
    public to   : ArcSource;
  }
  [Record]
  class ColourSet
  {
    public name : string;
    public type : Colour;
  }
  
  variant ExecError
  {
    | TokenConstantNotFound { place : Place; val : object }
    | VarNotFound {name : string}
    | TypeTokenNotCompat {incol : Colour; outcol : Colour;place : Place}
  }
  
  //[Lens]
  //[Record]
  //public class TransitionExecContext
  //{
  //  public binding : Hashtable[string, Token];
  //  public tokens  : list[Token];
  //  public error   : list[ExecError];
    
  //  public all_getted_tokens : list[Token]
  //  {
  //    get
  //    {
  //      []
  //    }
  //  }
  //}
  
  public class PetriNet
  {
    mutable places      : array[Place];
    mutable transitions : array[Transition];
    mutable arcs        : array[Arc];
    public  vars        : Hashtable[string, ColourSet] = Hashtable();
    public  colour_sets : Hashtable[string, ColourSet] = Hashtable();
    mutable ml_decls : list[PExpr];
    name : string;
    tree_places : list[CpnTree.Place];
    tree_tran   : list[CpnTree.Transition];
    tree_arcs   : list[CpnTree.Arc];
    tree_decls  : list[CpnDecl];
    
    
    matrix_len         : array[int] = array[];
    mutable input_matrix       : array[3, Arc];//List[List[List[Arc]]];
    mutable output_matrix      : array[3, Arc];
    mutable incidence_matrix   : array[3, int];
    colours            : list[Colour] = [];
    converter          : Converter = Converter();
    
    //InputTransitionArcs : list[Transition * list[Place * Arc]]
    //{
    //  [Memoize]
    //  get
    //  {
    //    OutputArcs.GroupBy((_, t, _) => t).Map(x => (x.Key, x.Map((p, _, a) => (p, a))));
    //  }
    //}
    
    //InputArcs : IEnumerable[Place * Transition * Arc]
    //{
    //  [Memoize]
    //  get
    //  {
    //    foreach (c in Enumerable.Range(0, colours.Length))
    //    {
    //      foreach (p in Enumerable.Range(0, places.Length))
    //      {
    //        foreach (t in Enumerable.Range(0, transitions.Length))
    //        {
    //          def arc = input_matrix[p, t, c];
    //          if (arc != null)
    //            yield (places[p], transitions[t], arc) else ()
    //        }
    //      }
    //    }
    //   }
    //}

    TranOutputArcs(tran : Transition) : IEnumerable[Place * Arc]
    {
      null
      //InputArcs.Where((_, t, _) => t : object == tran).Select((p, _, a) => (p, a))
    }
    
    //OutputArcs : IEnumerable[Place * Transition * Arc]
    //{
    //  [Memoize]
    //  get
    //  {
    //    foreach (c in Enumerable.Range(0, colours.Length))
    //      foreach (p in Enumerable.Range(0, places.Length))
    //        foreach (t in Enumerable.Range(0, transitions.Length))
    //        {
    //          def arc = output_matrix[p, t, c];
    //          when (arc != null)
    //            yield (places[p], transitions[t], arc)
    //        }
    //   }
    //}
    
    //arcs               : List[List[Arc]] = List();
    //transition_input_matrix  : List[List[int]];
    //transition_output_matrix : List[List[int]];
    //place_arcs               : List[List[Arc]];
    //transition_arcs          : List[List[Arc]];
    
    //place_idx : int;
    //transition_idx : int;
    //colour_idx : int;
    
    //GetEdgesNull(count : int) : List[List[Arc]]
    //{
    //  ListUtils.Init(count, _ => null).ToList()
    //}
    
    //GetEmptyMatrix(count : int) : IEnumerable[List[List[Arc]]]
    //{
    //  Enumerable.Repeat(ListUtils.Init(places.Count, _ => null).ToList(), count)
    //}
    
    BuildMatrix() : void
    {
      def arcs    = arcs.Length;
      def places = places.Length;
      def tran   = transitions.Length;
      
      
      when (matrix_len.Length == 0 || matrix_len[0] != places || matrix_len[1] != tran || matrix_len[2] != arcs)
      {
        input_matrix = array(places, tran, arcs);
        output_matrix = array(places, tran, arcs);
        incidence_matrix = array(places, tran, arcs);
      }
      
      for (mutable p = 0; p < places; p++)
        for (mutable t = 0; t < tran; t++)
          for (mutable a = 0; a < arcs; a++)
          {
            def output = if (output_matrix[p, t, a] != null) 1 else 0; 
            def input = if (input_matrix[p, t, a] != null) 1 else 0; 
            incidence_matrix[p, t, a] = output - input;
          }
      //}
    }
    
    public this(name : string, places : list[CpnTree.Place], tran : list[CpnTree.Transition], arcs : list[CpnTree.Arc], decls : list[CpnDecl])
    {
      this.name = name;
      tree_places = places;
      tree_tran = tran;
      tree_arcs = arcs;
      tree_decls = decls;
    }
    
    public Process() : void
    {
      mutable pidx : int = 0;
      mutable tidx : int = 0;
      
      def create_place(p)
      {
        | CpnTree.Place(n, id, t, i) =>
        def col = colour_sets[t];
        def expr = i |> converter.ParseML;
        def place = Place(pidx, id, n, col, expr, p, this);
        pidx += 1;
        place
      }
      
      def create_tran(t)
      {
        | CpnTree.Transition(n, id, g, t) =>
        
            def guard = g.MapDefault(converter.ParseML, <[]>);
            def time  = t.MapDefault(converter.ParseML, <[]>);
            def tran = Transition(tidx, id, n, guard, time, null, 0, this);
            tidx += 1;
            tran
      }
      
      def create_arcs(a)
      {
        | CpnTree.Arc(t, from, to, p2t) => 
            def expr = converter.ParseML(t);
            def placeend = end => places.First(x => x.id == end) |> ArcSource.PlaceEnd;
            def transend = end => transitions.First(x => x.id == end) |> ArcSource.TransitionEnd;
            def (f, t) = if (p2t) (placeend, transend) else (transend, placeend);
            def from = from |> f;
            def to =   to   |> t;
            Arc(expr, from, to)
      }
      
      def (color, decls) = tree_decls.PartitionType();
      foreach (d : CpnDecl.ColorSet in color)
      {
        colour_sets[d.name] = ColourSet(d.name, d.type)
      }
      
      foreach (d in decls)
      {
        | CpnDecl.Var(i, c) => vars[i] = colour_sets[c]
        | ML(str)           => def expr = converter.ParseML(str);
                               ml_decls ::= expr
        | _                 => ()
      }
      
      places      = tree_places.MapToArray(create_place);
      transitions = tree_tran.MapToArray(create_tran);
      arcs        = tree_arcs.MapToArray(create_arcs);
      BuildMatrix();
      foreach (Arc(_, f, t) as a in arcs with i)
      {
        match (f, t)
        {
          | (ArcSource.PlaceEnd(p), ArcSource.TransitionEnd(t)) =>
              output_matrix[p.idx, t.idx, i] = a;
          | (ArcSource.TransitionEnd(t), ArcSource.PlaceEnd(p)) =>
              input_matrix[p.idx, t.idx, i] = a;
          | _ => ()
        }
      }
      BuildMatrix();
    }
    
    
  }
}
