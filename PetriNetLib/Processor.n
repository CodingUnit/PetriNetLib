using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Macro;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.Immutable;
using CommonLib.Macros;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;

namespace PetriNetLib
{
  
  /*
  todo:
    - fifo places
    - sorted tokens places
  */
  
  
  
  public class PetriNetCompiler
  {
    mutable gen : Generator;
    mutable proc : PetriNetProcessor;
    
    [FlagAccessor(
                  Debug
                )]
    public Flags : PetriNetFlags;
    
    public PhaseTwo() : void
    {
      gen.PhaseTwo()
    }
    
    public Process(ty : TypeBuilder, typer : Typer, file : string, page : string) : void
    {
      def parser = Parser(page);
      parser.Parse(file);
      def file = System.IO.Path.GetFileNameWithoutExtension(file);
      proc = PetriNetProcessor(file, typer, ty, parser.Places, parser.Transitions, parser.Arcs, parser.Decls);
      proc.Process();
      gen = Generator(proc.OutModel, proc);
      gen.PhaseOne();
      ty.UserData["PetriNetGen"] = this;
    }
    
    public MainGen() : void
    {
      gen = Generator(proc.OutModel, proc);
      gen.Generate();
    }
  }
  
  class PetriNetProcessor
  {
    mutable places      : array[Place];
    mutable transitions : array[Transition];
    mutable arcs        : array[Arc];
    public  glob_refs   : Hashtable[string, PExpr]     = Hashtable();
    public  vars        : Hashtable[string, ColourSet] = Hashtable();
    public  colour_sets : Hashtable[string, ColourSet] = Hashtable();
    [Accessor]
    mutable ml_decls    : list[PExpr];
    name : string;
    tree_places : list[CpnTree.Place];
    tree_tran   : list[CpnTree.Transition];
    tree_arcs   : list[CpnTree.Arc];
    tree_decls  : list[CpnDecl];
    [Accessor]
    typer : Typer;
    [Accessor]
    typebuilder : TypeBuilder;
    
    public OutModel : OutModel
    {
      [Memoize]
      get
      {
        OutModel(places, transitions, arcs, vars, glob_refs, colour_sets, ml_decls)
      }
    }
    
    mutable matrix_len         : array[int];
    mutable input_matrix       : array[2, Arc];//List[List[List[Arc]]];
    mutable output_matrix      : array[2, Arc];
    mutable incidence_matrix   : array[2, int];
    colours            : list[Colour] = [];
    [Accessor]
    converter          : Converter = Converter();
    
    public InputTransitionArcs(tran : Transition) : list[Place * Arc]
    {
      places.MapIndex((p, i) => (p, output_matrix[i, tran.idx])).Filter((_, a) => a != null)
    }
    
    public OutputTransitionArcs(tran : Transition) : list[Place * Arc]
    {
      places.MapIndex((p, i) => (p, input_matrix[i, tran.idx])).Filter((_, a) => a != null)
    }
    
    public InputPlaceArcs(place : Place) : list[Transition * Arc]
    {
      transitions.MapIndex((p, i) => (p, output_matrix[place.idx, i])).Filter((_, a) => a != null)
    }
    
    public OutputPlaceArcs(place : Place) : list[Transition * Arc]
    {
      transitions.MapIndex((p, i) => (p, input_matrix[place.idx, i])).Filter((_, a) => a != null)
    }
    
    public InputArcs() : IEnumerable[Place * Transition * Arc]
    {
      foreach (_ in places with p)
      {
        foreach (_ in transitions with t)
        {
          def arc = input_matrix[p, t];
          if (arc != null) 
            yield (places[p], transitions[t], arc) 
          else ()
        }
      }
    }

    public OutputArcs() : IEnumerable[Place * Transition * Arc]
    {
      foreach (_ in places with p)
      {
        foreach (_ in transitions with t)
        {
          def arc = output_matrix[p, t];
          when (arc != null)
            yield (places[p], transitions[t], arc)
        }
      }
    }
    
    BuildMatrix() : void
    {
      def places = places.Length;
      def tran   = transitions.Length;
      
      
      when (matrix_len == null || matrix_len[0] != places || matrix_len[1] != tran)
      {
        input_matrix     = array(places, tran);
        output_matrix    = array(places, tran);
        incidence_matrix = array(places, tran);
      }
      
      matrix_len = array[places, tran];
    }
    
    public this(name : string, ty : Typer, typebuilder : TypeBuilder, places : list[CpnTree.Place], tran : list[CpnTree.Transition], arcs : list[CpnTree.Arc], decls : list[CpnDecl])
    {
      this.name = name;
      tree_places = places;
      tree_tran = tran;
      tree_arcs = arcs;
      tree_decls = decls;
      typer = ty;
      this.typebuilder = typebuilder;
    }
    
    public Process() : void
    {
      mutable pidx : int = 0;
      mutable tidx : int = 0;
      
      def create_place(p)
      {
        | CpnTree.Place(n, id, t, i) =>
            def col = colour_sets[t];
            def expr = i |> converter.ParseML;
            def place = Place(pidx, id, n, col, expr, p, this);
            pidx += 1;
            place
      }
      
      def create_tran(t)
      {
        | CpnTree.Transition(n, id, g, t, c) =>
        
            def guard = g.MapDefault(x => converter.ParseML(x.Trim('[', ']')), <[]>);
            def time  = t.MapDefault(converter.ParseML, <[]>);
            def code  = c.MapDefault(converter.ParseML, <[]>);
            def tran = Transition(tidx, id, n, guard, time, code, 0, this);
            tidx += 1;
            tran
      }
      
      def create_arcs(a)
      {
        | CpnTree.Arc(t, from, to, p2t) => 
            def expr = converter.ParseML(t);
            def placeend = end => places.First(x => x.id == end) |> ArcSource.PlaceEnd;
            def transend = end => transitions.First(x => x.id == end) |> ArcSource.TransitionEnd;
            def (f, t) = if (p2t) (placeend, transend) else (transend, placeend);
            def from = from |> f;
            def to =   to   |> t;
            Arc(expr, from, to)
      }
      
      def (color, decls) = tree_decls.PartitionType();
      foreach (d : CpnDecl.ColorSet in color)
      {
        colour_sets[d.name] = ColourSet(d.name, d.type)
      }
      
      foreach (d in decls)
      {
        | CpnDecl.Var(i, c) => vars[i] = colour_sets[c]
        | GlobRef(i, v)     => def expr = converter.ParseML(v);
                               glob_refs[i] = expr
        | ML(str)           => def expr = converter.ParseML(str);
                               ml_decls ::= expr
        | _                 => ()
      }
      
      places      = tree_places.MapToArray(create_place);
      transitions = tree_tran.MapToArray(create_tran);
      arcs        = tree_arcs.MapToArray(create_arcs);
      BuildMatrix();
      foreach (Arc(_, f, t) as a in arcs with i)
      {
        match (f, t)
        {
          | (ArcSource.PlaceEnd(p), ArcSource.TransitionEnd(t)) => output_matrix[p.idx, t.idx] = a;
          | (ArcSource.TransitionEnd(t), ArcSource.PlaceEnd(p)) => input_matrix[p.idx, t.idx] = a;
          | _                                                   => ()
        }
      }
      //BuildMatrix();
    }
    
    
  }
}
