using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;
using CommonLib.Macros;

namespace PetriNetLib
{

  enum TDestCont
  {
    | MultiSet
    | RandomEnumerable
    | TokenQueue
    | SortedSet
    | TimedSimpleMultiset
  }

  [Record]
  //[Lens]
  class Place
  {
    public idx    : int;
    public id     : string;
    public name   : string;
    public colour : ColourSet;

    public init_mark : PExpr;
    public tree      : CpnTree.Place;
    public net       : PetriNetProcessor;

    public IsIndexedContainer : bool
    {
      [Memoize]
      get
      {
        true
        //match (DestContainerType)
        //{
        //  | TDestCont.RandomEnumerable
        //  | TDestCont.MultiSet          => true
        //  | _                           => false
        //}
      }
    }
    
    public DestContainerType : TDestCont
    {
      [Memoize]
      get
      {
        match (colour.type)
        {
          | Colour.Sorted => TDestCont.SortedSet
          | Timed         => TDestCont.TimedSimpleMultiset
          | Queue         => TDestCont.TokenQueue
          | _             => def tran = OutputTransitions;
                             def one = tran.Select((_, x) => x.NumberTokensGet).All(_ == 1);
                             if (one) TDestCont.RandomEnumerable else TDestCont.MultiSet

        }
      }
    }

    public Name : string
    {
      [Memoize]
      get
      {
        match (name.LastIndexOf("]"))
        {
          | -1 => name
          | n  => name.Substring(n + 1)
        }
      }
    }

    public Attributes : list[string]
    {
      [Memoize]
      get
      {
        def loop(name, res)
        {
          def start_idx = name.IndexOf("]");
          if (start_idx != -1)
          {
            def idx = name.IndexOf("]");
            def attr = name.Substring(start_idx, idx - start_idx);
            loop(name.Substring(idx + 1), attr :: res)
          } else res
        }

        loop(name, [])
      }
    }

    public IsTimed : bool
    {
      [Memoize]
      get
      {
        colour is ColourSet(_, Timed)
      }
    }

    public OutputTransitions : list[Transition * Arc]
    {
      [Memoize]
      get
      {
        net.OutputPlaceArcs(this)
      }
    }

    public InputTransitions : list[Transition * Arc]
    {
      [Memoize]
      get
      {
        net.InputPlaceArcs(this)
      }
    }

    public override GetHashCode() : int
    {
      idx
    }
  }

  //[Record]
  //class TokenSet
  //{
  //  public num   : int;
  //  public token : Token;
  //}

  [Record]
  [Lens]
  class Transition
  { 
    public idx : int;
    public id  : string;
    public name : string;
    public guard : PExpr;

    public time_expr : PExpr;
    public code_segment : PExpr;
    public priority : int;
    public net : PetriNetProcessor;

    public IsTimed : bool
    {
      [Memoize]
      get
      {
        InputPlaces.Exists((x, _) => x.IsTimed)
        //colour is ColourSet(_, Timed)
      }
    }

    public IsImmediate : bool
    {
      [Memoize]
      get
      {
        IsUnnamed || guard is <[ immediate ]>
      }
    }

    public OutputPlaces : list[Place * Arc]
    {
      [Memoize]
      get
      {
        net.OutputTransitionArcs(this)
      }
    }

    public InputPlaces : list[Place * Arc]
    {
      [Memoize]
      get
      {
        net.InputTransitionArcs(this)
      }
    }

    public IsUnnamed : bool
    {
      [Memoize]
      get
      {
        name == null || name.IsEmpty()
      }
    }

    static mutable unnamed_idx : int;

    public Name : string
    {
      [Memoize]
      get
      {
        if (IsUnnamed)
        {
          def idx = unnamed_idx;
          unnamed_idx++;
          $"UnnamedTransition$idx"
        } else
        {
          name
        }
      }
    }

    public override GetHashCode() : int
    {
      idx
    }
  }

  [Record]
  variant ArcSource
  {
    | PlaceEnd      {place : Place}
    | TransitionEnd {tran  : Transition}
  }


  [Record]
  [Lens]
  class Arc
  { 
    public expr : PExpr;

    public from : ArcSource;
    public to   : ArcSource;

    public NumberTokensGet : int
    {
      [Memoize]
      get
      {
        match (expr)
        {
          | <[ $(n : int) ` $_ ]>     => n
          | <[ $(_ : usesite)]>       => 1
          | _                         => -1
        }
      }
    }
  }

  [Record]
  class ColourSet
  {
    public name : string;
    public type : Colour;
  }

  variant ExecError
  {
    | TokenConstantNotFound { place : Place; val : object }
    | VarNotFound {name : string}
    | TypeTokenNotCompat {incol : Colour; outcol : Colour;place : Place}
  }

  [Flags]
  public enum PetriNetFlags
  {
    | Debug = 1
  }
}
