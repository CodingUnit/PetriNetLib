using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetLib
{
    [Record]
    class InArcBinding
    {
      public place      : Place;
      
      public transition : Transition;
      public Depends     : list[InArcBinding] {get;set;}
      //public NeedBinding : bool {get;set;}
      
      public priority : int
      {
        [Memoize]
        get
        {
          if (Depends == null || Depends.IsEmpty()) 0 else Depends.Max(_.priority)
        }
      }
      
      public name       : string
      {
        [Memoize]
        get
        {
          place.name
        }
      }
    
      public expr       : PExpr;
      
      public bind_var : string
      {
        [Memoize]
        get
        {
          match (expr)
          {
            | <[ $(n : usesite) ]> => n
            | _                    => null
          }
        }
      }
      
      //public before_bind_expr  : PExpr
      //{
      //  [Memoize]
      //  get
      //  {
      //    match (expr)
      //    {
      //      | <[ $(_ : usesite)(..$_) ]> => <[ def $(introduced_var : name) = $expr ]>
      //      | _                          => <[]>
      //    }
      //  }
      //}
      
      public source_token : PExpr
      {
        get
        {
          if (place.IsTimed)
          {
            def name = $"$(name)_tok";
            <[ $(name : usesite) ]>
          } else
          //if (place.IsIndexedContainer)
          //{
            //<[ $(name : usesite).PeekIndexed() ]>
          //} else 
          <[ $(name : usesite).Peek() ]>
        }
      }
      
      public timed_bind_expr : PExpr
      {
        get
        {
          if (place.IsTimed)
          {
            def name = $"$(name)_tok";
            //if (place.IsIndexedContainer) 
              //<[ def ($(name : usesite), $($"$(name)_idx" : usesite)) = $source_token ]> else
              <[ def $(name : usesite) = $source_token ]>
          } else
          {
            <[]>
          }
        }
      }
      
      public bind_expr  : PExpr
      {
        [Memoize]
        get
        {
          
          //if (NeedBinding)
          //{
            match (expr)
            {
              | <[ $(n : usesite)]> => if (place.IsIndexedContainer) 
                                       <[ def ($expr, $($"$(n)_idx" : usesite)) = $source_token ]> else
                                       <[ def $expr = $(name : usesite).Peek() ]>
              | _                   => <[]>
            }
          //} else
          //{
             <[]>
          //}
        }
      }
      
      //public introduced_var : Name
      //{
      //  [Memoize]
      //  get
      //  {
      //    match (expr)
      //    {
      //      | <[ $(n : usesite)(..$_) ]> => Macros.NewSymbol(n.Substring(0, 2));
      //      | _                          => null
      //    }
      //  }
      //}
      
      public check_expr : PExpr
      {
        [Memoize]
        get
        {
          match (expr)
          {
            | <[ $(_ : usesite)]> => <[ $(name : usesite).HaveTokens]>
            //| <[ $(_ : usesite)(..$_) ]> =>//when introduced_var != null => 
                //<[ $(name : usesite).Have($(introduced_var : name)) ]>
            | _                   => def tok = Generator.GetTokenExpr(expr);
                                     <[ $(name : usesite).Have($tok) ]>
          }
          
        }
      }
      
      public extract_expr   : PExpr
      {
        [Memoize]
        get
        {
          //if (NeedBinding)
          //{
            if (place.IsTimed)
            match (expr)
            {
              | <[ $(n : usesite)]> => //if (place.IsIndexedContainer) 
                                       //<[ $(name : usesite).GetIndexed($($"$(n)_idx" : usesite))]> else 
                                       <[ $(name : usesite).Get($expr)]>
              | _                   => <[]>
            } else
            match (expr)
            {
              | <[ $(n : usesite)]> => if (place.IsIndexedContainer) 
                                       <[ $(name : usesite).GetIndexed($($"$(n)_idx" : usesite))]> else 
                                       <[ $(name : usesite).Get($expr)]>
              | _                   => <[ $(name : usesite).Get($expr)]>
              //| _                      
            }
         }
          //} else
          //{
          //  match (expr)
          //  {
          //    | <[ $(_ : usesite)]>        => <[ def $expr = $(name : usesite).Get()]>
          //    | <[ $(_ : usesite)(..$_) ]> 
          //      when introduced_var != null  
          //                                 => <[ $(name : usesite).Get($(introduced_var : name)) ]>
          //    | _                          => <[ $(name : usesite).Get() ]>
          //  }
          //}
      }
      
    }
}
