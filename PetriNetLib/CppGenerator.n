using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetLib
{
  /// <summary>
  /// Description of CppGenerator.
  /// </summary>
  class CppGenerator : ILangGenerator
  {
    model : GenModel;
    //colours  : Hashtable[string, CppColour] = Hashtable();
        
    //public this(mod : GenModel)
    //{
    //  model = mod;
    //}
    
    //public Construct(mod : GenModel) : CppGenerator
    //{
    //  CppGenerator(mod)
    //}
    
    extern_fields  : List[string] = List();
    private_fields : List[string] = List();
    public_fields  : List[string] = List();
    
    net_name : string
    {
      get
      {
        model.name
      }
    }
    
    PlaceToText(pl : GClassDecl) : string
    {
      null
    }
    
    text_colours : list[string]
    {
      get
      {
        []
      }
    }
    
    text_places : list[string]
    {
      get
      {
        []
      }
    }
    
    Result : string    
    {
      get
      {
        <#
        class $net_name
        {
          ..$(text_colours;"\n")
          ..$(text_places;"\n")
          public:
            
            void transition()
            {
              ..$(transitions;"\n")
            }
        };
        #>
      }
    }
    
    IsTimed : bool
    {
      [Memoize]
      get
      {
        model.options.Exists(x => x is PetriNetOptions.Timed)
      }
    }
    
    Name : string
    {
      get
      {
        model.name
      }
    }
    
    ConvType(exp : PExpr) : string
    {
      ""
    }
    
    ConvParm(exp : PParameter) : string
    {
      ""
    }
    
    ConvBody(exp : list[PExpr]) : string
    {
      ""
    }
    
    ConvMember(mem : ClassMember) : string
    {
      ""
    }
    
    CreateAuxProduct(n : string, types : list[PExpr]) : string
    { 
      def fnames = types.MapI((i, t) => ($"field$(i + 1)", GetType(t)));
      //def ctor = fnames.Map(ConvParm);
      //def ftypes = fields.Map((n, t) => (n, model.colours[t].LangType));
      def ctor = fnames.Map((n, t) => $"$(ParmType(t)) $n");
      def fields = fnames.Map((n, t) => $"$t $n;");
      
      def ctorbody = fnames.Map((f, _) => $"this->$f = $f;");
      //def num = vals.Length;
      def assign = fnames.Map((x, _) => $"$x = tup.$x;");
      def types = fnames.Map((_, t) => t);
      //def add_buf_fields = fnames.Map((n, t) => (n, colours[t].DestType));
      //def bytes = get_bytes_func(fnames);
      def str = $<#struct $n
            {
              $n() {}
              $n(..$(ctor;", ")) 
              {
                ..$(ctorbody;"\n")
              }

              $n(const tuple$num<..$types> &tup)
              {
                ..$(assign;"\n")
              }

              ..$(fields;"\n")

              /*bytesn get_bytes() const
              {
                $bytes
                //return bytes_ptr(&field1, sizeof($n));
              }*/

              /*void operator=(const tuple$num<..$types> &tup)
              {
                ..$(assign;"\n")
              }*/
            };#>;
        str
    }
    
    GetType(ty : PExpr) : string
    {
      | <[ sbyte]>   => "s8"
      | <[ byte ]>   => "u8"
      | <[ short ]>  => "s16"
      | <[ int ]>    => "int"
      | <[ uint ]>   => "u32"
      | <[ ushort]>  => "u16"
      | <[ intinf ]> => "u64"
    }
    
    ParmType(ty : string) : string
    {
      | "sbyte"  => "s8"
      | "byte "  => "u8"
      | "short"  => "s16"
      | "int"    => "int"
      | "uint"   => "u32"
      | "ushort" => "u16"
      | "intinf" => "u64"
    }
    
    public Define(type : ClassMember.TypeDeclaration) : void
    {
      def str = match (type)
      {
        | <[decl: class $(name : usesite)
             {
               ..$fields
             }]> => 
             
             def fields = fields.Map(ConvMember);
             $<#struct $name
             {
               ..$(fields; "\n")
             }#>
      | ClassMember.TypeDeclaration(TopDeclaration.Alias(FullName = n, ty = ty)) => 
         match (ty)
         {
           | <[ (..$lst)]>          => CreateAuxProduct(n, lst)
           | <[ $(name : usesite)]> => $<#typedef $n $name;#>
         }
         
       }
       private_fields.Add(str)
    }
    
    
    public Define(meth : ClassMember.Function, readonly : bool) : void
    {
      match (meth)
      {
       | <[decl: $(name : usesite)(..$parms) : $ty {..$body}]> as m => 
           def pub = m.Attributes.HasFlag(NemerleModifiers.Public);
           def ty = ConvType(ty);
           def parms = parms.Map(ConvParm);
           def const = if (readonly) " const" else "";
           def body = ConvBody(body);
           def str = $<#$ty $name(..$(parms;", "))$const
                        {
                          $body
                        }
                       #>;
           
           if (pub) public_fields.Add(str) else private_fields.Add(str)
         
       }
    }
    
    public GenerateUsings() : void
    {
      if (IsTimed)
      {
        extern_fields.Add(<##include "timed_petrinet.h"#>)
      } else
      {
        extern_fields.Add(<#include "petrinet.h"#>);
      }
      extern_fields.Add(<#using namespace petrinet_lib;#>);
      private_fields.Add($"typedef u32 ($Name::*tran_func_type)();");
    }
    
    //public ColourToType(col : Gen)
    public Generate() : void
    {
      //  // создаем типы генерации из цветов
      //foreach (c in model.colours)
      //{
      //  colours.Add(c.Key, c.Value |> GenColour(_, this))
      //}

      //def places_enum = CreatePlaces();
      //Define(places_enum);
      //def sets = colours.Values.OrderBy(x => x.Colour.pos).Map(x => CreateColourSet(x)).Filter(_ != null).Select(_ + "\n");
      //Define(sets, true, true);//typebuilder.DefineNestedTypeWithSource(m).Compile();
      //def places = places.Map(CreatePlace).Filter(_ != null);      




      //CreateEvents();
      //CreateStartMethod();


      //Define(places + ["\n"])//_ = typebuilder.DefineWithSource(m);
//CreateDummyMethod();
      //CreateMainDefs();

      //CreateTransitions();      
      ////def methods = CreateGroupTransitions();
      //def private_methods = EnumTransitions.Where(x => !x.IsPartOfFuncPlace && !x.PartOfGroup.HasValue).MapToList(CreateTran);
      //def methods = places.Where(x => x.IsFuncPlace).MapToList(CreateFuncPlace);
      //def req_methods = places.Where(x => x.Req).Map(CreateReqPlace);
      //def vals = model.ml_decls.Map(CreateVals).Filter(_ != null);
      //Define(vals + ["\n"]);//_ = typebuilder.DefineWithSource(m);
      //def decls = funcs.Map(CreateDecl).Filter(_ != null);
      //def (ext, decls) = decls.Partition(x => x.StartsWith("function"));
      //def in_ports = places.Where(x => x.port is Some(PortType.In) && !x.Req).MapToList(CreateInPortPlace);
      //def out_ports = places.Where(x => x.port is Some(PortType.Out) || x.port is Some(PortType.InOut)).MapToList(CreateOutPlace);
      //def globrefs = model.glob_refs.KeyValuePairs.MapToList(CreateGlobRef);
      //CreateCons();
      //Define(globrefs);//_ = typebuilder.DefineWithSource(m);
      //Define(methods + req_methods, true);
      //Define(private_methods);
      //Define(decls);
      //when (model.IsTimed) CreateTimeMethods();
      //Define(ext, true);
      //Define("\n" :: in_ports + out_ports, true);
      //System.IO.File.WriteAllText(file, main_class)      
    }
  }
}
