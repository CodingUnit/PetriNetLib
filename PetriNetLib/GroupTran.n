using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;

namespace PetriNetLib
{
  /// <summary>
  /// Description of GroupTran.
  /// </summary>
  public class GroupTran : GenTran
  {
    public grouped : list[GenTran];
    public gen : Generator;
    
    public this(grouped : list[GenTran], generator : Generator)
    {
      base(null, generator);
      this.gen = generator;
      this.grouped = grouped;
    }
    
    public override Priority : int
    {
      [Memoize]
      get
      {
        grouped.Max(_.priority)
      }
    }
    
    public override IsTimed : bool
    {
      get
      {
        false
      }
    }
    
    public override CompleteTran : bool
    {
      [Memoize]
      get
      {
        true
      }
    }
    
    public override ExecName : string
    {
      get
      {
        Name
      }
    }
 
    public override GroupBindMode : bool
    {
      [Memoize]
      get
      {
        def sorted = grouped.OrderByDescending(x => x.priority).NToList();
        def in_arc_bind = sorted.Map(x => x.InArcProcess);
        
        def expr_eq(x, y)
        {
          def e1 = x.OrderBy(x => x.place.idx);
          def e2 = y.OrderBy(x => x.place.idx);
          
          def equal(x, y)
          {
            | (null, null)
            | (<[1 ` ()]>, <[ ()]>)
            | (<[()]>, <[ 1 ` ()]>)
            | (<[1 ` ()]>, <[ 1 ` ()]>)
            | (<[]>, <[]>)
            | (<[ () ]>, <[ () ]>)                        => true
            | (<[ $(n : usesite)]>, <[ $(n2 : usesite)]>) => n == n2
            | (<[ (..$t1)]>, <[ (..$t2)]>)                => t1.ElementsEqual(t2, equal)
            | _                                           => false
          }
          
          if (x.Length != y.Length) false else
          e1.ElementsEqual(e2, (x, y) => equal(x.expr, y.expr))
        }
        
        
        //x.InArcProcess.OrderBy(x => x.place.idx).Select(x => x.bind_expr)
        in_arc_bind.ElementsEqual(expr_eq);
      }
    }
    
    public override PartOfGroup : option[GroupTran]
    {
      get
      {
        None()
      }
    }
    
    //public override Body : string
    //{
    //  [Memoize]
    //  get
    //  {
    //    def body = gen.CreateGroupTranBody(this);
        
    //    //def body = gen.CreateTranBody(this);
          
    //      ////def body = TranBody;
    //        def places = PlacesParticipateMask;
    //        def tr_next = NextTransitions;
    //        def tr = if (PartOfGroup is Some(g)) $"tr_GroupTransition$g" else $"tr_$(ExecName)";
    //        if (tr_next.IsEmpty())
    //        $<#bool res = false;
    //              if (lock($places, $tr))
    //              {
    //                $body;
    //                unlock($places);
    //              }
    //              return res;#> else 
    //        $<#bool res = false;
    //              if (lock($places, $tr))
    //              {
    //                $body;
    //                unlock($places);
    //                if (res)
    //                {
    //                  ..$(tr_next; "\n")
    //                }
    //              }
    //              return res;#>
    //  }
    //}
    
    public override InputGenPlaces : list[GenPlace]
    {
      [Memoize]
      get
      {
        grouped.SelectMany(x => x.InputGenPlaces).Distinct().NToList()
      }
    }
    
    public override OutputGenPlaces : list[GenPlace]
    {
      [Memoize]
      get
      {
        grouped.SelectMany(x => x.OutputGenPlaces).Distinct().NToList()
      }
    }
    public override Name : string
    {
      [Memoize]
      get
      {
        //def sorted = tran.OrderByDescending((x, _) => x.priority);
        def name = grouped.Map(_.UnnamedIdx);
        def name = name.Fold("", (x, a) => $"$x$a");
        $"GroupTransition$name"
      }
    }
  }
}
