using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;
using PetriNetModel;

namespace PetriNetLib
{
  [Record]
  class InArcBindingCpp
  {
    public place      : GenPlaceCpp;

    public gen : CppGenerator;
    public transition : GenTranCpp;
    public Depends     : list[InArcBindingCpp] {get;set;}
      //public NeedBinding : bool {get;set;}

    public IsCopyVar : bool
    {
      [Memoize]
      get
      {
        transition.IsCopyVar(place, arc)
      }
    }
    
    //public IsCopyVarIO : bool
    //{
    //  [Memoize]
    //  get
    //  {
    //    transition.IsCopyVarInOut(place, arc)
    //  }
    //}
    
    public priority : int
    {
      [Memoize]
      get
      {
        if (Depends == null || Depends.IsEmpty()) 0 else Depends.Max(_.priority) + 1
      }
    }

    public name       : string
    {
      [Memoize]
      get
      {
        place.Name
      }
    }

    public arc        : Arc;
    
    public arc_kind   : ArcKind
    {
      [Memoize]
      get
      {
        arc.kind
      }
    }
    
    public expr       : PExpr
    {
      [Memoize]
      get
      {
        arc.expr
      }
    }

    public bind_var : string
    {
      [Memoize]
      get
      {
        match (expr)
        {
          | <[ $(n : usesite) ]> => n
          | _                    => null
        }
      }
    }

    public TokenType : string
    {
      [Memoize]
      get
      {
        def gc = place.Colour;
        gc.DestType
      }
    }
    
    public source_token_peek(n : string) : string
    {
      if (place.IsIndexedContainer)
        $<#$name.peek_indexed($n)#> else
      {
        def ty = place.Colour.DestType;
        match (place.DestContainerType)
        {
          | ZeroSingle // имеет 0 или 1 фишку, для отсутствия используется 0 если INT
          | MinusSingle
          | Var    // имеет 1 фишку, аналогично обычному полю
          | Single       => $<#$name#>// имеет 0 или 1 фишку, для отсутствия использует отдельный флаг
          | ReqContainer => $<#$name.exec_ret<$ty>()#>
          | _            => $<#*($ty *)$name.peek()#>    // значение запрашивается из внешней функции
        }
        
      }
    }

    source_token_name : string
    {
      [Memoize]
      get
      {
        $"$(name)_tok"
      }
    }
    
    public timed_bind_expr : string
    {
      [Memoize]
      get
      {
        if (place.IsTimed)
        {
          match (expr)
          {
            | <[ $(n : usesite) ]> => def ty = TokenType;
                                      if (place.IsIndexedContainer) 
                                      {
                                          $<#int $(idx_name(n));
                                          $ty $source_token_name = $(source_token_peek(n));#>
                                      } else
                                      {
                                        match (place.DestContainerType)
                                        {
                                          | TDestCont.TimedSimpleMultiset => $<#$ty $source_token_name = $(source_token_peek(n));#>
                                          | _                             => ""
                                        }
                                          
                                      }
            | _                     => ""
          }
          
        } else
        {
          ""
        }
      }
    }

    idx_name(name : string) : string
    {
      $"$(name)_idx"
    }
    
    NextFuncTran : bool
    {
      [Memoize]
      get
      {
        transition.OutputGenPlaces.SelectMany(x => x.OutputGenTransitions).Exists(x => x.IsFuncTran)
      }
    }
    
    NextFuncTranArcProcess : option[OutArcProcessCpp]
    {
      [Memoize]
      get
      {
        if (NextFuncTran)
        transition.OutputGenPlaces.SelectMany(x => x.OutputGenTransitions).Where(x => x.IsFuncTran).SelectMany(x => x.OutArcProcess).First() |> Some else None() 
      }
    }
    
    NextFuncTranArcVar : string
    {
      [Memoize]
      get
      {
        if (NextFuncTranArcProcess is Some(tran))
        {
          
          def proc = tran.transition.InArcProcess.First();
          $"res_$(proc.bind_var)"
        } else ""
      }
    }
    
    public pre_bind_expr : string
    {
      [Memoize]
      get
      {
        if (NextFuncTranArcProcess is Some(tran))
        {
          
          def ty = tran.place.Colour.VarSpecCopy;
          $<#$(ty)$NextFuncTranArcVar;
          #>
        } else ""
      }
    }
    
    public bind_expr  : string
    {
      [Memoize]
      get
      {
        if (place.IsFuncPlace || transition.IsFuncTran) "" else
        if (place.IsTimed)
        {
          def time_expr = if (timed_bind_expr.IsEmpty()) "" else $"$timed_bind_expr;";
          def bind_expr = match (expr)
          {
            
            | <[ $(n : usesite) ]> => 
                def ty = gen.TypeOfVar(n);
                if (place.DestContainerType == TDestCont.TimedSimpleMultiset)
                {
                  $<#$ty $expr = $source_token_name;#>
                } else 
                {
                  if (IsCopyVar)
                  {
                    ""
                  } else
                  $<#$ty$n = $(source_token_peek("")); #>;
                }
            | _                    => ""
          }
          $<#$time_expr$bind_expr#>
        } else
        match (expr)
        {
//          | <[ () ]>             => <[]>
          | <[ (..$e) ]>         => def bind_tuple_elem(x, i)
                                    {
                                      match (x)
                                      {
                                        | <[ $(n : usesite) ]> =>
                                            def ty = gen.TypeOfVar(n);
                                            $"$ty$x = $(name).field$(i + 1);"
                                        | _ => throw InvalidOperationException()
                                      }
                                    }
                                    
                                    def bind = e.Select(bind_tuple_elem);
                                    $<#..$(bind;"\n")#>
          | <[ $(n : usesite) ]> when !IsCopyVar => 
                                    def col = gen.ColourOfVar(n);
                                    def ty = col.VarSpec;
                                    if (place.IsIndexedContainer) 
                                    {
                                      def idx = idx_name(n);
                                      $<# int $idx;
                                          $ty$n = $(source_token_peek(idx));#>
                                    } else
                                    if (NextFuncTranArcProcess is Some(tran))
                                    {
                                      def copy = if (tran.place.Colour.IsComplexType) $"$NextFuncTranArcVar = &$n;" else $"$NextFuncTranArcVar = $n;";
                                      $<#$ty$n = $(source_token_peek(""));
                                      $copy
                                      #>
                                    } else
                                        $<#$ty$n = $(source_token_peek("")); #>
          | _                    => ""
        }
      }
    }

    unfold(e : PExpr) : string
    {
      | <[ () ]> => <#unit.instance()#>
      | e        => e |> gen.ConvExpr(_, false)
    }
        
    public IsInhibitor : bool
    {
      [Memoize]
      get
      {
        arc_kind == ArcKind.Inhibitor
      }
    }
    
    public check_expr : string
    {
      [Memoize]
      get
      {
        def check_func(e)
        {
          | <[ 1 ` $expr]>      => expr |> check_func
          | <[ () ]>            => $<#$name.have_tokens()#>
          | <[ $e %@+ $time]>   => $<#$name.have_relative_time($(unfold(e)), $time)#>
          | <[ $(_ : usesite)]> => $<#$name.have_tokens()#>
          | _                   => def tok = Generator.GetTokenExpr(expr);
                                   $<#$name.have($tok)#>
        }
        
        def cont_proc(other)
        {
          match (place.DestContainerType)
          {
            | Var 
            | ReqContainer => ""
            | Single when place.IsUnit => $<#$(name)#>
            | Single       => $<#$(name)_flag#>
            | ZeroSingle   => $<#$(name)#>
            | MinusSingle  => $<#$(name) != -1#>
            | _            => other()
          }
        }
        
        def cont_proc_inv(other)
        {
          match (place.DestContainerType)
          {
            | Var 
            | ReqContainer => ""
            | Single when place.IsUnit => $<#!$(name)#>
            | Single       => $<#!$(name)_flag#>
            | ZeroSingle   => $<#!$(name)#>
            | MinusSingle  => $<#$(name) == -1#>
            | _            => other()
          }
        }
        
        if (place.IsFuncPlace || transition.IsFuncTran) "" else
        match (arc_kind)
        {
          | ArcKind.Normal    => cont_proc(_ => check_func(expr))
          | ArcKind.Inhibitor => cont_proc_inv(_ => $<#!$name.have_tokens()#>)
          | _                 => ""
        }
      }
    }
    
    public extract_expr   : string
    {
      [Memoize]
      get
      {
        def extract(e)
        {
            //| <[ $e %@+ $time ]>  => <[]>
          | <[ 1 ` $expr]>      => extract(expr)
          | <[ $e %@+ $time]>   => $<#$name.get_relative_time($(unfold(e)), $time);#>
          | <[ () ]>            => $<#$name.get();#>
          | <[ $(n : usesite)]> => if (place.IsIndexedContainer) 
                                    $<#$name.get_indexed($(idx_name(n)));#> else 
                                    $<#$name.get($expr);#>
          | _                   => $<#$name.get($expr);#>
        }
        
        def cont_proc(other)
        {
          match (place.DestContainerType)
          {
            | Var 
            | ReqContainer => ""
            | Single when place.IsUnit => $<#$(name) = 0;#>
            | Single       => $<#$(name)_flag = false;#>
            | ZeroSingle   => $<#$(name) = 0;#>
            | MinusSingle  => $<#$(name) = -1;#>
            | TokenQueue   => $<#$name.get();#>
            | _            => other()
          }
        }
        
        if (place.IsFuncPlace || transition.IsFuncTran) "" else
        match (arc_kind)
        {
         | ArcKind.Normal         => if (IsCopyVar) "" else cont_proc(_ => extract(expr))
         | ArcKind.Reset          => cont_proc(_ => $<#$name.get_all();#>)
         | _                      => ""
        }
      }
    }

  }
}
