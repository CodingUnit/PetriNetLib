using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;

namespace PetriNetLib
{
  public variant FunBodyKind
  {
  }
  
  public class GPlace
  {
  }
  
  [Record]
  public class LinearGPlace : GPlace
  {
    public Name : string;
    public Idx : int;
        
    public Decl : string * int
    {
      [Memoize]
      get
      {
        ($<#pl_$(Name)#>, 1 << Idx)
      }
    }
  }
  
  public class GTran
  {
    public name : string;
    
    public body : FuncBodyExpr;
  }
  
  
  [Record]
  public class GColour
  {
    gen : GenColour;
    
    public Name : string
    {
      get
      {
        gen.Name;
      }
    }
  }
  
  public variant GDecls
  {
    | EnumBitMask { vals : list[string * int]}  
  }
  
  public variant FuncBodyExpr
  {
    | Sequence { seq : list[FuncBodyExpr]}
    | Empty
    | Lock { places : list[GPlace]}
    | Unlock { places : list[GPlace]}
    | VarRef { name : string }
    | ImmutableVarDeclSimple { ty : PExpr; name : string; init : option[FuncBodyExpr]}
    | ImmutableVarDecl { ty : GColour; name : string; init : option[FuncBodyExpr]}
    | FuncExec { name : string }
    | GetTokensExpr { expr : PExpr}
    | PeekIndexed { name : string; arc_name : string; }
    | Peek { ty : GColour; name : string}
    | AddTokensExpr { expr : PExpr}
    | CombinedExpr  {expr : PExpr}
    | Action {name : string; parms : list[PExpr];}
    | CallTran {tran : GTran}
    | CallTranFunc {tran : GTran; parm : PExpr}
  }
  
  public class PetriNetFunc
  {
    ret_type : GenColour;
    
    name : string;
    
    kind : FunBodyKind;
    body : FuncBodyExpr;
  }
  
  /// <summary>
  /// Description of GenModel.
  /// </summary>
  [Record]
  public class GenModel
  {
    public places          : list[GPlace];
    public tran            : list[GTran];
    public colours         : list[GColour];
    public funcs           : list[PetriNetFunc];
    public add_place_funcs : list[PetriNetFunc];
  }
}
