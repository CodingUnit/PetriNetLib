using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;

namespace PetriNetLib
{
  public variant FunBodyKind
  {
  }
  
  [Record]
  public abstract class GPlace : GenNode
  {
    public Name : string;
    public Colour : GColour;
    public abstract Decl : GClassDecl {get;}
    public abstract VarDecl : GClassDecl {get;}
  }
  
  
  [Record]
  public class GTran : GenNode
  {
    public name : string;
    
    public virtual Decl : GClassDecl {get;}
    public body : FuncBodyExpr
    {
      get
      {
        null
      }
    }
  }
  
  [Record]
  public variant GClassDecl : GenNode
  {
    | None
    | EnumBitMask {name : string; val : int}
    | ColourField       { name : string; type : GColour; val : option[PExpr] }
  }
  
  [Record]
  public class GGlobRef : GenNode
  {
    public Name : string;
    public Val  : option[PExpr];
    public Type : GColour;
  }
  
  public class GenNode
  {
  }
  
  [Record]
  public class GColour : GenNode
  {
    //gen : GenColour;
    
    public Name : string;
  }
  
  public variant GDecls
  {
    | EnumBitMask { vals : list[string * int]}  
    | Field       { name : string; type : PExpr; value : option[PExpr]} 
  }

  public variant GInitValue
  {
    | Val {val : int}
    | Flag { val : bool}
    | Multiset
  }
  
  public variant GInitMarking
  {
    | Empty
    | Value { init_value : GInitValue;}
    
    place : GPlace;
  }
  
  public variant FuncBodyExpr
  {
    | Sequence { seq : list[FuncBodyExpr]}
    | Empty
    | Lock { places : list[GPlace]}
    | Unlock { places : list[GPlace]}
    | VarRef { name : string }
    | ImmutableVarDeclSimple { ty : PExpr; name : string; init : option[FuncBodyExpr]}
    | ImmutableVarDecl { ty : GColour; name : string; init : option[FuncBodyExpr]}
    | FuncExec { name : string }
    | GetTokensExpr { expr : PExpr}
    | PeekIndexed { name : string; arc_name : string; }
    | Peek { ty : GColour; name : string}
    | AddTokensExpr { expr : PExpr}
    | CombinedExpr  {expr : PExpr}
    | Action {name : string; parms : list[PExpr];}
    | CallTran {tran : GTran}
    | CallTranFunc {tran : GTran; parm : PExpr}
  }
  
  public class PetriNetFunc : GenNode
  {
    ret_type : GenColour;
    
    name : string;
    
    kind : FunBodyKind;
    body : FuncBodyExpr;
  }
  
  public interface INetComposer
  {
    Result : list[GenNode] {get;}
  }
  
  /// <summary>
  /// Description of GenModel.
  /// </summary>
  [Record]
  public class GenModel
  {
    public composer        : INetComposer;
    public places          : list[GPlace];
    public init_marking    : list[GInitMarking];
    public tran            : list[GTran];
    public glob_refs       : list[GGlobRef];
    public colours         : list[GColour];
    public funcs           : list[PetriNetFunc];
    public add_place_funcs : list[PetriNetFunc];
  }
}
