using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;

namespace PetriNetLib
{

  public enum TargetLangType
  {
    | Cpp
    | Csharp
    | Nemerle
    | NemerleMacro
  }

  public variant FunBodyKind
  {
  }

  variant TFieldKind
  {
    | Place {place : GenPlace}
  }
 
  variant TFuncKind
  {
    | Transition {tran : GenTran}
    | CommonTransition {tran : list[GenTran]}
    | Event { name : string }    
    | AddPlace { place : GenPlace}
  }
    
  [Record]
  variant GClassDecl : GenNode
  {
    | None
    | EnumBitMask {name : string; val : int}
    | Func { ret : LangType; name : string; parameters : list[GenColour]; body : FuncBodyExpr; kind : TFuncKind}
    //| ColourField       { name : string; type : GenColour; val : option[PExpr] }
    | Type { type : LangType}
    | Field { name : string; type : GenColour; val : option[PExpr]; kind : TFieldKind }
  }

  public class GlobRef
  {
  }
  
  [Record]
  public variant LangType
  {
    | Unit
    | Bool
    | Int32
    | UInt32
    | Int16
    | UInt16
    | Int64
    | UInt64
    | String
    | List {of_type : LangType}
    | Byte
    | SByte
    | Float
    | Double
  }

  public class GenNode
  {
  }



  //public variant GDecls
  //{
  //  | EnumBitMask { vals : list[string * int]}  
  //  | Field       { name : string; type : PExpr; value : option[PExpr]} 
  //}

  variant FuncBodyExpr
  {
    | Sequence { seq : list[FuncBodyExpr]}
    | Empty
    | Lock { places : list[GenPlace]}
    | Unlock { places : list[GenPlace]}
    | VarRef { name : string }
    | ImmutableVarDeclSimple { ty : PExpr; name : string; init : option[FuncBodyExpr]}
    | ImmutableVarDecl { ty : GenColour; name : string; init : option[FuncBodyExpr]}
    | FuncExec { name : string }
    | GetTokensExpr { expr : PExpr}
    | PeekIndexed { name : string; arc_name : string; }
    | Peek { ty : GenColour; name : string}
    | AddTokensExpr { expr : PExpr}
    | CombinedExpr  {expr : PExpr}
    | Action {name : string; parms : list[PExpr];}
    | CallTran {tran : GenTran}
    | CallTranFunc {tran : GenTran; parm : PExpr}
  }

  //public class PetriNetFunc : GenNode
  //{
  //  ret_type : GenColour;

  //  name : string;

  //  kind : FunBodyKind;
  //  body : FuncBodyExpr;
  //}

  public interface INetComposer
  {
    Result : list[GenNode] {get;}
  }

  public class InitMarking
  {
  }
  
  variant PetriNetOptions
  {
    | Timed
  }
  /// <summary>
  /// Description of GenModel.
  /// </summary>
  [Record]
  class GenModel
  {
    public name            : string;
    public options         : list[PetriNetOptions];
    public composer        : INetComposer;
    public places          : list[GenPlace];
    public init_marking    : list[InitMarking];
    public tran            : list[GenTran];
    public glob_refs       : list[GlobRef];
    public colours         : Hashtable[string, GenColour];
    public funcs           : list[GenFunc];    
  }
  
  class GenFileStruct
  {
    public module_name : string;
    
    public funcs : list[GClassDecl.Func];
    public vars  : list[GClassDecl.Field];
    public types : list[GClassDecl.Type];
  }
}
