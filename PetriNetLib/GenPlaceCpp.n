using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;

namespace PetriNetLib
{


  /// <summary>
  /// Description of GenPlace.
  /// </summary>
  [Record]
  class GenPlaceCpp : Place, IEquatable[GenPlaceCpp]
  {
    gen : CppGenerator;

    public this(pl : Place, gen : CppGenerator, idx : int)
    {
      base(pl.idx, pl.id, pl.name, pl.colour, pl.init_mark, pl.port, pl.tree, pl.net, 0);
      this.gen = gen;
      this.gen_idx = idx;
    }

    public Equals(obj : GenPlaceCpp) : bool
    {
      this == obj : object
    }
    
    AddTokenExpr(expr : PExpr) : string
    {

      def add(e)
      {
        | <[ () ]>                       => <#1#>
          //match (global_time)
                                              //{
                                              //  | <[ $(t : int)]> => def time = time + t;     

                                              //  | _               => null
                                              //} 
        | <[ 1 ` $e ]>                   => add(e)                                    
        | <[ $(_ : int) ` $_ ]> as e     => e |> gen.ConvExpr(_, false)                                    
        | <[ $_ %++ $_ ]> as e           => gen.GetTokenExpr(e)

        | <[ $_(..$_)]> as e
        | <[ $(_ : usesite) ]> as e
        | e                              => e |> gen.ConvExpr(_, false)
      }

      add(expr)
    }

    public AddPlaceExpr(expr : PExpr) : string
    {
      def name = Name;
      def expr = AddTokenExpr(expr);
      if (IsTimed)
      {

        def time = $"\n$(name)_time = time();";
        match (DestContainerType)
        {
          | ZeroSingle // имеет 0 или 1 фишку, для отсутствия используется 0 если INT
          | MinusSingle 
          | Var       => $"$(name) = $expr;$time"
          | Single    => if (IsUnit)
                         {
                           $<#$(name) = $expr;$time#>
                         } else
                         {
                            $<#$(name) = $expr;
                              $(name)_flag = true;$time#>
                         }
          | _ => $<#$name.add($expr);#>
        }
          //if (is_time_expr)
          //{
          //  $<#$name.add($add_token_expr);#>
          //} else
          //{
          //  $<#$name.add(add_time($add_token_expr, $global_time_str));#>
          //}
      } else
      {
        if (IsFuncPlace)
        {
          $<#$(name)($expr);#>
        } else
          match (DestContainerType)
          {
            | ZeroSingle // имеет 0 или 1 фишку, для отсутствия используется 0 если INT
            | MinusSingle 
            | Var       => $"$(name) = $expr;"
            | Single    => if (IsUnit)
                           {
                             $<#$(name) = $expr;#>
                           } else
                           {
                            $<#$(name) = $expr;
                              $(name)_flag = true;#>
                           }
            | _ => $<#$name.add($expr);#>
          }

      }
    }

    public OutputGenTransitionsArcs : list[GenTranCpp * Arc]
    {
      [Memoize]
      get
      {
        gen.Transitions.MapIndex((p, i) => (p, gen.Proc.OutputMatrix[idx, i]))
          .Filter((_, a) => a != null)
          .SelectMany((p, a) => a.Map(x => (p, x))).NToList()

      }
    }

    public InputGenTransitionsArcs : list[GenTranCpp * Arc]
    {
      [Memoize]
      get
      {
        gen.Transitions.MapIndex((p, i) => (p, gen.Proc.InputMatrix[idx, i]))
          .Filter((_, a) => a != null)
          .SelectMany((p, a) => a.Map(x => (p, x))).NToList()
      }
    }

    public OutputGenTransitions : list[GenTranCpp]
    {
      [Memoize]
      get
      {
        gen.Transitions.MapIndex((p, i) => (p, gen.Proc.OutputMatrix[idx, i]))
          .Filter((_, a) => a != null)
          .Map((p, _) => p)

      }
    }

    public PartOfGroupTransition : bool
    {
      [Memoize]
      get
      {
        gen.PlacesWithGroup.Exists(x => x : object == this)
      }
    }
    
    public InitMarkWithoutTime : PExpr
    {
      [Memoize]
      get
      {
        def fold(expr) : PExpr
        {
          //| <[ {..$e} ]>   => e.Fold(acc, fold)
          | <[ 1 ` $tok %@ $_]>             
          | <[ 1 ` $tok]>                       => tok
          | <[ $(n : int) ` $tok %@ $_ ]>
          | <[ $(n : int) ` $tok]>              => <[ $(n : int) ` $tok ]>
          | <[ $l %++ $r]>                      => <[ $(fold(l)) %++ $(fold(r)) ]>
          | e                                   => e
        }

        fold(init_mark)
      }
    }

    public InitTime : int
    {
      [Memoize]
      get
      {
        match (init_mark)
        {
          | null 
          | <[]> 
          | <[$(_ : int) ` $_ ]>               => 0
          | <[$(_ : int) ` $_ %@ $(t : int) ]> => t
          | _                                  => throw InvalidOperationException()
        }
      }
    }

    public InputGenTransitions : list[GenTranCpp]
    {
      [Memoize]
      get
      {
        gen.Transitions.MapIndex((p, i) => (p, gen.Proc.InputMatrix[idx, i]))
          .Filter((_, a) => a != null)
          .Map((p, _) => p)
      }
    }        

    public DfsIterator : IEnumerable[PetriNetNode]
    {
      [Memoize]
      get
      {
        // 0 - white, 1 - gray, 2 : black
        def it = DfsIter(gen);
        it.Dfs(this |> PetriNetNode.Place).ToArray()
      }
    }

    public IsUnit : bool
    {
      [Memoize]
      get
      {
        match (Colour.Colour)
        {
          | ColourSet(_, Colour.Timed(Colour.Unit))
          | ColourSet(_, Colour.Timed(Colour.Alias("UNIT")))
          | ColourSet(_, Colour.Unit)
          | ColourSet("UNIT", _)  => true
          | _                     => false
        }
      }
    }

    public IsInteger : bool
    {
      [Memoize]
      get
      {
        match (Colour.Colour)
        {
          | ColourSet(_, Colour.Integer)
          | ColourSet("SBYTE", _)
          | ColourSet("BYTE", _)
          | ColourSet("INT", _)
          | ColourSet("UINT", _)
          | ColourSet("SHORT", _)
          | ColourSet("USHORT", _) => true
          | _                      => false
        }
      }
    }

    public Colour : GenColourCpp
    {
      [Memoize]
      get
      {
        GenColourCpp(colour, gen)
      }
    }

    public IsIndexedContainer : bool
    {
      [Memoize]
      get
      {
        match (DestContainerType)
        {
          | TDestCont.RandomEnumerable
          | TDestCont.MultiSet          => true
          | _                           => false
        }
      }
    }

    public FuncTran : GenTranCpp
    {
      [Memoize]
      get
      {
        OutputGenTransitions.Where(x => x.IsImmediate).First()
      }
    }

    public LockPlaces : string
    {
      [Memoize]
      get
      {
        def visit(x, a)
        {
          match (x)
          {
            | PetriNetNode.Place(p) => def pl = $"pl_$(p.Name)";
                                      if (a.IsEmpty()) pl else $"$pl | $a"
            | _                     => a
          }
        }

        DfsIterator.Fold("", visit)
      }
    }

    public PathThroughOrdinaryPlaces : IEnumerable[PetriNetNode]
    {
      [Memoize]
      get
      {
        def visit(v)
        {
          | PetriNetNode.Place(p) when p.IsTimed => false
          | _                                    => true
        }

        DfsIterator.Visit(visit).ToArray()
      }
    }

    public IsFuncPlace : bool
    {
      [Memoize]
      get
      {
        def tran = OutputGenTransitions.Where(x => x.IsImmediate);
        !InputTransitions.IsEmpty() && // есть входные переходы
         tran.Count() == 1           && // один выходной переход
         (init_mark is <[]> || init_mark == null) && // нет начальной маркировки
         tran.First().guard is <[]>  && // нет сторожевого условия
        !tran.First().IsTimed       && // переход не временной
         (port.IsNone || port is Some(PortType.InOut)) && // не порт
        !PathThroughOrdinaryPlaces.Exists(x => if (x is PetriNetNode.Cycle(PetriNetNode.Place(p))) p : object == this else false) && // не имеет циклов на вход
         tran.First().InputGenPlaces.Except(this).All(x => x.Var || x.Req) // из всех позиций перехода можно вынуть фишки с гарантией
      }
    }

    public DestContainerType : TDestCont
    {
      [Memoize]
      get
      {
        match (colour.type)
        {
          //| Colour.Sorted => TDestCont.SortedSet
          | Timed         => if (Colour.Single || Single) TDestCont.Single else 
                               if (Colour.Var || Var) TDestCont.Var else
                                 if (Colour.Req || Req) TDestCont.ReqContainer else
                                   if (Colour.ZeroSingle || ZeroSingle) TDestCont.ZeroSingle else 
                                     if (MinusSingle) TDestCont.MinusSingle else TDestCont.TimedSimpleMultiset

          //| Queue         => TDestCont.TokenQueue
          | _             => def opts = Colour.Opts;
                            if (opts.IsEmpty() && Attributes.IsEmpty())
                            {
                              def tran = OutputTransitions;
                              def one = tran.Select((_, x) => x.NumberTokensGet).All(_ == 1);
                              if (one) TDestCont.RandomEnumerable else TDestCont.MultiSet
                            } else
                            {
                              if (Colour.Queue || Queue)
                              {
                                TDestCont.TokenQueue
                              } else
                              if (Colour.Sorted || Sorted)
                              {
                                TDestCont.SortedSet
                              } else
                              if (Colour.Var || Var) TDestCont.Var else
                              if (Colour.Single || Single) TDestCont.Single else
                              if (Colour.Req || Req) TDestCont.ReqContainer else
                              if (Colour.ZeroSingle || ZeroSingle) TDestCont.ZeroSingle else 
                              if (MinusSingle) TDestCont.MinusSingle else TDestCont.RandomEnumerable
                            }

        }
      }
    }

    public override ToString() : string
    {
      Name
    }
  }
}

