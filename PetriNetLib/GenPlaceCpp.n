using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetLib
{
  /// <summary>
  /// Description of GenPlace.
  /// </summary>
  [Record]
  class GenPlaceCpp : Place
  {
    gen : CppGenerator;
    
    public this(pl : Place, gen : CppGenerator, idx : int)
    {
      base(pl.idx, pl.id, pl.name, pl.colour, pl.init_mark, pl.tree, pl.net, 0);
      this.gen = gen;
      this.gen_idx = idx;
    }
       
    public Colour : GenColourCpp
    {
      [Memoize]
      get
      {
        GenColourCpp(colour, gen)
      }
    }
    
    public IsIndexedContainer : bool
    {
      [Memoize]
      get
      {
        true
        //match (DestContainerType)
        //{
        //  | TDestCont.RandomEnumerable
        //  | TDestCont.MultiSet          => true
        //  | _                           => false
        //}
      }
    }
    
    public DestContainerType : TDestCont
    {
      [Memoize]
      get
      {
        match (colour.type)
        {
          //| Colour.Sorted => TDestCont.SortedSet
          | Timed         => TDestCont.TimedSimpleMultiset
          //| Queue         => TDestCont.TokenQueue
          | _             => def opts = Colour.Opts;
                             if (opts.IsEmpty() && Attributes.IsEmpty())
                             {
                               def tran = OutputTransitions;
                               def one = tran.Select((_, x) => x.NumberTokensGet).All(_ == 1);
                               if (one) TDestCont.RandomEnumerable else TDestCont.MultiSet
                             } else
                             {
                               if (Colour.Queue || Queue)
                               {
                                 TDestCont.TokenQueue
                               } else
                               if (Colour.Sorted || Sorted)
                               {
                                 TDestCont.SortedSet
                               } else
                               if (Colour.Var || Var) TDestCont.Var else
                               if (Colour.Single || Single) TDestCont.Single else
                               if (Colour.Req || Req) TDestCont.ReqContainer else
                               if (Colour.ZeroSingle || ZeroSingle) TDestCont.ZeroSingle else TDestCont.RandomEnumerable
                             }

        }
      }
    }


  }
}
