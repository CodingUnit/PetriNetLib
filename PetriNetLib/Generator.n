using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using CommonLib.Macros;
using PetriNetModel;
using System.Reactive.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace PetriNetLib
{
  /// <summary>
  /// Description of Generator.
  /// </summary>
  partial class Generator
  {
    
    
    CreatePlace(place : Place) : ClassMember
    {
      def name = place.Name;
      //def name = name.Replace(" ", "").Replace("\n", "").Replace("\r", "");
      def type = GetTypeExpr(place.colour);
      def dest_cont = match (place.DestContainerType)
      {
        | TDestCont.MultiSet  => <[ MultiSet() ]>
        | RandomEnumerable    => <[ RandomArray() ]>
        | SortedSet           => <[ SortedArray() ]>
        | TokenQueue          => <[ TokenQueue() ]>
        | TimedSimpleMultiset => <[ TimedHeap() ]>
      }
      if (place.IsTimed)
      <[decl: $(name : usesite) : PetriNetModel.TimedPlace.[$type] = PetriNetModel.TimedPlace($(name : string), $dest_cont)]> else
      <[decl: $(name : usesite) : PetriNetModel.Place.[$type] = PetriNetModel.Place($(name : string), $dest_cont)]>
    }
    
    
    CreateTran(tran : Transition) : ClassMember
    {
      def name = tran.Name;
      
      def body = CreateTranBody(tran);      
      <[
         decl: public $(name : usesite)() : void
               {
                 when (Lock($(name : usesite)))
                 {
                  $body;
                  Unlock();
                 }
               }
       ]>
    }
    
    CreateGlobRef(name : string, val : PExpr) : ClassMember
    {
      def ty = Typer(TypingMethod);
      def te = ty.TypeExpr(val);
      
      <[decl: mutable $(name : usesite) : $(te.ty : typed) = $val]>
    }
     
    CreateVals(expr : PExpr) : ClassMember
    {
      | <[ def $(name : usesite) = $val]> => 
          def type = typer.TypeExpr(val);
          def ty = type.ty;
          <[ decl: $(name : usesite) : $(ty : typed) = $val ]>
          
      | _ => null
    }
    
    ProcessFun(expr : PExpr) : PExpr
    {
      | <[ def $(n : usesite)(..$parms) { ..$body } ]> => 
      
            def proc_parm(p, (parm, e))
            {
              match (p)
              {
                | <[parameter: $(n : usesite) : Index.[$(type : usesite)]]> => 
                  match (model.GetIndex(type))
                  {
                    | Some((t, _)) => (<[parameter: $($"$(n)" : usesite) : $(t : usesite)]> :: parm, e)//<[def $(n : usesite) = $($"$(n)" : usesite).num ]> :: 
                    | _            => (parm, e)
                  }
                | p => (p :: parm, e)
              }
            }
      
      def expr = <[ {..$body} ]>;
      
      def process(a, after, expr)
      {
        if (after)
        match (expr)
        {
          | <[ (..$e)]> => match (e)
                           {
                             | [e] => e
                             | _   => expr
                           }
          | e         => e
        } else expr
      }
      
      def expr = Macros.TraverseExpr(None(), expr, false, process);
      def (parms, expr) = parms.Fold(([], expr :: []), proc_parm);
      def parms = parms.Rev();
          
      <[ def $(n : usesite)(..$parms) { ..$expr } ]>
    }
    
    CreateDecl(expr : PExpr) : ClassMember
    {
      | <[ def $(_ : usesite)(..$_) { ..$_ } ]> => 
          
      //def expr = <[ def abc() : A * B * C {} ]>;
          def func = ProcessFun(expr);
          def ty = Typer(TypingMethod);
          def te = ty.TypeExpr(func);
          match (func)
          {
            | <[ def $(n : usesite)(..$parms) { ..$expr } ]> =>
                match (te)
                {
                  | TExpr.DefFunctionsIn(h :: _, _) => def ret = h.ReturnType;
                                                      <[decl: $(n : usesite)(..$parms) : $(ret : typed)
                                                        {
                                                          ..$expr
                                                        }]>
                }
        }
      | _ => null
    }
    
    CreateColourSet2(col : ColourSet) : ClassMember.TypeDeclaration
    {
      //| ColourSet(n, Colour.Index(_, _, i)) => 
      //    <[decl: [Record]
      //      class $(i : usesite) : $(n : usesite)
      //      {
                                                       
      //      }
      //      ]>;
      | _ => null    
    }
    
    TypeDecl(new_n : string, n : string) : ClassMember.TypeDeclaration
    {
      def name = Macros.UseSiteSymbol(n);
      def mods = AttributesAndModifiers(NemerleModifiers.Private, []);
      def al = TopDeclaration.Alias(name, mods, Typarms.Empty, <[ $(new_n : usesite) ]>);
      al |> ClassMember.TypeDeclaration.TypeDeclaration
    }
    
    CreateColourSet(col : ColourSet) : ClassMember.TypeDeclaration
    {
      | ColourSet(n, Colour.Alias(new_name))  => //if (model.colour_sets[new_name].type.IsComplex)
                                                 {
                                                   TypeDecl(new_name, n)
                                                 }// else null
      | ColourSet(n, Colour.Record(vals))     => def fields = vals.Map((n, t) => (n, TypeFromStr(t)));
                                                 def fields = fields.Map((n, t) => <[decl: public $(n : usesite) : $t]>);
                                                 <[decl: [Record] class $(n : usesite)
                                                         {
                                                           ..$fields
                                                         }
                                                 ]>
      | ColourSet(n, Colour.Index(_mn, _mx, i)) => 
                                                 // def eval(m)
                                                 //{
                                                 //   def expr = converter.ParseML(m);
                                                 //   match (expr)
                                                 //   {
                                                 //     | <[$(n : int)]>  => n
                                                 //     | <[$(name : usesite) ]> => 
                                                 //                          def match_var(x)
                                                 //                          {
                                                 //                            | <[ def $(n : usesite) = $_]> => n == name 
                                                 //                            | _                            => false
                                                 //                          }
                                                                           
                                                 //                          match (model.ml_decls.Find(match_var))
                                                 //                          {
                                                 //                            | Some(<[ def $(_ : usesite) = $(v : int)]>) => v
                                                 //                            | _                                  => throw InvalidOperationException()
                                                 //                          }
                                                 //   }
                                                 //}
                                                 //def mn = mn |> eval;
                                                 //def mx = mx |> eval;
                                                 fields ::= <[decl: $(i : usesite)(n : int) : int {n}]>;
                                                 def name = Macros.UseSiteSymbol(n);
                                                 def mods = AttributesAndModifiers(NemerleModifiers.Private, []);
                                                 def al = TopDeclaration.Alias(name, mods, Typarms.Empty, <[ int ]>);
                                                 al |> ClassMember.TypeDeclaration.TypeDeclaration;
                                                   
                                                  //<[decl: type $(n : usesite) = int;
                                                  //    class $(n : usesite) : Index[$(n : usesite)]
                                                  //    {
                                                  //      public this(num : int)
                                                  //      {
                                                  //        base($(mn : int), $(mx : int), num)
                                                  //      }
                                                        
                                                  //      public override Name() : string {$n}
                                                  //      public override Create(num : int) : $(n : usesite) {$(n : usesite)(num)}
                                                  //      static Instance : $(n : usesite) = $(n : usesite)(0);
                                                        
                                                  //      public static all() : IEnumerable[$(n : usesite)]
                                                  //      {
                                                  //        Instance.all_impl
                                                  //      }
                                                  //    }
                                                  //   ]>
      | ColourSet(n, Colour.Enum(vals)) => def vals = vals.Map(x => <[decl: | $(x : usesite) ]>);
                                           <[decl: enum $(n : usesite)
                                           {
                                             ..$vals
                                           }]>
      | ColourSet(n, Colour.Timed(c))   => CreateColourSet(ColourSet(n, c))
      | ColourSet(n, Colour.Integer)    => match (n)
                                           {
                                             | "BYTE"   => TypeDecl("byte", "BYTE")
                                             | "SHORT"  => TypeDecl("short", "SHORT")
                                             | "INT"    => TypeDecl("int", "INT")
                                             | "UINT"   => TypeDecl("uint", "UINT")
                                             | "USHORT" => TypeDecl("ushort", "USHORT")
                                           }
      | _                               => null
    }    
    
    CreateInitMarking(place : Place) : PExpr
    {
      def combine(e1, e2)
      {
        | (<[Enumerable.Repeat($tok, $(n : int))]>, <[Enumerable.Repeat($tok2, $(n2 : int))]>) when (tok.Equals(tok2)) 
            => <[Enumerable.Repeat($tok, $(n2 + n))]>
        | (<[Enumerable.Repeat($(tok : int), $(n : int))]>, <[Enumerable.Repeat($(tok2 : int), $(n2 : int))]>)                         
            => def val = Enumerable.Repeat(tok, n).Concat(Enumerable.Repeat(tok2, n2)).Select(x => <[ $(x : int)]>).ToArray();
               if (val.Length > 50) <[ $(e1).Concat($e2)]> else
               <[ array[..$val] ]>
        | (<[Enumerable.Repeat($(tok : string), $(n : int))]>, <[Enumerable.Repeat($(tok2 : string), $(n2 : int))]>)                         
            => def val = Enumerable.Repeat(tok, n).Concat(Enumerable.Repeat(tok2, n2)).Select(x => <[ $(x : string)]>).ToArray();
               if (val.Length > 50) <[ $(e1).Concat($e2)]> else
               <[ array[..$val] ]>
        | (<[Enumerable.Repeat($(tok : double), $(n : int))]>, <[Enumerable.Repeat($(tok2 : double), $(n2 : int))]>)                         
            => def val = Enumerable.Repeat(tok, n).Concat(Enumerable.Repeat(tok2, n2)).Select(x => <[ $(x : double)]>).ToArray();
               if (val.Length > 50) <[ $(e1).Concat($e2)]> else
               <[ array[..$val] ]>       
        | _  //(<[Enumerable.Repeat($_, $(_ : int))]>, <[Enumerable.Repeat($_, $(_ : int))]>)                         
            => <[ $e1.Concat($e2)]> 
      }
      
      def unfold(expr) : PExpr
      {
        | <[ () ]> => <[ Unit.Instance ]>
        | <[ $(n : usesite).all() ]> => 
        
           def eval(m : string) : int
            {
              def expr = converter.ParseML(m).Value;
              match (expr)
              {
                | <[$(n : int)]>         => n
                | <[$(name : usesite) ]> => 
                                      def match_var(x)
                                      {
                                        | <[ def $(n : usesite) = $_]> => n == name 
                                        | _                            => false
                                      }
                                                                           
                                      match (model.ml_decls.Find(match_var))
                                      {
                                        | Some(<[ def $(_ : usesite) = $(v : int)]>) => v
                                        | _                                  => throw InvalidOperationException()
                                      }
              }
            }
            
              match (model.colour_sets.Find(x => x.Key == n))
              {
                | Some(t) => match (t.Value.type)
                             {
                               | Colour.Index(mn, mx, _i) => 
                                  def mn = mn |> eval;
                                  def mx = mx |> eval;
                                  <[ Enumerable.Range($(mn : int), $(mx : int)) ]>
                             }
                | _       => expr
              }
            
        | e        => e
      }
      
      def fold(expr)
      {
        //| <[ {..$e} ]>   => e.Fold(acc, fold)
        | <[ 1 ` $tok %@ $time ]>             => <[ $(unfold(tok)) %@ $time ]>
        | <[ 1 ` $tok]>                       => <[ $(unfold(tok)) ]>
        | <[ $(n : int) ` $tok %@ $time ]>    => <[ Enumerable.Repeat($(unfold(tok)) %@ $time, $n) ]>
        | <[ $(n : int) ` $tok]>              => <[ Enumerable.Repeat($(unfold(tok)), $n) ]>
        | <[ $l %++ $r]>                      => combine(fold(l), fold(r))
        | e                                   => unfold(e)
      }
      
      if (place.init_mark == null) <[]> else
      {
        def mark = fold(place.init_mark);
        def mark = if (place.IsTimed) <[ $mark %@+ 0]> else mark;
        def name = place.name;
        <[ $(name : usesite).Add($mark)]>
      }
    }
    
    CreateToString() : void
    {
      def strings = model.places.Map(x => <[ $(x.name : usesite).ToString() ]>);
      fields ::= <[decl: public override ToString() : string 
      { 
        def str = array[..$strings];
        string.Join(";\n", str)
      }]>
    }
    
    CreateCons() : void
    {
      fields ::= if (model.IsTimed || model.IsHaveImmediateTransitions) <[decl: public this(time_step : int = 15) { base(time_step); {..$cons_expr}}]>; 
      else <[decl: public this() { {..$cons_expr} }]>;
    }
    
    CreateInitMarking() : void
    {
      cons_expr += model.places.MapToList(CreateInitMarking);
    }
    
    CreateTimeMethods() : void
    {
      def body = model.transitions.Where(_.IsTimed).Map(x => <[ $(x.Name : usesite)() ]>);
      def next = model.places.Where(_.IsTimed).Map(x => <[ $(x.name : usesite).NextTokenDelay ]>);
      
      def time_body = match (next)
      {
        | []    => <[ long.MaxValue ]>
        | [one] => one
        | lst   => def next = lst.Map(x => <[ min = Math.Min(min, $x); ]>);
                  <[
                    mutable min = long.MaxValue;
                    {..$next}
                    min
                  ]>
      }
      fields ::= <[decl: public override GetNextTime() : long
                   {
                     $time_body
                   }]>;
      fields ::= <[decl: public override TimeStep() : void
      {
        {..$body}
      }]>
    }
    
    CreateStepMethod() : void
    {
      def body = model.transitions.Where(x => x.IsImmediate && !x.IsTimed).Map(x => <[ $(x.Name : usesite)() ]>);
      when (!body.IsEmpty())
      fields ::= <[decl: public override Step() : void
      {
        {..$body}
      }]>
    }
    
    CreateStartMethod() : void
    {
      fields ::= <[decl: public Initiate() : void
      {
        {..$init_body}
      }]>
    }
    
    CreateEvents() : void
    {
      when (proc.Flags.HasFlag(PetriNetFlags.Events))
      {
        foreach (t in model.transitions)
        {
          def name = t.Name;
          def evt = $"evt_$name";
          fields ::= <[decl: public event $(evt : usesite) : Action]>;
          fields ::= <[decl: $($"On$name" : usesite)() : void
                      {
                        $(evt : usesite)?.Invoke()
                      } ]>;
        }
      }
    }
    
    public Generate() : void
    {      
      //CreateOperators();
      //assert2(false);
      def sets = model.colour_sets.Values.Map(CreateColourSet).Filter(_ != null);
      def sets2 = model.colour_sets.Values.Map(CreateColourSet2).Filter(_ != null);
      def sets = sets + sets2;
      foreach (m in sets) typebuilder.DefineNestedTypeWithSource(m).Compile();
      
      def places = model.places.MapToList(CreatePlace);      
      
      when (model.IsTimed) CreateTimeMethods();
      CreateStepMethod();
      
      CreateEvents();
      //CreateTranQueue();
      CreateToString();
      CreateStartMethod();
      CreateInitMarking();
      CreateCons();
      
      def members = fields + places;
      foreach (m in members) _ = typebuilder.DefineWithSource(m);
    }
    
    public PhaseOne() : void
    {
      //typebuilder.AddImplementedInterface(<[ IDisposable ]>);
      typebuilder.AddImplementedInterface(if (model.IsTimed) <[ TimedPetriNet ]> 
                                          else <[PetriNet]>);
    }
    
    public PhaseTwo() : void
    {
      //CreateDummyMethod();
      def methods = model.transitions.MapToList(CreateTran);
      def vals = model.ml_decls.Map(CreateVals).Filter(_ != null);
      foreach (m in vals) _ = typebuilder.DefineWithSource(m);
      def decls = model.ml_decls.Map(CreateDecl).Filter(_ != null);
      def decls = decls + methods;
      foreach (m in decls) _ = typebuilder.DefineWithSource(m);
      def globrefs = model.glob_refs.KeyValuePairs.MapToList(CreateGlobRef);
      foreach (m in globrefs) _ = typebuilder.DefineWithSource(m);
      typebuilder.Compile()
    }
  }
}
