using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using CommonLib.Macros;

namespace PetriNetLib
{
  /// <summary>
  /// Description of Generator.
  /// </summary>
  class Generator
  {
    model : OutModel;
    proc : PetriNetProcessor;
    converter : Converter;
    compiler : CompilerHost = CompilerHost();
    
    public this(model : OutModel, proc : PetriNetProcessor)
    {
      this.model = model;
      this.proc = proc;
      this.converter = proc.Converter;
    }
    
    GetTypeExpr(p : ColourSet) : PExpr
    {
        | ColourSet(_, Colour.Simple(type)) => 
              match (type)
              {
                | "string" => <[ string ]>
                | "int"    => <[ int ]>
                | "intinf" => <[ IntInf ]>
                | "real"   => <[ double ]>
                | "time"   => <[ Time ]>
                | "bool"   => <[ bool ]>
                | "unit"   => <[ void ]>
              }
        
        | ColourSet(_, Product(vals))  => def vals = vals.Map(x => <[ $(TypeFromStr(x)) ]>);
                                          <[ (..$vals) ]>
        | ColourSet(n, Index)
        | ColourSet(n, Enum)           => <[ $(n : usesite) ]>
        | ColourSet(_, List(t, _))     => 
            def inner = t |> TypeFromStr;
            <[ list[$inner]]>
    }
      
    TypeFromStr(str : string) : PExpr
    {
      | "string" => <[ string ]>
      | "int"    => <[ int ]>
      | "intinf" => <[ IntInf ]>
      | "real"   => <[ double ]>
      | "time"   => <[ Time ]>
      | "bool"   => <[ bool ]>
      | "unit"   => <[ void ]>
      | str      => proc.colour_sets[str] |> GetTypeExpr
      
    }
    
    CreatePlace(place : Place) : ClassMember
    {
      def name = place.name;
      def type = GetTypeExpr(place.colour);
      <[decl: $(name : usesite) : PetriNetModel.Place.[$type] = PetriNetModel.Place()]>
    }
    
    IsTokenExpr(expr : PExpr) : bool
    {
      | <[ $(_ : usesite) ]> => false
      | _                    => true
    }
    
    //class a : IEqualityComparer[PExpr]
    //{
    //  public override GetHashCode() : int
    //  {
    //  }
      
    //  public override Equals(left : PExpr, right : PExpr) : bool
    //  {
    //  }
    //}
    
    //EvalTokenExpr(expr : PExpr) : PExpr
    //{
    //  | <[ $(lit : int)]>            => expr
    //  | <[ $(count : int) ` $expr ]> => expr
    //  | <[ $left %++ $right ]>       => match (left, right)
    //                                    {// int, real, string, tuple,
    //                                      | (<[ $(count : int) ` $expr ]>, <[ $(count2 : int) ` $expr2 ]>) =>
    //                                    }
    //}
    
    GetTokenExpr(expr : PExpr) : PExpr
    {
      def loop(e)
      {
        | <[ $(count : int) ` $expr ]> => Enumerable.Repeat(expr, count).NToList()
        | <[ $left %++ $right ]>       => loop(left) + loop(right)
        | _                            => [expr]
      }
      
      match (loop(expr))
      {
        | [<[$_(..$_)]> as e] => e
        | e                   => <[array[..$e]]>
      }
      
    }
    
    CreateTranBody(tran : Transition) : PExpr
    {
      def input = tran.InputPlaces;
      def output = tran.OutputPlaces;
      
      def create_check(p, a)
      {
        def name = p.name;
        if (a.expr |> IsTokenExpr)
        {
          def tok = GetTokenExpr(a.expr);
          <[ $(name : usesite).Have($tok) ]>
        } else
        {
          <[ $(name : usesite).HaveTokens ]>
        }
      }
      
      def create_run_body(p, a)
      {
        def name = p.name;
        if (a.expr |> IsTokenExpr)
        {
          def expr = GetTokenExpr(a.expr);
          <[ $(name : usesite).GetMany($expr)]>
        } else
        {
          <[def $(a.expr) = $(name : usesite).Get()]>
        }
      }
      
      def create_out(p, a)
      {
        def name = p.name;
        match (a.expr)
        {
          | <[ 1 ` $e ]>
          | <[ $_(..$_)]> as e                                    
          | <[ $(_ : usesite) ]> as e      => <[ $(name : usesite).Add($e)]>
          | <[ $(_ : int) ` $_ ]> 
          | <[ $_ %++ $_ ]>                => def expr = GetTokenExpr(a.expr);
                                              <[ $(name : usesite).AddMany($expr)]>
          
        }
      }
      
      def checks = input.Map(create_check);
      def checks = checks.Reduce((x, y) => <[ $x && $y]>);
      def run_body = input.Map(create_run_body);
      def out_body = output.Map(create_out);
      <[ 
         match ($checks)
         {
           | true => {..$run_body}
                     {..$out_body}
           | _    => ()
         }
       ]>
    }
    
    CreateTran(tran : Transition) : ClassMember
    {
      def name = tran.name;
      def body = CreateTranBody(tran);      
      <[
         decl: public $(name : usesite)() : void
               {
                 $body
               }
       ]>
    }
    
    CreateVars(name : string, type : ColourSet) : ClassMember
    {
      def type = GetTypeExpr(type);
      <[decl: $(name : usesite) : $type]>
    }
    
    CreateDecl(expr : PExpr) : ClassMember
    {
      | <[ def $(name : usesite) = $val]> => <[decl: $(name : usesite) = $val]>
      | <[
            def $(n : usesite)(..$parms)
            {
              ..$body
            }
          ]>                              => 
          //def typer = Typer(compiler.CoreEnv);
          //def te = typer.TypeExpr(expr);
          //match (te)
          //{
          //  | TExpr.DefFunctionsIn(h :: _, _) => def ret = h.ReturnType;
            def ret = CalcReturnType(body);
                                                <[decl: $(n : usesite)(..$parms) : $(ret)
                                                  {
                                                    ..$body
                                                  }]>
          //}
          
    }
    
    TypeOfExpr(expr : PExpr) : PExpr
    {
      | <[ $(_ : int)]>       => <[ int ]>
      | <[ $(_ : string)]>    => <[ string ]>
      | <[ $(_ : double)]>    => <[ double ]>
      | <[ $(_ : bool)]>      => <[ double ]>
      | <[ $(_ : int) ` $t ]> => def t = TypeOfExpr(t); <[ array[$t] ]>
      | <[ $(n : usesite) ]>  => null//model.ml_decls.Find();
    }
    
    CalcReturnType(expr : list[PExpr]) : PExpr
    {
      def last = expr.Last();
      last |> TypeOfExpr
      //match (last)
      //{
      //  | <[ $(_ : int) ` $t ]> => TypeOfExpr(t)
      //}
    }
    
    CreateColourSet(col : ColourSet) : ClassMember
    {
      | ColourSet(n, Colour.Record(vals))     =>  def fields = vals.Map((n, t) => (n, TypeFromStr(t)));
                                                  def fields = fields.Map((n, t) => <[decl: $(n : usesite) : $t]>);
                                                  <[decl: [Record] class $(n : usesite)
                                                         {
                                                           ..$fields
                                                         }
                                                  ]>
      | ColourSet(n, Colour.Index(mn, mx, _)) => def eval(m)
                                                 {
                                                    def expr = converter.ParseML(m);
                                                    match (expr)
                                                    {
                                                      | <[$(n : int)]>  => n
                                                      | <[$(name : usesite) ]> => 
                                                                           def match_var(x)
                                                                           {
                                                                             | <[ def $(n : usesite) = $_]> => n == name 
                                                                             | _                            => false
                                                                           }
                                                                           
                                                                           match (model.ml_decls.Find(match_var))
                                                                           {
                                                                             | Some(<[ def $(_ : usesite) = $(v : int)]>) => v
                                                                             | _                                  => throw InvalidOperationException()
                                                                           }
                                                    }
                                                 }
                                                 def mn = mn |> eval;
                                                 def mx = mx |> eval;
                                                  <[decl: [Record]
                                                      class $(n : usesite)
                                                      {
                                                        public static min : int = $(mn : int);
                                                        public static max : int = $(mx : int);
                                                        public num : int;
                                                        
                                                        public static all() : array[$(n : usesite)]
                                                        {
                                                          Enumerable.Range(min, max).Select($(n : usesite))
                                                        }
                                                      }
                                                     ]>
      | ColourSet(n, Colour.Enum(vals)) => def vals = vals.Map(x => <[decl: | $(x : usesite) ]>);
                                           <[decl: enum $(n : usesite)
                                           {
                                             ..$vals
                                           }]>
      | _ => null
    }
    
    public Generate() : void
    {
      def sets = model.colour_sets.Values.Map(CreateColourSet);
      def fields = model.places.Map(CreatePlace);
      def methods = model.transitions.Map(CreateTran);
      def a = model.vars.KeyValuePairs.Map(CreateVars);
      def decls = model.ml_decls.Map(CreateDecl);
    }
  }
}
