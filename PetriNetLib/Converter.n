using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using CommonLib.Macros;
using System;
using System.Collections.Generic;
using System.Linq;
using Nitra;
using CpnML.Grammar;
using CpnML.Grammar.MainParseTree;

namespace PetriNetLib
{
  /// <summary>
  /// Description of Converter.
  /// </summary>
  class Converter
  {
    file : string;
    parserHost : ParseSession;
    msg : Nitra.ProjectSystem.CompilerMessageList;
    host : CompilerHost = CompilerHost();
    
    public this()
    {
      msg = Nitra.ProjectSystem.CompilerMessageList();
      parserHost = ParseSession(Main.LangExpr, compilerMessages = msg);
    }
    
    GetLiteral(l : Literal) : PExpr
    {
      | Literal.FloatingNumber as n => def val = n.FloatingNumber.GetValue();
                                      <[ $(val : double) ]>
      | Literal.Numeric as n        => def val = n.Numeric.GetValue();
                                      <[ $(val : int) ]>
      | Literal.String as n         => def val = n.GetText();
                                      <[ $(val : string) ]>
      | Literal.Boolean(Boolean = BaseParseTree.Boolean.True) => <[ $(true : bool) ]>
      | Literal.Boolean(Boolean = BaseParseTree.Boolean.False) => <[ $(false : bool) ]>
    }
    
    GetExpr(expr : MainParseTree.Expr) : PExpr
    {
      | Literal as l => GetLiteral(l.Literal)
      | Var as v     => def name = v.Identifier.GetText();
                        <[ $(name : usesite) ]>
      | FuncCall(NameData = (n, _), ParmsData = p) => 
           def parms = match (p)
           {
             | [BraceExpr(Expr = e)] => [e]
             | [Tuple(Expr1 = e1, Expr2 = e2, ExprsData = e3)] => e1 :: e2 :: e3
             | lst => lst
           }
           def parms = parms.Map(GetExpr);
           //def path = if (n.Length > 1) n.ChopLast() else [];
           def path = n.Map(x => <[ $(x.GetText() : usesite) ]> );
           def path = match (path)
           {
             | [p] => p
             | lst => def path = lst.ChopLast();
                      def last = lst.Last();
                      <[ (..$path).$last ]>
           }
           <[ $path(..$parms)]>
                                                                            
      | TokenExpr(Integer = i, Expr = e) => 
          def count = expr.GetText(i) |> int.Parse;
          def expr = GetExpr(e);
          <[ $(count : int) ` $expr ]>
      | SetUnion(Expr1 = left, Expr2 = right) => def left  = GetExpr(left);
                                                 def right = GetExpr(right);
                                                 <[ $left %++ $right ]>
      | SetDiff(Expr1 = left, Expr2 = right)  => def left  = GetExpr(left);
                                                 def right = GetExpr(right);
                                                 <[ $left %-- $right ]>
      | If(Cond = c, Then = t, Else = e)      => 
          def c = GetExpr(c);
          def t = GetExpr(t);
          def e = GetExpr(e);
          <[ if ($c) $t else $e]>
          
      | Declaration(Declaration = MainParseTree.Declaration.Val(Name = name, TypeOptData = _t, Expr = l)) => 
      
               def name = name.IdentifierBodyData;
               def val = GetExpr(l);
               <[ def $(name : usesite) = $val]>
               
      | Declaration(Declaration = Declaration.Func(Func = MainParseTree.Func(Name = n, TypeOpt = t, ParmsData = (p, _), BodyData = (b, _)))) => 
           
          def get_parm(p)
          {
            | MainParseTree.Func.Nested.Parm.Var(Identifier = n, TypeOpt = t) => 
              <[parameter: $(n.GetText() : usesite) ]>
            | MainParseTree.Func.Nested.Parm.IndexVar(IndexVar = IndexVar(Name = n, Idx = i)) =>
              def e = GetExpr(i);
              match (e)
              {
                | <[ $(i : usesite)]> =>
                    def n = n.GetText();
                    <[parameter: $(i : usesite) : Index.[$(n : usesite)]]>
              }
            
          }
        
          def parms = p.Map(get_parm);
          def n = n.GetText();
          def body = b.Map(GetExpr);
          <[
            def $(n : usesite)(..$parms)
            {
              ..$body
            }
          ]>
          
       | Equal(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) == $(GetExpr(right))]>
       | Plus(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) + $(GetExpr(right))]>
       | Minus(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) - $(GetExpr(right))]>
       | NotEqual(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) != $(GetExpr(right))]>
       | Above(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) > $(GetExpr(right))]>
       | Below(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) < $(GetExpr(right))]>
       | AboveEqual(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) >= $(GetExpr(right))]>
       | BelowEqual(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) <= $(GetExpr(right))]>
       | Append(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) + $(GetExpr(right))]>
       | Concat(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) + $(GetExpr(right))]>
       | ListCombine(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) :: $(GetExpr(right))]>
       | Multiply(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) * $(GetExpr(right))]>
    }
    
    ConvertTree(tree : MainParseTree.LangExpr) : PExpr
    {
      | LangExpr.Expression(ExprsData = ([d], _)) => d |> GetExpr
      | LangExpr.Expression(ExprsData = (d, _)) => 
          def e = d.Map(GetExpr);
          <[ {..$e} ]>
    }
    
    public ParseML(text : string) : PExpr
    {
      if (string.IsNullOrWhiteSpace(text)) null else
      {
        def source = SourceSnapshot(text, file);
        def result = parserHost.Parse(source);//Main.StateMachine(source, parserHost);
        def ast = result.CreateParseTree();
        if (result.IsSuccess) 
        {
          match (ast)
          {
            | MainParseTree.LangExpr as a => ConvertTree(a);
            | _                           => null
          }

           
        } else 
        {
          def msg = msg.GetMessages();
          null
          //(null, msg.GetMessages().NToList())
        }
        //    def (line, col) = error.Location.StartLineColumn;
        //    WriteLine($<#$line:$col: $(error.Message)#>);
      }
    }
  }
}
