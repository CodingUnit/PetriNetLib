using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using CommonLib.Macros;
using System;
using System.Collections.Generic;
using System.Linq;
using Nitra;
using CpnML.Grammar;
using CpnML.Grammar.MainParseTree;

namespace PetriNetLib
{
  /// <summary>
  /// Description of Converter.
  /// </summary>
  class Converter
  {
    file : string;
    parserHost : ParseSession;
    msg : Nitra.ProjectSystem.CompilerMessageList;
    //host : CompilerHost = CompilerHost();
    
    public this()
    {
      msg = Nitra.ProjectSystem.CompilerMessageList();
      parserHost = ParseSession(Main.LangExpr, compilerMessages = msg);
    }
    
    GetLiteral(l : Literal) : PExpr
    {
      | Literal.FloatingNumber as n => def val = n.FloatingNumber.GetValue();
                                      <[ $(val : double) ]>
      | Literal.Numeric as n        => def val = n.Numeric.GetValue();
                                      <[ $(val : int) ]>
      | Literal.String as n         => def val = n.GetText();
                                      <[ $(val : string) ]>
      | Literal.Boolean(Boolean = BaseParseTree.Boolean.True) => <[ $(true : bool) ]>
      | Literal.Boolean(Boolean = BaseParseTree.Boolean.False) => <[ $(false : bool) ]>
    }
    
    GetExpr(expr : MainParseTree.Expr) : PExpr
    {
      | Literal as l => GetLiteral(l.Literal)
      | Var as v     => def name = v.Identifier.GetText();
                        <[ $(name : usesite) ]>
      | FuncCall(NameData = (n, _), ParmsData = p) => 
           def parms = match (p)
           {
             | [BraceExpr(Exprs = e)] => e
             | lst                    => lst
           }
           def parms = parms.Map(GetExpr);
           //def path = if (n.Length > 1) n.ChopLast() else [];
           def path = n.Map(x => <[ $(x.GetText() : usesite) ]> );
           def path = match (path)
           {
             | [p] => p
             | lst => lst.Fold(null, (x, a) => if (a != null) <[ $a.$x ]> else x)
                      
           }
           <[ $path(..$parms)]>
      
      | MultiSetConstr(Expr1 = Literal(Literal = Literal.Numeric as i), Expr2 = e) => 
          def count = i.Numeric.GetValue();
          def expr = GetExpr(e);
          <[ $(count : int) ` $expr ]>
      | MultiSetConstr(Expr1 = i, Expr2 = e) => 
          def count = GetExpr(i);
          def expr  = GetExpr(e);
          <[ $count ` $expr ]>
      
      | SetUnion(Expr1 = left, Expr2 = right) => def left  = GetExpr(left);
                                                 def right = GetExpr(right);
                                                 <[ $left %++ $right ]>
      | SetDiff(Expr1 = left, Expr2 = right)  => def left  = GetExpr(left);
                                                 def right = GetExpr(right);
                                                 <[ $left %-- $right ]>
      | If(Cond = c, Then = t, Else = e)      => 
          def c = GetExpr(c);
          def t = GetExpr(t);
          def e = GetExpr(e);
          <[ if ($c) $t else $e]>
                
      | LowerDecl(LowerDecl = MainParseTree.LowerDecl.Val(Val = MainParseTree.Val(Name = name, TypeOptData = _t, Expr = l)) ) => 
      
               def name = name.IdentifierBodyData;
               def val = GetExpr(l);
               <[ def $(name : usesite) = $val]>
               
      | Equal(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) == $(GetExpr(right))]>
      | Plus(Expr1 = left, Expr2 = right)        => <[ $(GetExpr(left)) + $(GetExpr(right))]>
      | Minus(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) - $(GetExpr(right))]>
      | NotEqual(Expr1 = left, Expr2 = right)    => <[ $(GetExpr(left)) != $(GetExpr(right))]>
      | Above(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) > $(GetExpr(right))]>
      | Below(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) < $(GetExpr(right))]>
      | AboveEqual(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) >= $(GetExpr(right))]>
      | BelowEqual(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) <= $(GetExpr(right))]>
      | Append(Expr1 = left, Expr2 = right)      => <[ $(GetExpr(left)) + $(GetExpr(right))]>
      | Concat(Expr1 = left, Expr2 = right)      => <[ $(GetExpr(left)) + $(GetExpr(right))]>
      | ListCombine(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) :: $(GetExpr(right))]>
      | Multiply(Expr1 = left, Expr2 = right)    => <[ $(GetExpr(left)) * $(GetExpr(right))]>
      | BraceExpr(ExprsData = [])                => <[ () ]>
      | AtTime(Expr1 = left, Expr2 = right)      => <[ $(GetExpr(left)) %@ $(GetExpr(right)) ]>
      | Delay(Delay = MainParseTree.Delay.AddTime(Expr = e))
      | Delay(Delay = MainParseTree.Delay.AddTimeAlt(Expr = e))     => <[ @Delay($(GetExpr(e)))]>
      | DelayExpr(Expr = e, Delay = MainParseTree.Delay.AddTime(Expr = delay))
      | DelayExpr(Expr = e, Delay = MainParseTree.Delay.AddTimeAlt(Expr = delay))     => <[ $(GetExpr(e)) %@+ $(GetExpr(delay)) ]>
    }
    
    ConvertTree(tree : MainParseTree.LangExpr) : PExpr
    {
      | Decl(DeclarationsData = decls) => 
           
          def map_decls(x)
          {
            | MainParseTree.Declaration.Func(Name = n, TypeOpt = t, ParmsData = (p, _), Body = MainParseTree.ExprList(ExprsData = b)) => 
              def get_parm(p)
              {
                | <[ $(n : usesite)]>                 => <[parameter: $(n : usesite) ]>
                | <[ $(n : usesite)($(i : usesite))]> => <[parameter: $(i : usesite) : Index.[$(n : usesite)]]>
              }
        
              def parms = p.Map(x => x |> GetExpr |> get_parm);
              def n = n.GetText();
              def body = b.Map(GetExpr);
              <[
                def $(n : usesite)(..$parms)
                {
                  ..$body
                }
                
              ]>
          }
          
          match (decls.Map(map_decls))
          {
            | [e] => e
            | e   => <[ {..$e}]>
          }
          
      | Expr(Expr = e) => e |> GetExpr
      | ExprList(ExprList = MainParseTree.ExprList(ExprsData = b)) => 
          match (b.Map(GetExpr))
          {
            | [e] => e
            | e   => <[ {..$e} ]>
          }
          
    }
    
    public ParseML(text : string) : PExpr
    {
      if (string.IsNullOrWhiteSpace(text)) null else
      {
        def source = SourceSnapshot(text, file);
        def result = parserHost.Parse(source);//Main.StateMachine(source, parserHost);
        def ast = result.CreateParseTree();
        if (result.IsSuccess) 
        {
          match (ast)
          {
            | MainParseTree.LangExpr as a => ConvertTree(a);
            | _                           => null
          }

           
        } else 
        {
          def msg = msg.GetMessages();
          null
          //(null, msg.GetMessages().NToList())
        }
        //    def (line, col) = error.Location.StartLineColumn;
        //    WriteLine($<#$line:$col: $(error.Message)#>);
      }
    }
  }
}
