using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using CommonLib.Macros;
using System;
using System.Collections.Generic;
using System.Linq;
using Nitra;
using CpnML.Grammar;
using CpnML.Grammar.MainParseTree;

namespace PetriNetLib
{
  /// <summary>
  /// Description of Converter.
  /// </summary>
  class Converter
  {
    file : string;
    parserHost : ParseSession;
    msg : Nitra.ProjectSystem.CompilerMessageList;
    //host : CompilerHost = CompilerHost();
    
    public this()
    {
      msg = Nitra.ProjectSystem.CompilerMessageList();
      parserHost = ParseSession(Main.LangExpr, compilerMessages = msg);
    }
    
    GetNumeric(n : BaseParseTree.Numeric) : PExpr
    {
      def val = n.ValData;
      def min = n.MinusData;
      def val = if (val.StartsWith("0x")) 
                int.Parse(val.Substring(2), System.Globalization.NumberStyles.AllowHexSpecifier | System.Globalization.NumberStyles.HexNumber);
                else int.Parse(val);
      def val = if (min) -val else val;
      <[ $(val : int) ]>
  }
  
    GetLiteral(l : Literal) : PExpr
    {
      | Literal.FloatingNumber as n => def val = n.FloatingNumber.GetValue();
                                      <[ $(val : double) ]>
      | Literal.Numeric as n        => GetNumeric(n.Numeric)
                                       
      | Literal.String as n         => def val = n.GetText();
                                      <[ $(val : string) ]>
      | Literal.Boolean(Boolean = BaseParseTree.Boolean.True) => <[ $(true : bool) ]>
      | Literal.Boolean(Boolean = BaseParseTree.Boolean.False) => <[ $(false : bool) ]>
      | Literal.EmptyMultiSet => <[ empty() ]>
    }
    
    GetExpr(expr : MainParseTree.Expr) : PExpr
    {
      | Literal as l => GetLiteral(l.Literal)
      | Var as v     => def name = v.Identifier.GetText();
                        <[ $(name : usesite) ]>
      | FuncCall(NameData = (n, _), ParmsData = p)
      | BraceFunc(BraceFunc = MainParseTree.BraceFunc(NameData = (n, _), ParmsData = (p, _))) => 
           def parms = match (p)
           {
             | [BraceExpr(ExprsData = (e, _))] => e
             | lst                             => lst
           }
           def parms = parms.Map(GetExpr);
           //def path = if (n.Length > 1) n.ChopLast() else [];
           def path = n.Map(x => <[ $(x.GetText() : usesite) ]> );
           def path = match (path)
           {
             | [p] => p
             | lst => lst.Fold(null, (x, a) => if (a != null) <[ $a.$x ]> else x)
                      
           }
           <[ $path(..$parms)]>
           
      | MultiSetConstr(Literal = Literal.Numeric as i, Expr = e) => 
          def count = i |> GetLiteral;
          def expr = GetExpr(e);
          <[ $count ` $expr ]>
      //| MultiSetConstr(Expr1 = i, Expr2 = e) => 
      //    def count = GetExpr(i);
      //    def expr  = GetExpr(e);
      //    <[ $count ` $expr ]>
      
      | SetUnion(Expr1 = left, Expr2 = right) => def left  = GetExpr(left);
                                                 def right = GetExpr(right);
                                                 <[ $left %++ $right ]>
      | SetDiff(Expr1 = left, Expr2 = right)  => def left  = GetExpr(left);
                                                 def right = GetExpr(right);
                                                 <[ $left %-- $right ]>
      | If(Cond = c, Then = t, Else = e)      => 
          def c = GetExpr(c);
          def t = GetExpr(t);
          def e = GetExpr(e);
          <[ if ($c) $t else $e]>
                
      | LowerDecl(LowerDecl = MainParseTree.LowerDecl.Val(Val = MainParseTree.Val(Name = name, TypeOptData = _t, Expr = l)) ) => 
      
               def name = name.IdentifierBodyData;
               def val = GetExpr(l);
               <[ def $(name : usesite) = $val]>
               
      | Equal(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) == $(GetExpr(right))]>
      | Plus(Expr1 = left, Expr2 = right)        => <[ $(GetExpr(left)) + $(GetExpr(right))]>
      | Minus(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) - $(GetExpr(right))]>
      | NotEqual(Expr1 = left, Expr2 = right)    => <[ $(GetExpr(left)) != $(GetExpr(right))]>
      | Above(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) > $(GetExpr(right))]>
      | Below(Expr1 = left, Expr2 = right)       => <[ $(GetExpr(left)) < $(GetExpr(right))]>
      | AboveEqual(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) >= $(GetExpr(right))]>
      | BelowEqual(Expr1 = left, Expr2 = right)  => <[ $(GetExpr(left)) <= $(GetExpr(right))]>
      | Append(Expr1 = left, Expr2 = right)      => <[ $(GetExpr(left)) + $(GetExpr(right))]>
      | Concat(Expr1 = left, Expr2 = right)      => <[ $(GetExpr(left)) + $(GetExpr(right))]>
      | ListCombine(Expr1 = left, Expr2 = right) => <[ $(GetExpr(left)) :: $(GetExpr(right))]>
      | Multiply(Expr1 = left, Expr2 = right)    => <[ $(GetExpr(left)) * $(GetExpr(right))]>
      | BraceExpr(ExprsData = ([], _))                => <[ () ]>
      | BraceExpr(ExprsData = (e, _))                 => def e = e.Map(GetExpr);
                                                    <[ (..$e)]>
      | AtTime(Expr1 = left, Expr2 = right)      => <[ $(GetExpr(left)) %@ $(GetExpr(right)) ]>
      | Delay(Delay = MainParseTree.Delay.AddTime(Expr = e))
      | Delay(Delay = MainParseTree.Delay.AddTimeAlt(Expr = e))     => <[ @Delay($(GetExpr(e)))]>
      | DelayExpr(Expr = e, Delay = MainParseTree.Delay.AddTime(Expr = delay))
      | DelayExpr(Expr = e, Delay = MainParseTree.Delay.AddTimeAlt(Expr = delay))     => <[ $(GetExpr(e)) %@+ $(GetExpr(delay)) ]>
      | GlobAssign(Identifier = i, Expr = e) => def i = i.GetText();
                                                <[ $(i : usesite) = $(GetExpr(e)) ]>
      | RefContents(Identifier = i)          => def i = i.GetText();
                                                <[ $(i : usesite) ]>
      | AndAlso(Expr1 = e, Expr2 = e2) => <[ $(GetExpr(e)) && $(GetExpr(e2))]>
      | IntDiv(Expr1 = e, Expr2 = e2)  => <[ $(GetExpr(e)) / $(GetExpr(e2))]>
      | SharpOper(SharpIndex = i, Expr = e) => match (i)
                                               {
                                                 | SharpIndex.Identifier as i => 
                                                     def i = <[ $(i.Identifier.IdentifierBodyData : usesite) ]>;
                                                     <[ $(GetExpr(e)).$i]>
                                                 | SharpIndex.Numeric as n => 
                                                     def i = n.Numeric |> GetNumeric;
                                                     <[ $(GetExpr(e))[$i]]>
                                               }
      | List(ExprsData = (e, _))             => def e = e.Map(GetExpr);
                                                <[ [..$e] ]>
      | Record(ElemsData = (e, _))           => 
          def get_elem(e)
          {
            def n = e.Name.IdentifierBodyData;
            def e = e.Expr |> GetExpr;
            <[ $(n : usesite) = $e ]>
          }
          
          def e = e.Map(get_elem);
          <[ (..$e) ]>
    }
    
    GetType(t : TypeExpr) : PExpr
    {
      def t = t.GetText();
      <[ $(t : usesite) ]>
    }
    
    ConvertTree(tree : MainParseTree.LangExpr) : PExpr
    {
      | Decl(DeclarationsData = decls) => 
           
          def map_decls(x)
          {
            | MainParseTree.Declaration.Func(Name = n, TypeOpt = t, ParmsData = (p, _), Body = MainParseTree.ExprList(ExprsData = (b, _))) => 
              
              def get_parm(p)
              {
                | Parm.Normal(Name = n, TypeOptData = Some(t)) => def n = n.IdentifierBodyData;
                                                                  def t = GetType(t.TypeExpr);
                                                                  <[parameter: $(n : usesite) : $t]>
                | Parm.Normal(Name = n, TypeOptData = None())  => <[parameter: $(n.IdentifierBodyData : usesite) ]>
                | Parm.Index(Name = n, Index = i)              => <[parameter: $(i.IdentifierBodyData : usesite) : Index.[$(n.IdentifierBodyData : usesite)]]>
              }
        
              def parms = p.Map(get_parm);
              def n = n.GetText();
              def body = b.Map(GetExpr);
              <[
                def $(n : usesite)(..$parms)
                {
                  ..$body
                }
                
              ]>
             | Declaration.GlobRef(Name = n, Expr = e) 
             | Declaration.PageRef(Name = n, Expr = e)
             | Declaration.InstRef(Name = n, Expr = e) => 
                def n = n.GetText();
                def e = e |> GetExpr;
                <[ $(n : usesite) = $e ]>
          }
          
          match (decls.Map(map_decls))
          {
            | [e] => e
            | e   => <[ {..$e}]>
          }
          
      | Expr(Expr = e) => e |> GetExpr
      | ExprList(ExprList = MainParseTree.ExprList(ExprsData = (b, _))) => 
          match (b.Map(GetExpr))
          {
            | [e] => e
            | e   => <[ {..$e} ]>
          }
          
    }
    
    public ParseML(text : string) : option[PExpr]
    {
      if (string.IsNullOrWhiteSpace(text)) Some(<[]>) else
      {
        def source = SourceSnapshot(text, file);
        def result = parserHost.Parse(source);//Main.StateMachine(source, parserHost);
        def ast = result.CreateParseTree();
        if (result.IsSuccess) 
        {
          match (ast)
          {
            | MainParseTree.LangExpr as a => ConvertTree(a) |> Some
            | _                           => None()
          }           
        } else 
        {
          def msg = msg.GetMessages();
          None()
          //(null, msg.GetMessages().NToList())
        }
        //    def (line, col) = error.Location.StartLineColumn;
        //    WriteLine($<#$line:$col: $(error.Message)#>);
      }
    }
  }
}
