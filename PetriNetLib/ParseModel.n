using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetLib
{
  
  //[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Core", ".",     false, 285, 301)]
  [assembly: Nemerle.Internal.OperatorAttribute("PetriNetLib", "@",  false, 260, 261)]
  [assembly: Nemerle.Internal.OperatorAttribute("PetriNetLib", "`",  false, 240, 261)]
  [assembly: Nemerle.Internal.OperatorAttribute("PetriNetLib", "@+",  false, 260, 261)]

  [Record]
  public variant Colour
  {
    | List {type : string; with_range : option[int * int];}
    | Union { types : list[string * string]}
    | Product {tuple : list[string]}
    | Record {vals : list[string * string]}
    | Index {min : string; max : string;id : string}
    | SubsetBy { name : string; by : string}
    | SubsetWith { name : string; with_list : list[string]}
    | Enum {vals : list[string]}
    | Unit {with_new_name : option[string]}
    | Bool {with_new : option[string * string]}
    | Integer {with_range : option[string * string]}
    | Simple {type : string}
    | Alias {name : string}
    | String { str_with : char * char; str_and : option[char * char];} 
    | Timed {col : Colour}
    //| Queue {type : Colour}
    //| Sorted {type : Colour}
    
    public IsComplex : bool
    {
      [Memoize]
      get
      {
        match (this)
        {
          | Union
          | Record
          | Index
          | Unit
          | Alias  => true
          | _      => false
        }
      }
    }
    
  }
  
  [Record]
  public variant CpnDecl
  {
    | ML {str : string;}
    | Var {id : string; type : string;}
    | GlobRef {id : string; val : string;}
    | ColourSet
    {
      name : string;
      type : Colour;
    }
  }
  
  public enum Dir 
  {
    | P2T
    | T2P
    | Both
    | Reset
    | Inhibitor
  }
  
  public enum PortType
  {
    | In
    | Out
  }
  
  [Record]
  public variant CpnTree
  {
    | Declaration {decl : list[CpnDecl]}
    | Place       {name : string; id : string; type : string; init_mark : string; port : option[PortType]}
    | Transition  {name : string; id : string;guard : option[string];time : option[string];code : option[string]}
    | Arc         {text : string;from : string; to : string;type : Dir;}
  }
}
