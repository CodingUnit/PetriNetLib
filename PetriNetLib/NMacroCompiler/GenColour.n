using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetLib
{
  /// <summary>
  /// Description of GenColour.
  /// </summary>
  [Record]
  class GenColour
  {
    [Accessor]
    colour : ColourSet;
    gen : Generator;

    public type : Colour
    {
      [Memoize]
      get
      {
        colour.type
      }
    }

    name : string
    {
      [Memoize]
      get
      {
        colour.name
      }
    }
    
    public Name : string
    {
      [Memoize]
      get
      {
        match (name.IndexOf("__"))
        {
          | -1 => name
          | i  => name.Substring(i + 2)
        }
        //def splitted = colour.name.Split('_').Filter(x => !Opts.Contains(x));
        //string.Join("_", splitted)
      }
    }

    public IsComplexType : bool
    { 
      [Memoize]
      get
      {
        def loop(t)
        {
          def loop2(t2)
          {
            | Colour.Timed(t) => loop2(t)
            | Colour.Union
            | Colour.String
            | Colour.Record
            | Colour.Product
            | Colour.List     => true
            | Colour.Alias(t) => loop(t)
            | _               => false
          }

          match (t)
          {
            | "time"
            | "TIME"
            | "real"
            | "REAL"
            | "BOOL"
            | "bool"
            | "USHORT"
            | "SHORT"
            | "BYTE"
            | "int"    => false
            | _        => loop2(gen.Model.colour_sets[t].type)
          }

        }

        loop(Name)
      }
    }

    public Opts : list[string]
    {
      [Memoize]
      get
      {
        def name = colour.name.Split(array["__"], StringSplitOptions.RemoveEmptyEntries);
        if (name.Length == 1) [] else
        {
          def name = name.First();
          name.Split('_').NToList()
        }
      }
    }

    public Req : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "REQ")
      }
    }

    public ZeroSingle : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "ZEROSINGLE") 
      }
    }
    
    public MinusSingle : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "MINUSSINGLE") 
      }
    }
    
    public Push : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "PUSH") 
      }
    }
    
    public Cached : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "CACHED")
      }
    }

    public Var : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "VAR")
      }
    }

    public Single : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "SINGLE")
      }
    }

    public Queue : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "QUEUE")
      }
    }

    public Sorted : bool
    {
      [Memoize]
      get
      {
        Opts.Exists(_ == "SORTED")
      }
    }
    //public static TypeFromStr(str : string, gen : CppGenerator) : string
    //{
    //  match (str)
    //  {
    //    | "string" => "char *"//cpp("type: char *")
    //    | "int"    => "int"//cpp("type: int")
    //    | "intinf" => "long long"//cpp("type: int")
    //    | "real"   => "float"//cpp("type: float")
    //    | "time"   => "int"//cpp("type: int")
    //    | "bool"   => "bool"//cpp("type: bool")
    //    | "unit"   => "char"//cpp("type: Unit")
    //    | str      => (gen.Proc.colour_sets[str] |> GenColour(_, gen)).DestType//GetTypeExpr
    //  }
    //}

    //public ParmType : string
    //{
    //  [Memoize]
    //  get
    //  {
    //    def type = match (DestType)
    //              {
    //                | x when x.StartsWith("bytes") => "bytes"
    //                | x                            => x
    //              }
    //    if (IsComplexType) 
    //    {
    //      $<#const $type &#> 
    //    } else $<#$type #>;
    //  }
    //}
    
    
    public DestType : PExpr
    {
      [Memoize]
      get
      {
        def get_type(c)
        {
          | Colour.Integer =>
              match (Name)
              {
                | "SBYTE"  => <[sbyte]>
                | "BYTE"   => <[ byte ]>
                | "SHORT"  => <[ short ]>
                | "INT"    => <[ int ]>
                | "UINT"   => <[ uint ]>
                | "USHORT" => <[ ushort]>
                | _        => throw InvalidOperationException();
              }

          | Colour.Alias(type)
          | Colour.Simple(type) => 
              match (type)
              {
                | "string" => <[ string ]>
                | "INT"    => <[ int ]>
                | "int"    => <[ int ]>
                | "intinf" => <[ IntInf ]>
                | "real"   => <[ double ]>
                | "time"   => <[ long ]>
                | "bool"   => <[ bool ]>
                | "unit"   => <[ bool ]>
                | "SBYTE"  => <[ sbyte ]>
                | "BYTE"   => <[ byte ]>
                | "SHORT"  => <[ short ]>
                | "UINT"   => <[ uint ]>
                | "USHORT" => <[ ushort ]>
                | str      => get_type(gen.Proc.colour_sets[str].type)
              }
          | Unit(None())  => <[bool]>//cpp("type: Unit")
          | Unit(Some(t)) => <[ $(t : usesite) ]>//cpp("type: $t")
      //| Product(vals) => def vals = vals.Map(TypeFromStr);
      //                  $<#type: tuple2<..$vals>#>//cpp(<#type: tuple2<..$vals>#>)
          | List(t, _r)    => def inner = gen.Colours[t].DestType;
                             <[ list[$inner]]>
          | Timed(p) => p |> get_type
          | _        => <[ $(Name : usesite) ]>//cpp("type: $n")
                        //cpp("type: $(inner : type) *")

        }

        get_type(type)
      }
    }

    //FinalType(str : string) : string
    //{
    //  match (str.Trim())
    //  {
    //    | "BYTES" => "bytesn"
    //    | t       => t
    //  }
    //}
  }
}
