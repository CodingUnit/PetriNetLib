using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using PetriNetModel;

namespace PetriNetLib
{
  /// <summary>
  /// Description of GenImpl.
  /// </summary>
  partial class Generator
  {
    [Accessor]
    model       : OutModel;
    [Accessor]
    proc        : PetriNetProcessor;
    converter   : Converter;
    typer       : Typer;
    typebuilder : TypeBuilder;
    places      : array[GenPlace];
    [Accessor]
    colours     : Hashtable[string, GenColour] = Hashtable();
    
    public TypingMethod : MethodBuilder
    {
      [Memoize]
      get
      {
        def meth = typebuilder.DefineAndReturn(<[decl: TypingMethod() : void {}]>);
        meth :> MethodBuilder
      }
    }
    //compiler : CompilerHost = CompilerHost();
    mutable cons_expr : list[PExpr] = [];
    mutable fields    : list[ClassMember] = [];
    mutable init_body : list[PExpr] = [];
    
    public this(model : OutModel, proc : PetriNetProcessor)
    {
      this.typer = proc.Typer;
      this.typebuilder = proc.Typebuilder;
      
      this.model = model;
      this.proc = proc;
      this.converter = proc.Converter;
      this.places = model.places.Map(GenPlace(_, this));
      
    }
    
    //GetTypeExpr(p : Colour) : PExpr
    //{      
    //  | Colour.Alias(n)     => <[ $(n : usesite) ]>
    //  | Colour.Simple(type) => 
    //          match (type)
    //          {
    //            | "string" => <[ string ]>
    //            | "int"    => <[ int ]>
    //            | "intinf" => <[ IntInf ]>
    //            | "real"   => <[ double ]>
    //            | "time"   => <[ long ]>
    //            | "bool"   => <[ bool ]>
    //          }
    //    | Integer       => <[ int ]>
    //    | Unit(None())  => <[ Unit ]>
    //    | Unit(Some(t)) => <[ $(t : usesite) ]>
    //    | Product(vals) => def vals = vals.Map(x => <[ $(TypeFromStr(x)) ]>);
    //                       <[ @*(..$vals) ]>
    //    | List(t, _)    => def inner = t |> TypeFromStr;
    //                                     <[ list[$inner]]>
    //}

    /*
    GetTypeExpr(p : ColourSet) : PExpr
    {
        | ColourSet(n, Alias(n2))    => def col = model.colour_sets[n2].type;
                                        if (col.IsComplex) <[ $(n : usesite) ]>
                                        else
                                        {
                                          GetTypeExpr(col)
                                        }
                                        
        | ColourSet(n, Index)
        | ColourSet(n, Record)
        | ColourSet(n, Enum)          => <[ $(n : usesite) ]>
        | ColourSet(_, Timed(p))
        | ColourSet(_, p)             => GetTypeExpr(p)
    }*/
      
    //TypeFromStr(str : string) : PExpr
    //{
    //  | "string" => <[ string ]>
    //  | "int"    => <[ int ]>
    //  | "intinf" => <[ IntInf ]>
    //  | "real"   => <[ double ]>
    //  | "time"   => <[ long ]>
    //  | "bool"   => <[ bool ]>
    //  | "unit"   => <[ Unit ]>
    //  | str      => proc.colour_sets[str] |> GetTypeExpr
      
    //}
    
    //IsTokenExpr(expr : PExpr) : bool
    //{
    //  | <[ $(_ : usesite) ]> => false
    //  | _                    => true
    //}
    
    //CreateDummyMethod() : void
    //{
    //  def meth = typebuilder.DefineAndReturn(<[decl: TypingMethod() : void {}]>);
    //  typing_method = meth :> MethodBuilder;
    //}
    
    
    
    
    
  }
}
