namespace Cpp.Grammar
{
  syntax module Base
  {
    using Nitra.Core;
    using Nitra;
    using Nitra.CStyleComments;
    

    
	  extend token IgnoreToken
    {
     | [SplitAtCompletionPosition] SpaceToken = Spaces;
     | MultiLineComment = "(*" (!"*)" Any)* "*)";
    }

    /*extend token IgnoreToken
    {
      //| [SpanClass(Comment)] SingleLineComment = SingleLineComment;
      
    }*/

		token String = '"' (!'"' Any)* '"';

    [SpanClass(Number)]
    token FloatingNumber = Minus="~"? Val=Number
    {
      token Number = Integer Fraction? Exponent?;
      regex Digits   = ['0'..'9']+;
      regex Fraction = "." Digits;
      regex Exponent = ("E" | "e") ("-" | "+")? Digits;

      GetValue() : double 
      {
        def val = double.Parse(Val.GetText());
        if (Minus.HasValue) -val else val
      }
    }

  token Boolean
  {
    | True  = "true"
    | False = "false"
  }    

  //regex Any = ['\u0000'..'\uFFFF'];

  //[StartRule, ExplicitSpaces]
  //syntax CompilationUnit = s Expression !Any;

  /////////////////////////////////////////////////////////
  // Spacing

  regex NewLineCharacter  = '\n' | '\r' | '\u2028' /*  line separator */ | '\u2029' /*  paragraph separator */;
  regex NewLine  = "\r\n" | NewLineCharacter;
  regex Whitespace = [Zs] | '\t' | '\v' | '\f' | '\uFEFF' | '\u0000';
  regex Space = Whitespace | NewLine;
  regex Spaces = Space+;

  //void s   = Spaces*;                     // optional spacer
  //void S   = !IdentifierPartCharacters s; // identifier break spacer

  keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

  regex KeywordToken =   "struct" | "class" | "case" | "switch" | "if" | "union";

  //alias Name                = Identifier;
  alias QualifiedName       = QualifiedIdentifier;
  alias Char                = Any;
  alias Comma               = ","?;

  // Spacing
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Identifiers

  //[ExplicitSpaces, SuppressTrailingSpaces]
  token Identifier           = !Keyword IdentifierBody//s
  {
    token Keyword = KeywordToken !IdentifierPartCharacters;
  }

  token QualifiedIdentifier  = (Identifier; "::")+;

  regex LetterCharacter           = [Lu, Ll, Lt, Lm, Lo, Nl];//['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я', 'і'];//
  regex CombiningCharacter        = [Mn, Mc];
  regex DecimalDigitCharacter     = [Nd];
  regex ConnectingCharacter       = [Pc];
  regex FormattingCharacter       = [Cf];

  regex IdentifierStartCharacter  = LetterCharacter | "_";
  regex IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
  regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;

  // Identifiers
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Literals

  regex DecimalDigit                        = ['0'..'9'];
  regex HexDigit                            = ['0'..'9', 'a'..'f', 'A'..'F'];
  regex IntegerTypeSuffixTerminal           = ('U' | 'u') ('l' | 'L')? | ('l' | 'L') ('U' | 'u')?;
  regex IntegerTypeSuffix                   = IntegerTypeSuffixTerminal; // "UL" | "ul" | "uL" | "Ul" | "LU" | "lu" | "Lu" | "lU" | "U" | "u" | "L" | "l";
  regex DecimalIntegerLiteral               = DecimalDigit+ IntegerTypeSuffix?;
  regex HexadecimalIntegerLiteral           = ("0x" | "0X") HexDigit+ IntegerTypeSuffix?;
  regex Integer                             = HexadecimalIntegerLiteral | DecimalIntegerLiteral;

  }
}
