language Cplusplus
{
  syntax module Cpp.Grammar.CppGrammar start rule CompilationUnit;
  //syntax module Nemerle.Statechart.Grammar.Actions;
  //syntax module Nemerle.Statechart.Grammar.Base;
  //syntax module Nemerle.Statechart.Grammar.Events;
  //syntax module Nemerle.Statechart.Grammar.PseudoStates;
  //syntax module Nemerle.Statechart.Grammar.Regions;
  //syntax module Nemerle.Statechart.Grammar.Targets;
  //syntax module Nemerle.Statechart.Grammar.Transitions;
}

namespace Cpp.Grammar
{

using Nitra;
using Nitra.Core;
using Base;

syntax module CppGrammar
{

  ////////////////////////////////////////////////////////////////////////////////////
  // Type

  /*syntax Type
  {
    | QualifiedTypeName = QualifiedName;

    precedence FunctionType:
    | FunctionType      = Type ^ FunctionType "(" (Type; ",")* ")";
  }*/

  ////////////////////////////////////////////////////////////////////////////////////
  // Expressions
  syntax Constant
  {
    | Int = Integer
    | Float = FloatingNumber
    | String = String
  }

  syntax BinaryOperator
  {
    | Mul = Expression '*' Expression
    | Div = Expression '/' Expression
    | Add = Expression '+' Expression
    | Sub = Expression '-' Expression
    | Mod = Expression '%' Expression
    | LogicAnd = Expression "&&" Expression
    | LogicOr = Expression "||" Expression
    | Xor = Expression '^' Expression
    | And = Expression '^' Expression
    | Or  = Expression '|' Expression
    | LShift = Expression "<<" Expression
    | RShift = Expression ">>" Expression
    | CondOper = Expression '?' Expression ':' Expression
    | Assign  = Expression '=' Expression
    | AddAssign = Expression "+=" Expression
    | SubAssign = Expression "-=" Expression
    | MulAssign = Expression "*=" Expression
    | DivAssign = Expression "/=" Expression
    | ModAssign = Expression "%=" Expression
    | AndAssign = Expression "&=" Expression
    | OrAssign = Expression "|=" Expression
    | XorAssign = Expression "^=" Expression
    | LShiftAssign = Expression "<<=" Expression
    | RShiftAssign = Expression ">>=" Expression
    | Equal = Expression "==" Expression
    | NotEqual = Expression "!=" Expression
    | Greater = Expression ">" Expression
    | Lower = Expression "<" Expression
    | GreaterEqual = Expression ">=" Expression
    | LowerEqual = Expression "<=" Expression
    | ArrayIndex = Expression "[" Expression "]"
    | MemberPointerAccess = Expression "->" Expression
    | MemberAccess = Expression "." Expression
    | SeqOp = Expression "," Expression
precedence Invocation:
    | CallFunc = Expression ^ Invocation "(" (Expression;",")* ")"// a(...)
    | TypeConv = "(" Type ")" Expression// (type)expr
  }

  syntax UnaryOperator
  {
  }

  syntax Expression
  {
    //| Compound = (Expression;",")+
    | Id = Name
    | Constant
    | UnaryOperator
    | BinaryOperator    
  }

  syntax Modifier
  {
    | Public    = "public"
    | Private   = "private"
    | Protected = "protected"
  }

  syntax Specifier
  {
    | Typedef  = "typedef"
    | Auto     = "auto"
    | Register = "register"
    | Static   = "static"
    | Extern   = "extern"
    | Const    = "const"
    | Volatile = "volatile"
    //| Restrict 
    | Inline   = "inline"
    | Noreturn = "noreturn"
    | Virtual  = "virtual"
  }

  syntax Type
  {
    | Void  = "void"
    | Short = "short"
    | Char  = "char"
    | Int   = "int"
    | Long  = "long"
    | UnsignedType = "unsigned" sm Type
    | SignedType = "signed" sm Type
    | NameClass
  }

  syntax Template = "<" (Type;",")* ">";

  syntax Statement
  {
    //| Compound = Statement+
    //| Splicable = Splicable ';'
    | BraceStatement = "{" Statement* "}"
    | Null = ";"
    | Decl
    | Expression = Expression ';'
    | Return = "return" Expression? ";"
    | Break = "break" ";"
    | Continue = "continue" ";"
    | Goto = "goto" Name
    | Label = Name ":" Statement
    | Switch = "switch" "(" Expression ")" "{" SwitchCase* "}"
    {
      syntax SwitchCase
      {
        | Default = "default:" Statement
        | Case    = "case" ConstExpr ":" Statement
      }
    }
    | If = "if" "(" Cond=Expression ")" Body=Statement Else?
    {
      syntax Else = "else" Statement;
    }
  }

  syntax Init = '=' ConstExpr;

  syntax Decl = Specifier* sm Type sm Decls=TreeDecl+ Init? ';'
  {
    
  }

  syntax ConstExpr
  {
    | Int  = Integer
    | Enum = Identifier
    | Oper = ReadOnlyOper
    | Splicable
  }

  syntax ReadOnlyOper
  {
    | Not    = "!" Expr=ConstExpr
    | Invert = "~" Expr=ConstExpr
    | Plus   = "+" Expr=ConstExpr
    | Minus  = "-" Expr=ConstExpr
    | Sizeof = "sizeof" "(" Expr=ConstExpr ")"
    | BinaryOper
  }

  syntax Parm = Type Name Init?;

  syntax Parms
  {
    | ParmList = Parm+
    | Splicable
    | SplicableList
  }
  syntax BinaryOper
  {
  }

  syntax TreeDecl
  {
	  | Id       = Name
	  | Pointer  = '*' Name
	  | Array    = Name '[' Size=Integer? ']'
	  | FuncDecl = Specifier? sm Name '(' Parms=Parm* ')'
	  {
		  syntax Parm = Type Name?;
	  }
	  //| Func
  }

  syntax InitConstExpr
  {
  }

  syntax Qualifier
  {
	  | Const = "const"
  }

  syntax SplicableList = "..$" Name=Identifier;

  syntax Splicable = "$" Name=Identifier;

  syntax SplicableMembers = SplicableList ';';
  syntax SplicableMember = Splicable ';';

  syntax TypeDecl
  {
	  | StructDecl
    | ClassDecl
    | Enum
	  | Decl
	  | Modifier = Modifier ':'
	  | Constructor = Name '(' Parms? ')' nl '{' nl Body=Statement* nl '}'
	  | Destructor = '~' Name '(' ')' nl '{' nl Body=Statement* nl '}'
	  | AssignmentOp = RetType=Type sm "operator" "=" '(' Parms? ')' sm Qualifier? nl '{' nl Body=Statement* nl '}' 
    | Method = Specifier? sm RetType=Type sm Name '(' Parms? ')' sm Qualifier? nl '{' nl Body=Statement* nl '}' 
    | SplicableMembers
    | SplicableMember
  }

  syntax StructTypeDecl
  {
	  | StructDecl
	  | Decl
    | SplicableMembers
    | SplicableMember
  }

  syntax StructDecl = "struct" sm Name nl '{' i Body=StructTypeDecl* d nl '}' ';';

  syntax ClassDecl = "class" sm Name sm Base? nl '{' i Body=TypeDecl* d nl '}' ';'
  {
      syntax Base = ':' sm Modifier sm BaseClass=NameClass;
  }

  syntax Enum = "enum" sm Name nl "{" i (EnumDecl;",")* d nl "}" ";";

  syntax NameClass = Name Template?;

  syntax Name
  {
    | Id                 = Identifier
    | Qualified          = QualifiedIdentifier
    | SplicableList
    | Splicable
    | SplicableType      = "$" "(" Name=Identifier ":" "type" ")" 
	  | SplicableQualified = '$' '(' Name=QualifiedIdentifier ')'
  }


  syntax Func = Specifier? sm RetType=Type sm Name=Identifier '(' Parms=Parm* ')' nl '{' nl Body=Statement* nl '}';
//RetType = CType; name : CName; parms : list[CType]; body : CStatement}
  syntax QuotDecl
  {
    | TypeDecl
    //| Func
  }

  syntax QuotType = "type:" QType
  {
    syntax QType
    {
      | Type
      | TypePtr = Specifier? Type "*"
    }
  }

  syntax EnumDecl 
  {
    | SplicableMember = "$" Name=Identifier sm Value? ";"?
      {
        syntax Value
        {
          | Literal   = "=" ConstExpr
          | Splicable = "=" Name=Identifier
        }
      }
    | SplicableMembers = "..$" Name=Identifier ";"?
    | Option = Name Value?
      { 
          syntax Value = "=" ConstExpr;
      }
  }

  [StartRule]
  syntax CompilationUnit = Declaration* !Any;

  syntax Declaration
  {
    | QuotDecl = "decl:" QuotDecl
    | QuotExpr = "expr:" Statement*
    | QuotEnum = "enumdecl:" EnumDecl
    | QuotType 
    | Namespace = "namespace" sm Name nl '{' Declaration* nl '}'
    | TypeDecl
    | Func
    | StructDecl
    | ClassDecl
    | Enum
    | Decl
    | SplicableMembers
    | SplicableMember
  }
}

}