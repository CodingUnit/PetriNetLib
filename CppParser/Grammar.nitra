language CPNML
{
  syntax module Cpp.Grammar.CppGrammar start rule Declaration;
  //syntax module Nemerle.Statechart.Grammar.Actions;
  //syntax module Nemerle.Statechart.Grammar.Base;
  //syntax module Nemerle.Statechart.Grammar.Events;
  //syntax module Nemerle.Statechart.Grammar.PseudoStates;
  //syntax module Nemerle.Statechart.Grammar.Regions;
  //syntax module Nemerle.Statechart.Grammar.Targets;
  //syntax module Nemerle.Statechart.Grammar.Transitions;
}

namespace Cpp.Grammar
{

 //using Nitra;

syntax module CppGrammar
{
  literal Less                = "<";
  literal Greater             = ">";
  literal OpenBrace           = "(";
  literal CloseBrace          = ")";
  literal OpenBrace           = "{";
  literal CloseBrace          = "}";
  literal OpenSquareBrace     = "[";
  literal CloseSquareBrace    = "]";
  literal SingleQuote         = "\'";
  literal Quote               = "\"";
  literal Semicolon           = ";";
  literal Comma               = ",";
  literal Dot                 = ".";
  literal Colon               = ":";
  literal Question            = "?";
  literal At                  = "@";
  literal AliasSeparator      = "::";
  literal Assign              = "=";
  literal Prefix              = "\\u";
  literal DodDot              = "..";
  literal Op                  = "=>", "=", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=", "??",
                                "||", "&&", "|", "^", "&", "==", "!=", "<=", ">=", "<<", ">>", "+", "-", "!", "~", "++", "--", "*", "/", "%", "->";
  literal Backslash           = "\\";
  literal Epsilon             = "";

  regex Any = ['\u0000'..'\uFFFF'];

  [StartRule, ExplicitSpaces]
  syntax CompilationUnit = s Expression !Any;

  /////////////////////////////////////////////////////////
  // Spacing

  regex NewLineCharacter  = '\n' | '\r' | '\u2028' /*  line separator */ | '\u2029' /*  paragraph separator */;
  regex NewLine  = "\r\n" | NewLineCharacter;
  regex Whitespace = [Zs] | '\t' | '\v' | '\f' | '\uFEFF' | '\u0000';
  regex Space = Whitespace | NewLine;
  regex Spaces = Space+;

  void s   = Spaces*;                     // optional spacer
  void S   = !IdentifierPartCharacters s; // identifier break spacer

  marker i;     // increase a indent
  marker d;     // decrease a indent
  marker nl;    // optional spacer and plase for \n while pretty printing
  marker inl;   // i + nl
  marker sm;    // optional spacer and prefer to print space while pretty printing

  keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

  alias Name                = Identifier;
  alias QualifiedName       = QualifiedIdentifier;
  alias Char                = Any;
  alias Comma               = ","?;

  // Spacing
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Identifiers

  [ExplicitSpaces, SuppressTrailingSpaces]
  syntax Identifier           = IdentifierBody s;
  syntax QualifiedIdentifier  = (Identifier; "::")+;

  regex LetterCharacter           = [Lu, Ll, Lt, Lm, Lo, Nl];//['A'..'Z', 'a'..'z', 'а'..'я', 'А'..'Я', 'і'];//
  regex CombiningCharacter        = [Mn, Mc];
  regex DecimalDigitCharacter     = [Nd];
  regex ConnectingCharacter       = [Pc];
  regex FormattingCharacter       = [Cf];

  regex IdentifierStartCharacter  = LetterCharacter | "_";
  regex IdentifierPartCharacters  = LetterCharacter | DecimalDigitCharacter | ConnectingCharacter | CombiningCharacter | FormattingCharacter;
  regex IdentifierBody            = IdentifierStartCharacter IdentifierPartCharacters*;

  // Identifiers
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  // Literals

  regex DecimalDigit                        = ['0'..'9'];
  regex HexDigit                            = ['0'..'9', 'a'..'f', 'A'..'F'];
  regex IntegerTypeSuffixTerminal           = ('U' | 'u') ('l' | 'L')? | ('l' | 'L') ('U' | 'u')?;
  regex IntegerTypeSuffix                   = IntegerTypeSuffixTerminal; // "UL" | "ul" | "uL" | "Ul" | "LU" | "lu" | "Lu" | "lU" | "U" | "u" | "L" | "l";
  regex DecimalIntegerLiteral               = DecimalDigit+ IntegerTypeSuffix?;
  regex HexadecimalIntegerLiteral           = ("0x" | "0X") HexDigit+ IntegerTypeSuffix?;
  regex IntegerLiteral                      = HexadecimalIntegerLiteral | DecimalIntegerLiteral;

  ////////////////////////////////////////////////////////////////////////////////////
  // Type

  /*syntax Type
  {
    | QualifiedTypeName = QualifiedName;

    precedence FunctionType:
    | FunctionType      = Type ^ FunctionType "(" (Type; ",")* ")";
  }*/

  ////////////////////////////////////////////////////////////////////////////////////
  // Expressions

  syntax Expression
  {
    | IdentifierExpression             = QualifiedName;
    | IntegerLiteralExpression         = IntegerLiteral;

    | QualifiedNameExpression          = QualifiedName; // simple-name || member-access
    | ParenthesizedExpression          = "(" Expression ")"; // parenthesized-expression
    | Cast                             = "(" Type ")" Expression;

    precedence Invocation:
    | Invocation                       = Expression ^ Invocation "(" (Expression; ",")* ")";
  }

  syntax Modifier
  {
    | Public    = "public"
    | Private   = "private"
    | Protected = "protected"
  }

  syntax Specifier
  {
  }

  syntax Type
  {
    | Void  = "void"
    | Short = "short"
    | Char  = "char"
    | UnsignedChar = "unsigned" sm "char"
    | Named = IdentifierBody
  }

  syntax Statement
  {
  }

  syntax TypeDecl
  {
    | ClassDecl
    | Method = Specifier RetType=Type Name=Identifier '(' Parms=Type* ')' sm Qualifier? nl '{' nl Body=Statement* nl '}' 
    {
      syntax Qualifier
      {
       | Const = "const"
      }
    }
  }

  syntax ClassDecl = "class" sm Name=Identifier sm Base? nl '{' i Body=TypeDecl* d nl '}'
  {
      syntax Base = ':' sm Modifier sm BaseClass=QualifiedName;
  }

  syntax Declaration
  {
    | Decl = "decl:" ClassDecl
  }
}

}