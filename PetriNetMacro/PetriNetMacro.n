using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using PetriNetLib;
using PetriNetModel;
using Nemerle.Compiler.Parsetree;

namespace PetriNetLib
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro PetriNet(ty : TypeBuilder, body : PExpr, params other : array[PExpr])
  {
     Helper.ParseAndGenerate1(ty, Macros.ImplicitCTX(), body, other);
  }
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro PetriNet(ty : TypeBuilder, body : PExpr, params other : array[PExpr])
  {
     Helper.ParseAndGenerate2(ty, Macros.ImplicitCTX(), body, other);
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro PetriNet(ty : TypeBuilder, body : PExpr, params other : array[PExpr])
  {
     Helper.ParseAndGenerate(ty, Macros.ImplicitCTX(), body, other);
  }
  
  class Helper
  {
    public static ParseAndGenerate1(ty : TypeBuilder, typer : Typer, expr : PExpr, other : array[PExpr]) : void
    {
      //Macros.DefineCTX(typer);
      //assert2(false);
      def net = PetriNetLib.Compiler();
      mutable page = null;
      mutable target = None();
            
      def get_opts(o)
      {
        | <[ debug ]>          => assert2(false);
        | <[ c++ ]>            => target = Some(TargetLangType.Cpp);
        | <[ $(n : usesite) ]> => page = n
        | _                    => ()
     }
      
      match (expr)
      {
        | <[$(str : string)]> => foreach (o in other) get_opts(o);
                                 def tar = if (target is Some(t)) t else TargetLangType.Cpp;
                                 net.Process(ty, MainProcessorv1(), typer, str, page, tar)
        | _                   => ()
      }
      
    }
    
    public static ParseAndGenerate(ty : TypeBuilder, _typer : Typer, _expr : PExpr, _other : array[PExpr]) : void
    {
      //Macros.DefineCTX(typer);
      //assert2(false);
      //def b = <[ a + 1 ]>;
      //    def expr1 = <[
      //      //def $(n : usesite)(..$parms)
      //      {
      //        def a = 2;
      //        a + 1
      //      }
      //    ]>;
      //def expr1 = typer.TypeExpr(expr1);
      def gen = ty.UserData["PetriNetGen"] :> PetriNetLib.Compiler;
      gen.MainGen();
    }
    
    public static ParseAndGenerate2(ty : TypeBuilder, _typer : Typer, _expr : PExpr, _other : array[PExpr]) : void
    {
      //Macros.DefineCTX(typer);
      //assert2(false);
      def gen = ty.UserData["PetriNetGen"] :> PetriNetLib.Compiler;
      gen.PhaseTwo();
      //def b = <[ a + 1 ]>;
      //    def expr1 = <[
      //      //def $(n : usesite)(..$parms)
      //      {
      //        def a = 2;
      //        a + 1
      //      }
      //    ]>;
      //def expr1 = typer.TypeExpr(expr1);
      
    }
  }
}
