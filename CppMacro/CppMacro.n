using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using CppParserPrinter;

namespace CppMacro
{
  public macro CppMacro(expr) syntax("cpp", "(", expr, ")")
  {
    CppMacroUtil.Process(expr)
  }
  
  module CppMacroUtil
  {
    Lift(tree : CTree) : PExpr
    {
      | CTree.Quotation(q) =>
         match (q)
         {
           | CQuotation.EnumDecl(t) => Lift(t)
           | CQuotation.Type(t)     => Lift(t)
           | CQuotation.TypeDecl(t) => Lift(t)
         }
      | CTree.Type(c) => <[ CTree.Type($(Lift(c)))]>
      | CTree.Decl(s, t, d) => 
          def spec = s.Map(Lift);
          def decls = d.Map(Lift);
          <[ CTree.Decl([..$spec], $(Lift(t)), [..$decls]) ]>
    }
    
    Lift(spec : CSpec) : PExpr
    {
      | CSpec.Typedef => <[ CSpec.Typedef() ]>
      | CSpec.Const   => <[ CSpec.Const() ]>
      | CSpec.None    => <[ CSpec.None() ]>
    }
    
    Lift(tree : CConstExpr) : PExpr
    {
      <[]>
    }
    
    Lift(tree : list[CEnumDecl]) : PExpr
    {
      | [CEnumDecl.SplicableMembers(m)] => <[ $(m : usesite)]>
      | d => def decls = d.Map(Lift);
             <[ [..$decls] ]>
    }
    
    Lift(tree : CSplicableVal) : PExpr
    {
      | CSplicableVal.Splicable(m) => <[ $(m : usesite)]>
      | CSplicableVal.Value(c)     => Lift(c)
    }
    
    Lift(tree : CEnumDecl) : PExpr
    {
      | CEnumDecl.SplicableMember(m, v) => 
          def val = v.Map(Lift) |> Lift;
          <[ CEnumDecl.Option(CName.String($(m : usesite)), $val)]>
      | CEnumDecl.SplicableMembers(m) => <[ $(m : usesite) ]>
      | CEnumDecl.Option(n, d) =>
          def val = d.Map(Lift) |> Lift;
          <[ CEnumDecl.Option($(Lift(n)), $val)]>
    }
    
    Lift(tree : CComplexType) : PExpr
    {
      def name = tree.name.Map(Lift) |> Lift;
      match (tree)
      {
        | CComplexType.Enum(s) => 
            <[ CComplexType.Enum($name, $(Lift(s)))]>
        | CComplexType.Struct(d) => 
            <[ CComplexType.Struct($name, $(Lift(d))) ]>
        | CComplexType.Class(b, d) => 
            def bas = b.Map((m, n) => <[ ($(Lift(m)), $(Lift(n))) ]>);
            <[ CComplexType.Class($name, [..$bas], $(Lift(d))) ]>
      }
    }
    
    Lift(name : CClassName) : PExpr
    {
      def template = name.template_parms.Map(Lift);
      <[ CClassName($(Lift(name.name)), [..$template])]>
    }
    
    Lift(name : CName) : PExpr
    {
      | CName.String(s)        => <[ CName.String($(s : string))]>
      | CName.Splicable(s)     => <[ CName.String($(s : usesite)) ]>
      | CName.SplicableType(s) => <[ $(s : usesite) ]>
      //| CName.SplicableList(s) => <[]>
    }

    Lift(parm : CParm) : PExpr
    {
      def deflt = parm.default.Map(Lift) |> Lift;
      <[ CParm($(Lift(parm.name)), $(Lift(parm.type)), $deflt)]>
    }
    
    Lift(func : CTree.Func) : PExpr
    {
      
      def parms = func.parms.Map(Lift);
      <[ CTree.Func($(Lift(func.ret_type)), $(Lift(func.name)), [..$parms], $(Lift(func.body)))]>
    }
    
    Lift(o : COper) : PExpr
    {
      | CBinaryOper.CallFunc(left = l, right = r) => <[CBinaryOper.CallFunc($(Lift(l)), $(Lift(r)))]>
    }
    
    Lift(st : CExpr) : PExpr
    {
      | CExpr.Compound(c) => def c = c.Map(Lift);
                             <[ CExpr.Compound([..$c])]>
      | CExpr.Operator(o) => <[ CExpr.Operator($(Lift(o))) ]>
      | CExpr.Id(n)       => <[ CExpr.Id($(Lift(n))) ]>
    }
    
    Lift(st : CStatement) : PExpr
    {
      | CStatement.Expression(e)      => <[ CStatement.Expression($(Lift(e)))]>
      | CStatement.BraceStatement(st) => <[ CStatement.BraceStatement($(Lift(st)))]>
      | CStatement.Compound(b) => 
          def b = b.Map(Lift);
          <[ CStatement.Compound([..$b])]>
      | CStatement.If(c, b, e) => 
          def e = e.Map(Lift) |> Lift;
          <[ CStatement.If($(Lift(c)), $(Lift(b)), $e)]>
    }
    
    Lift(qual : CMethodQualifier) : PExpr
    {
      | CMethodQualifier.Const => <[ CMethodQualifier.Const() ]>
      | CMethodQualifier.None  => <[ CMethodQualifier.None() ]>
    }
    
    Lift(mod : CMod) : PExpr
    {
      | CMod.Private   => <[ CMod.Private() ]>
      | CMod.Public    => <[ CMod.Public() ]>
      | CMod.Protected => <[ CMod.Protected() ]>
    }
    
    Lift(tree : CType) : PExpr
    {
      | CType.Void => <[ CType.Void() ]>
      | CType.Class(CName.SplicableType(t)) => <[ $(t : usesite) ]>
      | CType.Class(n) => <[ CType.Class($(Lift(n)))]>
      | CType.Char     => <[ CType.Char() ]>
      | CType.Int      => <[ CType.Int() ]>
      | CType.Long     => <[ CType.Long() ]>
      | CType.Short    => <[ CType.Short() ]>
      | CType.UInt     => <[ CType.UInt() ]>
      | CType.ULong    => <[ CType.ULong() ]>
      | CType.UShort   => <[ CType.UShort() ]>
      | CType.UChar    => <[ CType.UChar() ]>
      | CType.Pointer(s, t, r) => 
          def rank = r.Map(x => <[ $(x : int)]>);
          <[ CType.Pointer($(Lift(s)), $(Lift(t)), [..$rank])]>
    }
    
    Lift(tree : CDecl) : PExpr
    {
      def name = <[ $(Lift(tree.name)) ]>;
      def init = tree.init.Map(x => <[ $(Lift(x))]>) |> Lift;
      match (tree)
      {
        | CDecl.Function(p) => 
        
            def get_parms(t, n)
            {
              def n = n.Map(Lift) |> Lift;
              <[ ($(Lift(t)), $n)]>
            }
            
            def parms = p.Map(get_parms);
            <[ CDecl.Function($name, $init, [..$parms]) ]>
        | CDecl.Id       => <[ CDecl.Id($name, $init) ]>
        | CDecl.Array(s) => 
            def s = s.Map(x => <[ $(x : int)]>) |> Lift;
            <[ CDecl.Array($name, $init, $s) ]>
      }
    }
    
    Lift(opt : option[PExpr]) : PExpr
    {
      | Some(o) => <[ Some($o)]>
      | None()  => <[ None() ]>
    }
    
    Lift(tree : list[CSpec]) : PExpr
    {
      def decls = tree.Map(x => <[ $(Lift(x))]> );
      <[ [..$decls] ]>
    }
    
    Lift(tree : list[CTypeDecl]) : PExpr
    {
      | [CTypeDecl.SplicableMembers(m)] => <[ $(m : usesite) ]>
      | d                               => def decls = d.Map(x => <[ $(Lift(x))]> );
                                           <[ [..$decls] ]>
    }
    
    Lift(tree : CTypeDecl) : PExpr
    {
      | CTypeDecl.Method(s, f, q) => <[ CTypeDecl.Method($(Lift(s)), $(Lift(f)), $(Lift(q)))]>
      | CTypeDecl.SplicableMembers(m) => <[ $(m : usesite) ]>
      | CTypeDecl.Type(c) => <[ CTypeDecl.Type($(Lift(c)))]>
      | CTypeDecl.Decl(d) => <[ CTypeDecl.Decl($(Lift(d)))]>
    }
    
    public Process(expr : PExpr) : PExpr
    {
      match (expr)
      {
        | <[ (..$e) ]>            => assert2(false);Process(e.Head)// e
        | <[ $(str : string) ]> => //if (!(flags is <[]>)) assert2(false) else ();
                                   def parser = Parser();
                                   def tree = parser.Parse(str);
                                   Lift(tree)
      }
    }
  }
}
