using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CommonLib.Macros
{
  /// <summary>
  /// Description of LensCombine.
  /// </summary>
  partial public module LensUtils
  {
    public @>>[T, T2, TR] (l1 : Lens[T, option[T2]], l2 : Lens[T2, list[TR]]) : EnumerableLens[T, TR]
    {
      def get = x => l1.Get(x).Map(l2.Get).WithDefault(Enumerable.Empty());
      def set = (a, r) => l1.Update(a, x => x.Map(l2.Set(_, r.NToList())));//l2.Set >> l1.Update;

      EnumerableLens(get, set)
    }
    
    public @>>[T, T2, T3, TR] (l1 : Lens[T, T2], l2 : Lens[T3, option[TR]]) : PartialLens[T, TR] where T3 : T2
    {
      def optset(x : T2, r)
      {
        match (x)
        {
          | y is T3 => l2.Set(y, Some(r)) : T2
          | _       => x
        }
      }

      def get(x)
      {
        match (l1.Get(x))
        {
          | x is T3 => l2.Get(x)
          | _       => None()
        }
      }
      def set = (a, r) => l1.Update(a, optset(_, r));//l2.Set >> l1.Update;

      PartialLens(get, set)
    }
    
    public @>>?[T, T2, T3, TR] (l1 : Lens[T, T2], l2 : Lens[T3, TR]) : PartialLens[T, TR] where T3 : T2
    {
      def optset(x : T2, r)
      {
        match (x)
        {
          | y is T3 => l2.Set(y, r) : T2
          | _    => x
        }
      }

      def get(x)
      {
        match (l1.Get(x))
        {
          | x is T3 => Some(l2.Get(x))
          | _       => None()
        }
      }
      def set = (a, r) => l1.Update(a, optset(_, r));//l2.Set >> l1.Update;

      PartialLens(get, set)
    }

    public @>>[T, T2, T3, TR] (l1 : Lens[T, IEnumerable[T2]], l2 : Lens[T3, TR]) : EnumerableLens[T, TR] where T3 : T2
    {
      def get(x)
      {
        def lst = l1.Get(x);
        if (lst.IsEmpty())
        {
          Enumerable.Empty()
        } else
        {
          match (lst.First())
          {
            | _ is T3 => lst.Select(x => l2.Get(x :> T3))
            | _    => Enumerable.Empty()
          }
        }
      }         

      def set(a, r)
      {
        def value = a |> l1.Get;
        if (value.IsEmpty())
        {
          a
        } else
        {
          match (value.First())
          {
            | _ is T3 => def value = value.Select(_ :> T3);
            def zip = value.ZipLazy(r);
            def value = zip.Map(l2.Set);
            l1.Set(a, value)
            | _    => a
          }
        }
      }

      EnumerableLens(get, set)
    }

    //public @>>.[T, T2, T3, TR, TB] (l1 : Lens[T, IEnumerable[T2]], l2 : Lens[T3, TR]) : BaseLens[T, IEnumerable[TB], IEnumerable[TR]]
    //{
    //  def get(x)
    //  {
    //    def lst = l1.Get(x);
    //    if (lst.IsEmpty())
    //    {
    //      Enumerable.Empty()
    //    } else
    //    {
    //      match (lst.First())
    //      {
    //        | _ is T3 => lst.Select(x => l2.Get(x :> T3))
    //        | _       => Enumerable.Empty()
    //      }
    //    }
    //  }         

    //  def set(a, r)
    //  {
    //    def value = a |> l1.Get;
    //    if (value.IsEmpty())
    //    {
    //      a
    //    } else
    //    {
    //      match (value.First())
    //      {
    //        | _ is T3 => //def value = zip.Map(l2.Set);
    //                     def value = r.Select(_ :> T2);
    //                     l1.Set(a, value)
    //        | _       => a
    //      }
    //    }
    //  }

    //  BaseLens(get, set)
    //}

    public @>>[T, T2, TR] (l1 : PartialLens[T, T2], l2 : PartialLens[T2, TR]) : PartialLens[T, TR]
    {
      def get(x)
      {
        if (l1.Get(x) is Some(x)) l2.Get(x) else None()
      }

      def set = (a, r) => l1.Update(a, l2.Set(_, r));

      PartialLens(get, set)
    }

    public @>>[T, T2, TR] (l1 : PartialLens[T, T2], l2 : Lens[T2, TR]) : PartialLens[T, TR]
    {
      def get = x => l1.Get(x).Map(l2.Get);
      def set = (a, r) => l1.Update(a, l2.Set(_, r));

      PartialLens(get, set)
    }

    public @>>?[T, T2, T3, TR] (l1 : PartialLens[T, T2], l2 : Lens[T3, TR]) : PartialLens[T, TR] where T3 : T2
    {
      def get(x)
      {
        match (l1.Get(x))
        {
          | Some(x is T3) => Some(l2.Get(x))
          | _       => None()
        }
      }

      def optset(x : T2, r)
      {
        match (x)
        {
          | x is T3 => l2.Set(x, r) : T2
          | _    => x
        }


      }

      def set = (a, r) => l1.Update(a, optset(_, r));

      PartialLens(get, set)
    }

    public @>>[T, T2, TR] (l1 : Lens[T, T2], l2 : PartialLens[T2, TR]) : PartialLens[T, TR]
    {
      def get = l1.Get >> l2.Get;
      def set = (a, r) => l1.Update(a, l2.Set(_, r));
      PartialLens(get, set)
    }

    public @>>[T, T2, TR] (l1 : Lens[T, T2], l2 : Lens[T2, TR]) : Lens[T, TR]
    {
      def get = l1.Get >> l2.Get;
      def set = (a, r) => l1.Update(a, l2.Set(_, r));//l2.Set >> l1.Update;
      Lens(get, set)
    }

    public @>>[T, T2, TR] (l1 : Lens[T, list[T2]], l2 : Lens[T2, TR]) : EnumerableLens[T, TR]
    {
      def get = x => l1.Get(x).Select(l2.Get);
      def set = (a, r) => l1.Update(a, x => x.ZipLazy(r).Map(l2.Set));
      EnumerableLens(get, set)
    }

    public @>>[T, T2, TR] (l1 : Lens[T, list[T2]], l2 : Lens[T2, list[TR]]) : EnumerableLens[T, TR]
    {
      def get = x => l1.Get(x).SelectMany(x => l2.Get(x));

      def set(a, r)
      {
        def update(x)
        {
          def len  = x.Select(x => l2.Get(x).Length);
          def unflat = r.Unflat(len);
          def res  = x.ZipLazy(unflat);
          res.Map((x, y) => l2.Set(x, y.NToList()));
        }
        l1.Update(a, update);
      }

      EnumerableLens(get, set)
    }

    public @>>[T, T2, TR] (l1 : Lens[T, IEnumerable[T2]], l2 : Lens[T2, IEnumerable[TR]]) : EnumerableLens[T, TR]
    {
      def get = x => l1.Get(x).SelectMany(x => l2.Get(x));

      def set(a, r)
      {
        def update(x)
        {
          def len  = x.Select(y => l2.Get(y).Count());
          def unflat = r.Unflat(len);
          def res  = x.ZipLazy(unflat);
          res.Map((x, y) => l2.Set(x, y.NToList()));
        }
        l1.Update(a, update);
      }

      EnumerableLens(get, set)
    }
    
    public @>>.[T, T2, T3, TR] (l1 : Lens[T, IEnumerable[T2]], l2 : Lens[T3, list[TR]]) : EnumerableLens[T, TR] where T3 : T2
    {
      def get = x => l1.Get(x).Where(x : T2 => x is T3).SelectMany(x => l2.Get(x :> T3));

      def set(a, r)
      {
        def update(x)
        {
          def len  = x.Where(x : T2 => x is T3).Select(y => l2.Get(y :> T3).Length);
          def unflat = r.Unflat(len);
          def res  = x.ZipLazy(unflat);
          res.Select((x, y) => l2.Set(x :> T3, y.NToList()) : T2);
        }
        l1.Update(a, update);
      }

      EnumerableLens(get, set)
    }
    
    public @>>[T, T2, T3, TR] (l1 : Lens[T, IEnumerable[T2]], l2 : Lens[T3, option[TR]]) : EnumerableLens[T, TR] where T3 : T2
    {
      def get = x => l1.Get(x).Where(x : T2 => x is T3).MapOpt(x => l2.Get(x :> T3));

      def set(a, r)
      {
        
        def update(x)
        {
          def data = x.Where(x : T2 => if (x is T3) l2.Get(x :> T3).HasValue else false);
          //def len  = x.Where(x : T2 => x is T3).Select(y => l2.Get(y :> T3).Length);
          //def unflat = r.Unflat(len);
          def res  = data.ZipLazy(r);
          res.Select((x, y) => l2.Set(x :> T3, Some(y)))
        }
        
        l1.Update(a, update)
      }

      EnumerableLens(get, set)
    }
    
    public @>>[T, T2, TR] (l1 : Lens[T, list[T2]], l2 : Lens[T2, option[TR]]) : EnumerableLens[T, TR]
    {
      def get = x => l1.Get(x).MapOpt(x => l2.Get(x));

      def set(a, r)
      {
        
        def update(x)
        {
          def data = x.Where(x => l2.Get(x).HasValue);
          //def len  = x.Where(x : T2 => x is T3).Select(y => l2.Get(y :> T3).Length);
          //def unflat = r.Unflat(len);
          def res  = data.ZipLazy(r);
          res.Map((x, y) => l2.Set(x, Some(y)))
        }
        
        l1.Update(a, update)
      }

      EnumerableLens(get, set)
    }
    
    public @>>[T, T2, TR] (l1 : Lens[T, IEnumerable[T2]], l2 : Lens[T2, list[TR]]) : EnumerableLens[T, TR]
    {
      def get = x => l1.Get(x).SelectMany(x => l2.Get(x));

      def set(a, r)
      {
        def update(x)
        {
          def len  = x.Select(y => l2.Get(y).Length);
          def unflat = r.Unflat(len);
          def res  = x.ZipLazy(unflat);
          res.Map((x, y) => l2.Set(x, y.NToList()))
        }
        
        l1.Update(a, update)
      }

      EnumerableLens(get, set)
    }
    
    public @>>[T, T2, T3, TR] (l1 : Lens[T, T2], l2 : Lens[T3, list[TR]]) : EnumerableLens[T, TR] where T3 : T2
    {
      def optset(x : T2, r)
      {
        match (x)
        {
          | y is T3 => l2.Set(y, r.NToList()) : T2
          | _    => x
        }
      }

      def get(x)
      {
        match (l1.Get(x))
        {
          | x is T3 => l2.Get(x)
          | _    => Enumerable.Empty()
        }
      }

      def set = (a, r) => l1.Update(a, optset(_, r));//l2.Set >> l1.Update;

      EnumerableLens(get, set)
    }

    public @>>[T, T2, T3, TR] (l1 : PartialLens[T, T2], l2 : Lens[T3, list[TR]]) : EnumerableLens[T, TR] where T3 : T2
    {
      def optset(x : T2, r)
      {
        match (x)
        {
          | y is T3 => l2.Set(y, r.NToList()) : T2
          | _    => x
        }
      }

      def get(x)
      {
        match (l1.Get(x))
        {
          | Some(x is T3) => l2.Get(x)
          | _             => Enumerable.Empty()
        }
      }

      def set = (a, r) => l1.Update(a, optset(_, r));//l2.Set >> l1.Update;

      EnumerableLens(get, set)
    }
    
    public @>>|[T, T2, T3, TR] (l1 : Lens[T, T2], l2 : Lens[T3, list[TR]]) : PartialLens[T, list[TR]] where T3 : T2
    {
      def optset(x : T2, r)
      {
        match (x)
        {
          | y is T3 => l2.Set(y, r.NToList()) : T2
          | _    => x
        }
      }

      def get(x)
      {
        match (l1.Get(x))
        {
          | x is T3 => Some(l2.Get(x))
          | _    => None()
        }
      }

      def set = (a, r) => l1.Update(a, optset(_, r));//l2.Set >> l1.Update;

      PartialLens(get, set)
    }

    public @>>|[T, T2, TR] (l1 : Lens[T, list[T2]], l2 : Lens[T2, list[TR]]) : Lens[T, list[list[TR]]]
    {
      def get = x => l1.Get(x).Map(l2.Get);
      def set = (a, r) => l1.Update(a, x => x.ZipLazy(r).Map(l2.Set));

      Lens(get, set)
    }    
  }
}
