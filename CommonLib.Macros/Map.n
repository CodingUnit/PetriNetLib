using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using StringTemplate;
using Nemerle.Macros;

namespace CommonLib.Macros
{
  //macro @|>(first, second)
  //syntax (first, "|>", second)
  //{
    
  //  def ctx = Macros.ImplicitCTX();
  //  def (n, expr) =  MapHelper.MapCreate(second);
  //  def pars = MapHelper.GetParams(n);
  //  <[ $first.Map($pars => $expr) ]>
  //}
  
  //macro @|><(first, second)
  //syntax (first, "|><", second)
  //{
    
  //  def ctx = Macros.ImplicitCTX();
  //  def (n, expr) =  MapHelper.MapCreate(second);
  //  def pars = MapHelper.GetParams(n);
  //  <[ $first.Map($pars => $expr).Flatten() ]>
  //}
 
  //module MapHelper
  //{

    
  //  public GetParam(num : int) : PExpr
  //  {
  //    | 2 => <[ y ]>
  //    | 3 => <[ z ]>
  //    | 4 => <[ a ]>
  //    | 5 => <[ b ]>
  //    | 1
  //    | _ => <[ x ]>
  //  }

  //  //public GetParams(num : int) : PExpr
  //  //{
  //  //  | 2 => <[ (x, y) ]>
  //  //  | 3 => <[ (x, y, z) ]>
  //  //  | 1 
  //  //  | _ => <[ x ]>
  //  //}
    
  //  //public MapCreate(second : PExpr) : int * PExpr
  //  //{
  //  //  MapCreate(second, expr => <[ x.$((expr.ToString()) : usesite)]>);
  //  //}
    
  //  //public MapCreate(second : PExpr, first_expr : PExpr -> PExpr) : int * PExpr
  //  //{ 
  //  //  mutable is_first = true;
  //  //  mutable n_params : int = 1;
      
  //  //  def check_indexer(after, expr)
  //  //  {
  //  //    | (true, PExpr.Indexer(<[ _ ]>, [PExpr.Literal(Literal.Integer(val = val))])) with num = val :> int => n_params = Math.Max(n_params, num);<[ $(GetParam(num)) ]>
  //  //    | (_, _) => expr
  //  //  }
      
  //  //  def loop(_, after, expr)
  //  //  {
        
  //  //    if (after)
  //  //      match (expr)
  //  //      {
  //  //        | PExpr.Ref(Name where (Id = "_")) => <[ x ]>
  //  //        | <[ $(_ : name) ]> when (is_first) => first_expr(expr)
  //  //        | <[ _ ]> => is_first = false;<[ x ]>
  //  //        | Call(<[ Nemerle.IO.sprint ]>, [PExpr.Literal(Literal.String(str))]) =>
  //  //            def str = str.Replace("$_[2]", "$y");
  //  //            def str = str.Replace("$(_[2])", "$(y)");
  //  //            def str = str.Replace("$_[3]", "$z");
  //  //            def str = str.Replace("$(_[3])", "$(z)");
  //  //            def str = str.Replace("$_", "$x");
  //  //            def str = str.Replace("$(_)", "$(x)");
  //  //            <[ Nemerle.IO.sprint($(str : string)) ]>
  //  //        | <[ (..$_) ]> => expr
  //  //        | _ => is_first = false;expr
  //  //      } else 
  //  //      match (expr)
  //  //      {
  //  //        | <[ $_($_) ]> => is_first = false;expr
  //  //        | <[ $_.$_ ]>
  //  //        | <[ (..$_) ]>
  //  //        | <[ $(_ : name) ]> => expr
  //  //        | _ => is_first = false;expr
  //  //      }
  //  //  }
  //  //  def expr = Macros.TraverseExpr(None(), second, false, (_, x, y) => check_indexer(x, y));
  //  //  def expr = Macros.TraverseExpr(None(), expr, false, loop);
  //  //  (n_params, expr)
  //  //}

  //}
  
}
