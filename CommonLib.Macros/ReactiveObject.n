using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using ReactiveUI;

namespace CommonLib.Macros
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro ReactiveObject(typeBuilder : TypeBuilder)
  {
    ReactiveObjectImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder)
  }

 
  module ReactiveObjectImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      //assert2(false);
      Macros.DefineCTX(typer);
      match (typeBuilder.Ast)
      {
        | TopDeclaration.Class as t => t.t_extends = <[ ReactiveObject ]> :: t.t_extends;
        | _                         => ()
      }
      foreach (type is ClassMember.Property in typeBuilder.Ast.GetMembers())
      {
        type.modifiers.AddCustomAttribute(<[ReactiveChange]>)
      }
      _ = typeBuilder;
    }
    
    
  }
}
