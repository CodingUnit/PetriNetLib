using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

namespace CommonLib.Macros
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Property)]
  macro ThreadSafe(typeBuilder : TypeBuilder, property : ClassMember.Property)
  {
    ReactivePropertyImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, property)
  }
  
  public module ThreadSafeImpl
  {
    public DoTransform(typer : Typer, _typeBuilder : TypeBuilder, property : ClassMember.Property) : void
    {
      Macros.DefineCTX(typer);
    
      def is_type(type, ty)
      {
        def ty = typer.BindFixedType(ty);
        type.TryRequire(ty)
      }
      
      def type = typer.BindFixedType(property.returnType);
      def safe = [<[ bool ]>, <[ char ]>, <[ byte ]>, <[ sbyte]>, <[ short ]>, <[ ushort ]>, <[ uint ]>, <[ int ]>, <[ float ]>];
      if (safe.Exists(x => is_type(type, x))) () else
       if (is_type(type, <[ object ]>)) () else
      {
        
      }
      //match (property.parsedReturnType)
      //{
      //  | <[ bool ]>
      //  | <[ char ]>
      //  | <[ byte ]>
      //  | <[ sbyte ]>
      //  | <[ short ]>
      //  | <[ ushort ]>
      //  | <[ ]>
      //}
    }
  }
}

