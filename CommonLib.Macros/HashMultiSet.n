using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Nemerle.Macro;

namespace CommonLib.Macros
{
  [Record]
  class Bucket[T]
  {
    public key   : T;
    public mutable count : int;

    public IndexInItems : int {get;set;}
    public IndexInBuckets : int {get;set;}
    public Empty : bool
    {
      get
      {
        count == 0
      }
    }

    public override ToString() : string
    {
      $"($key, $count)"
    }
  }

  public class HashMultiSet[T] : IEnumerable[T * int]
  {
    mutable buckets : array[Bucket[T]]  = array(32);
    items           : RQueue[Bucket[T]] = RQueue(32);
    add_rem_queue   : RQueue[T * int * int * bool] = RQueue(10);
    mutable locked  : int;
    //mutable add_rem_locked : int;

    public GetEnumerator() : IEnumerator[T * int]
    {
      foreach (cur in items)
      {
        yield (cur.key, cur.count)
      }
    }

    public AllCount : int
    {
      get
      {
        items.Fold(0, (x, a) => x.count + a)
      }
    }

    public Count : int
    {
      get
      {
        items.Count
      }
    }

    factor : double
    {
      get
      {
        1.0 * Count / buckets.Length
      }
    }    

    public this()
    {
    }

    public this(vals : IEnumerable[T])
    {
      foreach (item in vals)
      {
        Add(item)
      }
    }

    hash1(x : T) : int
    {
      x.GetHashCode() % buckets.Length
    }

    hash2(x : T) : int
    {
      def prime = buckets.Length - 1;
      prime - (x.GetHashCode() % prime)
    }

    public ElementAtPos(pos : int) : T
    {
      items.ElementAtPos(pos).key
    }

    public Contains(k : T, count : int = 1) : bool
    {
      def (e, _) = FindEntry(k, buckets);
      e != null && !e.Empty && e.count >= count
    }    

    Rehash() : array[Bucket[T]]
    {
      def new_buckets = array(buckets.Length * 2);
      items.Resize(new_buckets.Length);

      foreach (bucket in items)
      {
        def (_, point) = FindEntry(bucket.key, new_buckets);
        bucket.IndexInBuckets = point;
        new_buckets[point] = bucket;
      }        
      new_buckets
    }

    public Add(k : T, count : int = 1) : void
    {
      if (!ThreadSafeUtils.CAS(ref locked, 0, 1)) 
      {
        if (add_rem_queue.Full)
        {
          
        } else
        add_rem_queue.Enqueue((k, count, -1, true))
      } else
      {
        def (entry, point) = FindEntry(k);
        if (entry != null)
        {
          entry.count += count;
        } else
        {

          def bucket = Bucket(k, count, items.NextFreeIndex, point);

          // если версия поменялась надо снова искать точку элемента
          // если функция вызывалась уже из другого потока 
          // и элемент мог добавиться в ту же точку
          if (buckets[point] == null) // если нет элемента
          {
            buckets[point] = bucket; // добавляем
            items.Enqueue(bucket);
          } else // иначе
          {
            buckets[point].count += count; // добавляем количество к элементу
          }

          when (factor >= 0.75) 
          {
            buckets = Rehash();
          }
        }
        locked = 0;
        QueueCheck();
      }
    }

    QueueCheck() : void
    {
      mutable val;
      while (add_rem_queue.DequeIfExist(ref val))
      {
        match (val)
        {
          | (k, c, -1, true)  => Add(k, c)
          | (k, c, -1, false) => Remove(k, c)
          | (_, c,  i, false) => RemovePos(i, c)
          | _                 => ()
        }
      }
    }

    public RemovePos(idx : int, count : int = 1) : void
    {
      if (!ThreadSafeUtils.CAS(ref locked, 0, 1)) 
      {
        if (add_rem_queue.Full)
        {
          
        } else
        add_rem_queue.Enqueue((default(T), count, idx, false))
      } else
      {
        def point = items[idx].IndexInBuckets;
        def entry = buckets[point];
        when (entry != null)
        {
          if (entry.count > count)
          {
            entry.count -= count;
          } else 
          {
            // если элемент есть, поток мог уже удалить элемент 
            buckets[point] = null;
            def new_elem = items.RemoveAbs(idx);
            new_elem.IndexInItems = entry.IndexInItems;
          }
        }
        locked = 0;
        QueueCheck();
      }
    }
    
    public Remove(k : T, count : int = 1) : void
    {
      if (!ThreadSafeUtils.CAS(ref locked, 0, 1)) 
      {
        if (add_rem_queue.Full)
        {
          
        } else
        add_rem_queue.Enqueue((k, count, -1, false))
      } else
      {
        def (entry, point) = FindEntry(k);
        when (entry != null)
        {
          if (entry.count > count)
          {
            entry.count -= count;
          } else 
          {
            // если элемент есть, поток мог уже удалить элемент 
            buckets[point] = null;
            def idx = entry.IndexInItems;
            _ = items.RemoveAbs(idx);
            def item = items[idx];
            when (item != null) item.IndexInItems = idx;
          }
        }
        locked = 0;
        QueueCheck();
      }
    }

    FindEntry(k : T, buck : array[Bucket[T]] = null) : Bucket[T] * int
    {
      def buckets    = buckets ?? buck;
      def probePoint = hash1(k);
      def incr       = hash2(k);

      def loop(point)
      {
        def entry = buckets[point];
        if (entry == null || entry.Empty || entry.key.Equals(k)) (entry, point) else loop((point + incr) % buckets.Length)
      }


      loop(probePoint)
    }

    public Clear() : void
    {
      buckets = array(32);
      items.Clear();
    }
    
    public AllElements() : IEnumerable[T]
    {
      foreach (elem in items)
      {
        foreach (elem in Enumerable.Repeat(elem.key, elem.count))
        {
          yield elem
        }
      }
    }
    
    
  }
}
