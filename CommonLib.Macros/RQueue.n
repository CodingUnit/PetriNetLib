using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace CommonLib.Macros
{
  public class RQueue[T] : IEnumerable[T]
  {
    mutable queue : array[T];
    [Accessor]
    mutable write_index : int;
    [Accessor]
    mutable read_index : int;
    
    public this(size : int) {queue = array(size)}
    
    public Enqueue(elem : T) : void
    {
      def write(i)
      {
        when (i - read_index == queue.Length) Resize(queue.Length * 2);
        queue[i % queue.Length] = elem; 
        i + 1
      }
      
      _ = ThreadSafeUtils.LockFreeUpdateIntRet(ref write_index, write);
    }
    
    public Resize(size : int) : void
    {
      Array.Resize(ref queue, size);
      _ = ThreadSafeUtils.LockFreeUpdateIntRet(ref write_index, y => y);
    }
    
    public Empty : bool
    {
      get
      {
        Count == 0
      }
    }
    
    public GetEnumerator() : IEnumerator[T] 
    {
      for (mutable i = read_index; i != write_index; i++)
      {
        yield queue[i % queue.Length];
      }
    }
    
    public Clear() : void
    {
      write_index = 0;
      read_index = 0;
    }
    
    public Deque() : T
    {
      mutable val;
      _ = ThreadSafeUtils.LockFreeUpdateIntRet(ref read_index, x => 
      {
        val = queue[x % queue.Length]; 
        queue[x % queue.Length] = default(T);
        x + 1
      });
      val
    }
    
    public DequeIfExist(ret : ref T) : bool
    {
      mutable val;
      mutable ok = false;
      _ = ThreadSafeUtils.LockFreeUpdateIntRet(ref read_index, x => 
      {
        if (x == write_index) 
        {
          ok = false;
          x
        } else
        {
          val = queue[x % queue.Length]; 
          ok = true;
          queue[x % queue.Length] = default(T);
          x + 1
        }
      });
      ret = val;
      ok
    }
    
    public Full : bool
    {
      get
      {
        Count == queue.Length
      }
    }
    
    public Count : int
    {
      get
      {
        write_index - read_index
      }
    }
    
    // return absolute index of element
    public FindIndexOf(elem : T) : int
    {
      def loop(i)
      {
        if (i == write_index) -1 else
        {
          def idx = i % queue.Length;
          if (queue[idx].Equals(elem)) idx else loop(i + 1)
        } 
      }
      
      loop(read_index)
    }
    
    public NextFreeIndex : int
    {
      get
      {
        WriteIndex % queue.Length
      }
    }
    
    // remove element deque from begin and set to this element with absolute index
    public RemoveAbs(index : int) : T
    {
      //def new_elem = Deque();
      mutable new_elem;
      def idx = ThreadSafeUtils.LockFreeUpdateIntRet(ref read_index, x => 
      {
        new_elem = queue[x % queue.Length]; 
        queue[x % queue.Length] = default(T);
        x + 1
      });
      
        // если из очереди удаляем из начала, то выводим этот элемент
      if (index == idx % queue.Length) new_elem else
      {
        // иначе удаление из середины очереди, туда надо скопировать тот что был удален из начала
          // присваиваем новому элементу индекс удаленного
        def elem = queue[index];
        queue[index] = new_elem;
        elem
      }
    }
    
    // remove element deque from begin and set to this element
    public Remove(index : int) : T
    {
      RemoveAbs((index + read_index) % queue.Length)
    }
    
    public Peek() : T
    {
      queue[read_index % queue.Length]
    }
    
    public ElementAtPos(index : int) : T
    {
      queue[(read_index + index) % queue.Length]
    }
    
    public Item[index : int] : T
    {
      get
      {
        queue[index % queue.Length]
      }
      set
      {
        _ = ThreadSafeUtils.LockFreeUpdateIntRet(ref write_index, x => {queue[index % queue.Length] = value; x});
      }
    }
    
    public override ToString() : string
    {
      def en = this.AsEnumerable();
      $<#..$(en; ",")#>
    }
  }
}
