using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;

namespace CommonLib.Macros
{
  /// <summary>
  /// Description of HashMultiSetTest.
  /// </summary>
  public class HashMultiSetTest
  {
    set : HashMultiSet[int] = HashMultiSet();
    
    public TestConcurrent() : bool
    {
      def rnd = Random();
      mutable sum_err = 0;
      mutable diff_err = 0;
      
      def check()
      {
        while (true) {
        def val = rnd.Next(100000);
        def old_vals = set.AllElements().ToArray();
        def sum_old = old_vals.Sum();
        def old = HashMultiSet(old_vals);
        set.Add(val);
        def new_vals = set.AllElements().ToArray();
        def nsum = new_vals.Sum();
        when (set.AllCount != old.AllCount + 1)
        {
          _ = Interlocked.Increment(ref sum_err);
        }
        when (sum_old + val != nsum)
        {
          _ = Interlocked.Increment(ref sum_err);
        }
        //def diff = new_vals.Except(old_vals).ToArray();
        //def first = diff.First();
        //when (first != val)
        //{
        //  _ = Interlocked.Increment(ref diff_err);
        //}
      }
      }
      
      def task1 = Task.Factory.StartNew(_ => check());
      def task2 = Task.Factory.StartNew(_ => check());
      def task3 = Task.Factory.StartNew(_ => check());
      // 3 threads
      // 1 - 10
      // sum
      // old + new - change
      // count
      // all_count
      false
    }
    
    public TestMany() : bool
    {
      false
      // many values add
    }
    
  }
}
