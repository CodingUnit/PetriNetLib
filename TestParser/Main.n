using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using PetriNetLib;
using System.Reactive.Linq;
using System.Reactive;
using CommonLib.Macros;
using System.Threading;
using System.IO;
using System.Diagnostics;

module Program
{
  [PetriNet("DiningPhilosophers.cpn", debug)]
  class DiningPhilosophers
  {
    //Chopsticks(i : PH) : IEnumerable[PH]
    //{
    //  def i = i.num;
  
    //  {
    //    1 ` cs(i) %++ (1 ` cs, (if (i == n) 1; else i + 1))
    //  }
    //}
  }
  
  Put() : void
  {
    Console.WriteLine("Put Down");
    net.PutDownChopsticks();
    lock (net)
    {
      Trace.WriteLine(net.ToString() + "\n-----");
    }
  }
  
  Take() : void
  {
    Console.WriteLine("Take");
    net.TakeChopsticks();
    lock (net)
    {
      Trace.WriteLine(net.ToString() + "\n-----");
      //file.WriteLine("")
    }
  }
  
  mutable net : DiningPhilosophers;
  
  Main() : void
  {
    WriteLine("Hi!");
    net = DiningPhilosophers();
    def time = DateTime.Now;
    def writer = File.CreateText("out.txt");
    _ = Trace.Listeners.Add(TextWriterTraceListener(Console.Out)); //Trace.WriteLine("Hello World");
    _ = Trace.Listeners.Add(TextWriterTraceListener(writer));
    Console.WriteLine(net.ToString() + "\n-----");
    _ = Observable.Interval(TimeSpan.FromMilliseconds(130)).Subscribe(_ => Put());
    _ = Observable.Interval(TimeSpan.FromMilliseconds(30)).Subscribe(_ => Take());
    
    _ = ReadLine();
  }
}