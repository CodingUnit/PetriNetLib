using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetModel
{
  /// <summary>
  /// Description of TimedPlace.
  /// </summary>
  public class TimedPlace[T]
  {
    tokens : ITimedTokenContainer[Timed[T]];
    
    public NextTokenDelay : long
    {
      get
      {
        tokens.NextTokenDelay
      }
    }
    
    public Name : string;
    public this(name : string) {Name =  name;tokens = TimedHeap()}
    public this(name : string, cont : ITimedTokenContainer[Timed[T]]) {tokens = cont; Name = name;}
    
    public this(cont : ITimedTokenContainer[Timed[T]])
    {
      tokens = cont
    }
    
    public this(en : IEnumerable[Timed[T]], cont : ITimedTokenContainer[Timed[T]])
    {
      tokens = cont;
      Add(en)
    }
    
    public Add(tok : Timed[T]) : void
    {
      tokens.Add(tok)
    }
    
    public Add(tok : IEnumerable[Timed[T]]) : void
    {
      tokens.AddMany(tok)
    }
    
    public Have(tok : IEnumerable[Timed[T]]) : bool
    {
      tokens.Have(tok)
    }
    
    public HaveTokens : bool
    {
      get
      {
        tokens.HaveTokens
      }
    }
    
    public Get(tok : IEnumerable[Timed[T]]) : void
    {
      tokens.GetMany(tok)
    }
    
    public Peek() : Timed[T]
    {
      tokens.Peek()
    }
    
    public Get(elem : Timed[T]) : void
    {
      tokens.Get(elem)
    }
  
    public Get() : Timed[T]
    {
      tokens.Get()
    }
    
    public PeekIndexed() : Timed[T] * int
    {
      tokens.PeekIndexed()
    }
    
    public GetIndexed(idx : int) : void
    {
      tokens.GetIndexed(idx)
    }
    
    public GetManyIndexed(tok : IEnumerable[int]) : void
    {
      tokens.GetManyIndexed(tok)
    }
    
    public override ToString() : string
    {
      $"$Name{$tokens}"
    }
    
  }
}
