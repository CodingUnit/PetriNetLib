using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace PetriNetModel
{
  /// <summary>
  /// Description of PetriNet.
  /// </summary>
  public class PetriNet : IPetriNet
  {
    mutable main_task : Task;
    mutable time_step : int;
    main_cancel : CancellationTokenSource = CancellationTokenSource();
    mutable main_cancel_token : CancellationToken;

    public this(step : int = 15)
    {
      time_step = step;
      main_cancel_token = main_cancel.Token; 
      main_task = Task(_ => Step(), main_cancel)
    }
    
    public virtual TransitionStep() : void
    {
    }
    
    public Dispose() : void 
    {
      main_cancel.Cancel(); 
      try 
      {
        main_task.Wait() 
      } 
      catch 
      {
        | AggregateException => ()
      } 
      finally 
      {
        main_cancel.Dispose()
      }
    }
    
    public Start() : void
    {
      main_task.Start()
    }
    
    public Step() : void
    {
      if (main_cancel_token.IsCancellationRequested)
        main_cancel_token.ThrowIfCancellationRequested(); else
      TransitionStep();
      Thread.Sleep(time_step);
      Step()
    }
  }
}
