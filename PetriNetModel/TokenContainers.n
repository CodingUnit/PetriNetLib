using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;
using System.Diagnostics;

namespace PetriNetModel
{
  class BitEnumerable
  {
    buf : List[int] = List();
    mutable version : int;
    
    public this() {}
    
    public this(en : IEnumerable[bool])
    {
      buf = List(MathUtils.UpperDiv(en.Count(), 32));
      foreach (bit in en)
      {
        
      }
    }
    
    public Length : int
    {
      get
      {
        buf.Count
      }
    }
    
    public FindLowestZero(start : int = 0) : int
    {
      //def mask = ~((bit << 1) - 1);
      
      def loop(i, index)
      {
        def word = ~buf[i];
        //def msk = if (i == idx) mask & ~bit else mask;
        //def word = word & msk;
        def val  = word & -word;
        if (val != 0) 
        {
          def zeros = BitUtils.LeadingZeros(val);
          def lsb = 32 - zeros;
          lsb + index
        } else
        {
          if (i + 1 == buf.Count) -1 else
          loop(i + 1, index + 32)
        }
      }
      
      loop(start / 32, start)
    }
    
    public FindNearestSet(index : int) : int
    {
      def bit = 1 << index % 32;
      def idx = index / 32;
      
      def mask = ~((bit << 1) - 1);
      
      def loop(i, index, mask)
      {
        def word = buf[i];
        def msk = if (i == idx) mask & ~bit else mask;
        def word = word & msk;
        def val  = word & -word;
        if (val != 0) 
        {
          def zeros = BitUtils.LeadingZeros(val);
          def lsb = 32 - zeros;
          lsb + index
        } else
        {
          if (i + 1 == buf.Count) loop(0, 0, -1) else
          if (i == idx && mask == -1) -1 else loop(i + 1, index + 32, -1)
        }
      }
      
      loop(idx, index, mask)
    }
    
    public Set(index : int, val : bool) : void
    {
      when (index >= 0 && index < Length)
	    {
		    if (val)
		    {
			    buf[index / 32] |= 1 << index % 32;
		    }
		    else
		    {
			    buf[index / 32] &= ~(1 << index % 32);
		    }
		    version++;
	    }
    }
  }


  //class TokenQueue[T] : ITokenContainer[T]
  //{
  //  public Create() : ITokenContainer[T]
  //  {
  //    TokenQueue()
  //  }

  //  public Create(en : IEnumerable[T]) : ITokenContainer[T]
  //  {
  //    TokenQueue(en)
  //  }

  //  public this() {}
  //  public this(en : IEnumerable[T])
  //  {

  //  }

  //  public Add(tok : T) : void {}

  //  public AddMany(tok : IEnumerable[T]) : void {}

  //  public Have(tok : IEnumerable[T]) : bool {false}

  //  public Have(num : int) : bool
  //  {
  //    false
  //  }

  //  public HaveTokens : bool
  //  {
  //    get {false}
  //  }

  //  public GetMany(tok : IEnumerable[T]) : void
  //  {
  //    throw NotImplementedException()
  //  }

  //  public GetMany(num : int) : IEnumerable[T]
  //  {
  //    throw NotImplementedException()
  //  }

  //  public Get() : T
  //  {
  //    default(T)
  //  }
  //}

  public class RandomArray[T] : ITokenContainer[T]
  {
    queue   : RQueue[T] = RQueue(32);
    //elems   : BitEnumerable = BitEnumerable();
    rnd : Random = Random();
    
    public Create() : ITokenContainer[T]
    {
      RandomArray()
    }

    public Create(en : IEnumerable[T]) : ITokenContainer[T]
    {
      RandomArray(en)
    }

    public this(en : IEnumerable[T])
    {
      foreach (elem in en) Add(elem)
    }

    public this()
    {

    }

    public Add(tok : T) : void 
    {
      queue.Enqueue(tok);
    }

    public AddMany(tok : IEnumerable[T]) : void 
    {
      foreach (t in tok)
      {
        Add(t);
      }
    }

    public Have(tok : IEnumerable[T]) : bool 
    {
      tok.All(queue.Contains)
    }

    public Have(num : int) : bool
    {
      def by_key = queue.GroupBy(x => x);
      by_key.Where(x => x.Count() >= num).Count() != 0
    }

    public HaveTokens : bool
    {
      get {queue.Count != 0}
    }

    public GetMany(num : int) : IEnumerable[T]
    {
      def by_key = queue.GroupBy(x => x);
      def with_n_tok = by_key.Where(x => x.Count() >= num).ToArray();
      def idx = rnd.Next(queue.Count);
      def elem = with_n_tok[idx];
      foreach (e in elem)
      {
        def index = queue.FindIndexOf(e);
        _ = queue.RemoveAbs(index)
        //queue[index] = default(T);
        //elems.Set(index, false);
      }
      with_n_tok[idx]
    }

    public GetManyIndexed(tok : IEnumerable[int]) : void
    {
      foreach (e in tok)
      {
        _ = queue.RemoveAbs(e)
        //queue[index] = default(T);
        //elems.Set(index, false);
      }
    }
    
    public GetMany(tok : IEnumerable[T]) : void
    {
      foreach (e in tok)
      {
        def index = queue.FindIndexOf(e);
        _ = queue.RemoveAbs(index)
        //queue[index] = default(T);
        //elems.Set(index, false);
      }
    }

    public Peek() : T
    {
      def idx = queue.Count |> rnd.Next;
      //_ = queue.RemoveFromIndexAndMoveBegin(index)
      //def idx = elems.FindNearestSet(idx);
      queue.ElementAtPos(idx)
    }
    
    public Get(elem : T) : void
    {
      def idx = queue.FindIndexOf(elem);
      _ = queue.RemoveAbs(idx);
      //when (!elem.Equals(el))
      //{
      //  Trace.WriteLine("Error")
      //}
      //queue[idx] = default(T);
      //elems.Set(idx, false);
    }
    
    public PeekIndexed() : T * int
    {
      def idx = queue.Count |> rnd.Next;
      def idx = queue.ReadIndex + idx;
      //def idx = elems.FindNearestSet(idx);
      (queue[idx], idx)
    }
    
    public GetIndexed(idx : int) : void
    {
      _ = queue.RemoveAbs(idx)
      //queue[idx] = default(T);
      //elems.Set(idx, false);
    }
    
    public Get() : T
    {
      def idx = queue.Count |> rnd.Next;
      queue.Remove(idx);
    }
    
    public override ToString() : string
    {
      def tokens = queue.GroupBy(x => x);
      def tokens = tokens.Select(x => $"$(x.Count())`$(x.Key)");
      string.Join(" ++ ", tokens)
    }
  }


}
