using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;

namespace PetriNetModel
{
  [Record]
  public class Timed[T] : IComparable[Timed[T]]
  {
    public key : T;
    
    [Accessor]
    mutable time : long;
    [RecordIgnore]
    mutable ref_count : int;
    
    public override GetHashCode() : int
    {
      key.GetHashCode() ^ time.GetHashCode()
    }
    
    public CompareTo(other : Timed[T]) : int
    {
      time.CompareTo(other.time)
    }
    
    public override Equals(obj : object) : bool
    {
      | Timed(key = k, time = t) => key.Equals(k) && time == t
      | _                        => false
    }
    
    public IncRef() : void
    {
      ref_count++;
    }
    
    public DecRef() : void
    {
      when (ref_count != 0) ref_count--;
    }
    
    public WithTime(time : long) : Timed[T]
    {
      if (ref_count == 0)
      {
        this.time = time;
        this
      } else
      {
        def timed = Timed(key, time);
        timed.IncRef();
        timed
      }
    }
    
    public Add(inc : int) : Timed[T]
    {
      WithTime(time + inc)
    }
    
    public override ToString() : string
    {
      $"$key @ $time"
    }
  }
  /// <summary>
  /// Description of TimedSimpleMultiset.
  /// </summary>
  public class TimedHeap[T] : ITimedTokenContainer[T]
  {
    heap : MinBinaryHeap[Timed[T]] = MinBinaryHeap();
    rnd  : Random                  = Random();
    
    public this() {}
    public this(en : IEnumerable[Timed[T]])
    {
      heap = MinBinaryHeap(en);
    }
    
    public Create() : ITokenContainer[Timed[T]]
    {
      TimedHeap()
    }
    
    public Create(en : IEnumerable[Timed[T]]) : ITokenContainer[Timed[T]]
    {
      TimedHeap(en)
    }
    
    public EnabledTokens : IEnumerable[Timed[T]]
    {
      get
      {
        heap.PeekFirstMin(Timed(default(T), TimeScheduler.time()))
      }
    }
    
    public EnabledTokensIdx : IEnumerable[Timed[T] * int]
    {
      get
      {
        EnabledTokens.Select((x, i) => (x, i))
      }
    }
    
    public GetAll() : void
    {
      heap.Clear()
    }
    
    public Add(tok : Timed[T]) : void
    {
      heap.Insert(tok)
    }
    
    public AddMany(tok : IEnumerable[Timed[T]]) : void
    {
      foreach (t in tok)
      {
        heap.Insert(t)
      }
    }
    
    public Have(num : int) : bool
    {
      !EnabledTokens.GroupBy(x => x.key).Where(x => x.Count() >= num).IsEmpty()
    }
    
    public Have(tok : IEnumerable[Timed[T]]) : bool
    {
      tok.All(EnabledTokens.Contains)
      //EnabledTokens.Intersect(tok).Count() == tok.Count()
    }
    
    public Have(tok : Timed[T]) : bool
    {
      tok |> EnabledTokens.Contains
      //EnabledTokens.Intersect(tok).Count() == tok.Count()
    }
    
    public HaveRelativeTime(tok : T, t : long) : bool
    {
      EnabledTokens.Exists(x => x.key.Equals(tok) && TimeScheduler.time() - x.Time >= t)
    }
    
    public GetRelativeTime(tok : T, t : long) : void
    {
      def idx = EnabledTokens.IndexOf(x => x.key.Equals(tok) && TimeScheduler.time() - x.Time >= t);
      heap.RemoveAt(idx)
    }
    
    public Peek() : Timed[T]
    {
      heap.PeekMin()
    }
    
    public HaveTokens : bool
    {
      get
      {
        !EnabledTokens.IsEmpty()
      }
    }
    
    public NextTokenDelay : long
    {
      get
      {
        if (HaveTokens)
        {
          def min = Peek();
          min.Time
        } else long.MaxValue
      }
    }
    
    public GetMany(num : int) : IEnumerable[Timed[T]]
    {
      def by_key = EnabledTokensIdx.GroupBy((x, _) => x.key);
      def tokens = by_key.Where((x, _) => x.Count() >= num).ToArray();
      def idx    = rnd.Next(tokens.Length);
      def tokens = tokens[idx];
      foreach ((_, i) in tokens) heap.RemoveAt(i);
      tokens.Select(x => x[0])
    }
    
    public GetMany(tok : IEnumerable[Timed[T]]) : void
    {
      foreach (elem in tok) heap.Remove(elem);
    }
    
    public Get(elem : Timed[T]) : void
    {
      heap.Remove(elem);
    }
    
    public Get() : Timed[T]
    {
      if (EnabledTokens.IsMoreThanOne())
      {
        def tokens = EnabledTokensIdx.ToArray();
        def idx = rnd.Next(tokens.Length);
        def (elem, i) = tokens[idx];
        heap.RemoveAt(i);
        elem
      } else 
      {
        def elem = heap.PeekMin();
        heap.DeleteMin();
        elem
      }
    }
    
    public PeekIndexed() : Timed[T] * int
    {
      def elem = heap.PeekMin();
      (elem, 0)
    }
    
    public GetIndexed(idx : int) : void
    {
      heap.RemoveAt(idx);
    }
    
    public GetManyIndexed(tok : IEnumerable[int]) : void
    {
      foreach (i in tok)
        heap.RemoveAt(i)
    }
    
    public override ToString() : string
    {
      def tokens = heap.GroupBy(x => x);
      def tokens = tokens.Select(x => $"$(x.Count())`$(x.Key.key) @ $(x.Key.Time)");
      string.Join(" ++ ", tokens)
    }
  }
}
