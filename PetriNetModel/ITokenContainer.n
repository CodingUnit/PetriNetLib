using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetModel
{
  public interface ITokenContainer[T]
  {
    Add(tok : T) : void;

    AddMany(tok : IEnumerable[T]) : void;

    Have(tok : T) : bool;
    Have(num : int) : bool;
    Have(tok : IEnumerable[T]) : bool;

    Peek() : T;
    HaveTokens : bool
    {
      get;
    }

    GetMany(num : int) : IEnumerable[T];
    GetMany(tok : IEnumerable[T]) : void;

    Get(elem : T) : void;
    Get() : T;
    GetAll() : void;
    PeekIndexed() : T * int;

    GetIndexed(idx : int) : void;
    GetManyIndexed(tok : IEnumerable[int]) : void;
  }
  
  public interface ITimedTokenContainer[T] : ITokenContainer[Timed[T]]
  {
    HaveRelativeTime(tok : T, time : long) : bool;
    GetRelativeTime(tok : T, time : long) : void;
    
    EnabledTokens : IEnumerable[Timed[T]]
    {
      get;
    }
    
    EnabledTokensIdx : IEnumerable[Timed[T] * int]
    {
      get;
    }
    
    NextTokenDelay : long
    {
      get;
    }
  }
}
