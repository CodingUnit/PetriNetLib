using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace PetriNetModel
{
  public class RQueue[T] : IEnumerable[T]
  {
    mutable queue : array[T];
    [Accessor]
    mutable write_index : int;
    [Accessor]
    mutable read_index : int;
    
    public this(size : int) {queue = array(size)}
    
    public Enqueue(elem : T) : void
    {
      queue[write_index] = elem;
      write_index++;
    }
    
    public Resize(size : int) : void
    {
      Array.Resize(ref queue, size)
    }
    
    public GetEnumerator() : IEnumerator[T] {queue.AsEnumerable().GetEnumerator()}
    
    public Deque() : T
    {
      def val = queue[read_index];
      read_index++;
      val
    }
    
    public Count : int
    {
      get
      {
        write_index - read_index
      }
    }
    
    public Peek() : T
    {
      queue[read_index]
    }
    
    public Item[index : int] : T
    {
      get
      {
        queue[read_index + index]
      }
      set
      {
        queue[read_index + index] = value
      }
    }
  }
}
