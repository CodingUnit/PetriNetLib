using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;

namespace PetriNetModel
{
  [Record]
  class Timed[T] : IComparable[Timed[T]]
  {
    public key : T;
    public time : DateTime;
    
    public override GetHashCode() : int
    {
      key.GetHashCode() ^ time.GetHashCode()
    }
    
    public CompareTo(other : Timed[T]) : int
    {
      time.CompareTo(other.time)
    }
    
    public override Equals(obj : object) : bool
    {
      | Timed(k, t) => key.Equals(k) && time == t
      | _           => false
    }
    
    public override ToString() : string
    {
      $"$key @ $time"
    }
  }
  /// <summary>
  /// Description of TimedSimpleMultiset.
  /// </summary>
  class TimedHeap[T] : ITokenContainer[Timed[T]]
  {
    heap : BinaryHeap[Timed[T]] = BinaryHeap();
    rnd  : Random               = Random();
    
    public this() {}
    public this(en : IEnumerable[Timed[T]])
    {
      heap = BinaryHeap(en)
    }
    
    public Create() : ITokenContainer[Timed[T]]
    {
      TimedHeap()
    }
    
    public Create(en : IEnumerable[Timed[T]]) : ITokenContainer[Timed[T]]
    {
      TimedHeap(en)
    }
    
    public EnabledTokens : IEnumerable[Timed[T]]
    {
      get
      {
        heap.PeekFirstMin(Timed(default(T), DateTime.Now))
      }
    }
    
    public Add(tok : Timed[T]) : void
    {
      heap.Insert(tok)
    }
    
    public AddMany(tok : IEnumerable[Timed[T]]) : void
    {
      foreach (t in tok)
      {
        heap.Insert(t)
      }
    }
    
    public Have(num : int) : bool
    {
      !EnabledTokens.GroupBy(x => x.key).Where(x => x.Count() >= num).IsEmpty()
    }
    
    public Have(tok : IEnumerable[Timed[T]]) : bool
    {
      tok.All(EnabledTokens.Contains)
      //EnabledTokens.Intersect(tok).Count() == tok.Count()
    }
    
    public Peek() : Timed[T]
    {
      heap.PeekMin()
    }
    
    public HaveTokens : bool
    {
      get
      {
        !EnabledTokens.IsEmpty()
      }
    }
    
    public GetMany(num : int) : IEnumerable[Timed[T]]
    {
      def by_key = EnabledTokens.GroupBy(_.key);
      def tokens = by_key.Where(x => x.Count() >= num).ToArray();
      def idx    = rnd.Next(tokens.Length);
      def tokens = tokens[idx];
      foreach (elem in tokens) heap.Remove(elem);
      tokens
    }
    
    public GetMany(tok : IEnumerable[Timed[T]]) : void
    {
      foreach (elem in tok) heap.Remove(elem);
    }
    
    public Get(elem : Timed[T]) : void
    {
      heap.Remove(elem);
    }
    
    public Get() : Timed[T]
    {
      if (EnabledTokens.IsMoreThanOne())
      {
        def tokens = EnabledTokens.ToArray();
        def idx = rnd.Next(tokens.Length);
        def elem = tokens[idx];
        heap.Remove(elem);
        elem
      } else 
      {
        def elem = heap.PeekMin();
        heap.DeleteMin();
        elem
      }
    }
  }
}
