using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Macros;

namespace PetriNetModel
{
  [Record]
  class TimedKey[T] : IComparable[TimedKey[T]]
  {
    public key : T;
    public time : DateTime;
    
    public CompareTo(other : TimedKey[T]) : int
    {
      0
    }
  }
  /// <summary>
  /// Description of TimedSimpleMultiset.
  /// </summary>
  class TimedHeap[T] : ITokenContainer[TimedKey[T]]
  {
    heap : BinaryHeap[TimedKey[T]] = BinaryHeap();
    
    span() : void
    {
      def time = TimeSpan();
      def time = DateTime();
    }
    
    public this() {}
    public this(en : IEnumerable[TimedKey[T]])
    {
      heap = BinaryHeap(en.Select(TimedKey))
    }
    
    public Create() : ITokenContainer[TimedKey[T]]
    {
      TimedHeap()
    }
    
    public Create(en : IEnumerable[TimedKey[T]]) : ITokenContainer[TimedKey[T]]
    {
      TimedHeap(en)
    }
    
    public EnabledTokens : IEnumerable[TimedKey[T]]
    {
      get
      {
        heap.Where(x => x.time >= DateTime.Now)
      }
    }
    
    public Add(tok : TimedKey[T]) : void
    {
      heap.Insert(tok)
    }
    
    public AddMany(tok : IEnumerable[TimedKey[T]]) : void
    {
      foreach (t in tok)
      {
        heap.Insert(t)
      }
    }
    
    public Have(num : int) : bool
    {
      EnabledTokens.Count() >= num
    }
    
    public Have(tok : IEnumerable[TimedKey[T]]) : bool
    {
      EnabledTokens.Intersect(tok).Count() == tok.Count()
    }
    
    public Peek() : T
    {
      heap.PeekMin().key
    }
    
    public HaveTokens : bool
    {
      get
      {
        !heap.Empty
      }
    }
    
    public GetMany(num : int) : IEnumerable[T];
    public GetMany(tok : IEnumerable[T]) : void;
    
    public Get(elem : T) : void;
    public Get() : T;
  }
}
