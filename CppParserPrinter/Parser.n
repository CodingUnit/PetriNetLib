using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Cpp.Grammar;
using Cpp.Grammar.CppGrammarParseTree;
using Nitra;

namespace CppParserPrinter
{
  /// <summary>
  /// Description of Parser.
  /// </summary>
  public class Parser
  {
    parserHost : ParseSession;
    msg : Nitra.ProjectSystem.CompilerMessageList = Nitra.ProjectSystem.CompilerMessageList();
    
    public this()
    {
      parserHost = ParseSession(Cpp.Grammar.CppGrammar.CompilationUnit, compilerMessages = msg);
    }
    
    NameToCName(n : Name) : CName
    {
      | Name.Id(Identifier = n)        => CName.String(n.IdentifierBodyData)
      | Name.Qualified(QualifiedIdentifier = n) => CName.Qualified(n.IdentifiersData[0].Map(_.IdentifierBodyData))
      | Name.Splicable(Splicable = Splicable(Name = n)) => CName.Splicable(n.IdentifierBodyData)
      | Name.SplicableList(SplicableList = SplicableList(Name = n)) => CName.SplicableList(n.IdentifierBodyData)
      | Name.SplicableType(Name = n)   => CName.SplicableType(n.IdentifierBodyData)
    }
    
    GetModifier(mod : Modifier) : CMod
    {
      | Modifier.Private => CMod.Private()
      | Protected        => CMod.Protected()
      | Public           => CMod.Public()
    }
    
    GetTypeDecl(decl : StructTypeDecl) : CTypeDecl
    {
      | StructTypeDecl.SplicableMembers(SplicableMembers = SplicableMembers(SplicableList = n)) => CTypeDecl.SplicableMembers(n.Name.IdentifierBodyData)
      | StructTypeDecl.StructDecl(StructDecl = d) => GetTypeDecl(d)
      | StructTypeDecl.Decl(Decl = d)             => d |> GetDecl |> CTypeDecl.Decl
    }
    
    GetTypeDecl(decl : StructDecl) : CTypeDecl
    {
       def decls = decl.BodyData.Map(GetTypeDecl);
       def name  = NameToCName(decl.Name);
       CTypeDecl.Type(CComplexType.Struct(Some(name), decls))
    }
    
    GetQualifier(q : Qualifier) : CMethodQualifier
    {
      | Qualifier.Const => CMethodQualifier.Const()
    }
    
    GetExpression(e : Expression) : CExpr
    {
      | Expression.Assign(Expression1 = left, Expression2 = right) =>
         CBinaryOper.Assign(GetExpression(left), GetExpression(right)) |> CExpr.Operator
      | CallFunc(Expression = c, ExpressionsData = (p, _)) => 
          def body = match (p.Map(GetExpression))
          {
            | [b] => b
            | lst => CExpr.Compound(lst)
          }
          CBinaryOper.CallFunc(c |> GetExpression, body) |> CExpr.Operator
      | Expression.Id(Name = n)                        => CExpr.Id(n |> NameToCName)
      | Expression.Constant(Constant = c)              => CExpr.Constant(c |> GetConstant)
    }
    
    GetConstant(st : Constant) : CConstant
    {
      | Constant.Int(IntegerData = i) => 
          def val = if (i.StartsWith("0x"))
          {
            int.Parse(i.Substring(2), System.Globalization.NumberStyles.AllowHexSpecifier | 
            System.Globalization.NumberStyles.HexNumber)
          } else int.Parse(i);
          val |> CConstant.Int
          //else
      
    }
    
    GetStatement(st : Statement) : CStatement
    {
      | Statement.BraceStatement(StatementsData = [s])    => s |> GetStatement
      | Statement.BraceStatement(StatementsData = s)      => CStatement.Compound(s.Map(GetStatement))
      | Statement.Expression(Expression = e)              => CStatement.Expression(e |> GetExpression)
      | Statement.If(Cond = c, Body = b, ElseOptData = e) => 
          CStatement.If(c |> GetExpression, b |> GetStatement, e.Map(x => GetStatement(x.Statement)))
      | Statement.Return(ExpressionOptData = e)           => CStatement.Return(e.Map(GetExpression))
    }
    
    GetParms(p : Parms) : CParms
    {
      | Parms.ParmList(ParmsData = p) => p.Map(GetParm) |> CParms.ParmList
      | Parms.Splicable(Splicable = Splicable(Name = n)) => CParms.Splicable(n.IdentifierBodyData)
      | Parms.SplicableList(SplicableList = SplicableList(Name = n))        => CParms.SplicableList(n.IdentifierBodyData)
    }
    
    GetParm(p : Parm) : CParm
    {
      CParm(p.Name |> NameToCName, p.Type |> GetType, p.InitOptData.Map(x => GetConstExpr(x.ConstExpr)))
    }
    
    GetParms(parm : option[Parms]) : CParms
    {
      parm.Map(GetParms).WithDefault(CParms.ParmList([]))
    }
    
    GetBody(st : list[Statement]) : CStatement
    {
      match (st.Map(GetStatement))
      {
        | [st] => st
        | lst  => lst |> CStatement.Compound
      }
    }
    
    GetTypeDecl(decl : TypeDecl) : CTypeDecl
    {
      | TypeDecl.Constructor(Name = n, ParmsOptData = p, BodyData = b) => 
          CTypeDecl.Constructor(n |> NameToCName, p |> GetParms, GetBody(b))
      | TypeDecl.Method(SpecifierOptData = s, QualifierOptData = q, RetType = t, Name = n, ParmsOptData = p, BodyData = b) => 
         def type = t |> GetType;
         def spec = s.Map(GetSpecifier).WithDefault(CSpec.None());
         def qual = q.Map(GetQualifier).WithDefault(CMethodQualifier.None());
         def parms = p.Map(GetParms).WithDefault(CParms.ParmList([]));
         def body = b |> GetBody;
         CTypeDecl.Method(spec, CTree.Func(type, n |> NameToCName, parms, body), qual)
      | TypeDecl.SplicableMembers(SplicableMembers = SplicableMembers(SplicableList = n)) => CTypeDecl.SplicableMembers(n.Name.IdentifierBodyData)
      | TypeDecl.Enum(Enum = Cpp.Grammar.CppGrammarParseTree.Enum(Name = n, EnumDeclsData = (d, _))) =>
          def decls = d.Map(GetEnumDecl);
          CTypeDecl.Type(CComplexType.Enum(NameToCName(n) |> Some, decls))
      | TypeDecl.StructDecl(StructDecl = s) => GetTypeDecl(s)
      | TypeDecl.ClassDecl(ClassDecl = ClassDecl(Name = n, BaseOptData = b, BodyData = body)) =>
           
          def get_base(b)
          {
            def mod = GetModifier(b.Modifier);
            def bs = b.BaseClass;
            def name = NameToCName(bs.Name);
            def template = bs.TemplateOptData.Map(x => x.TypesData[0].Map(x => GetType(x))).WithDefault([]);
            def cl = CClassName(name, template);
            (mod, cl) :: []
          }
           
          def decls = body.Map(GetTypeDecl);
          def b = b.Map(get_base).WithDefault([]);
          def name = NameToCName(n);
          CTypeDecl.Type(CComplexType.Class(Some(name), b, decls))
              
      | TypeDecl.Decl(Decl = d) => GetDecl(d) |> CTypeDecl.Decl
    }
    
    
    GetSpecifier(spec : Specifier) : CSpec
    {
      | Specifier.Typedef  => CSpec.Typedef()
      | Specifier.Const    => CSpec.Const()
      | Specifier.Inline   => CSpec.Inline()
      | Specifier.Extern   => CSpec.Extern()
      | Specifier.Static   => CSpec.Static()
      | Specifier.Virtual  => CSpec.Virtual()
      | Specifier.Volatile => CSpec.Volatile()
      | _                  => null
    }
    
    GetType(t : CppGrammarParseTree.Type) : CType
    {
      | Type.NameClass(NameClass = NameClass(Name = n, TemplateOptData = t)) => CType.Class(NameToCName(n), t.Map(x => x.TypesData[0].Map(GetType)).WithDefault([]))
      | Type.Short           => CType.Short()
      | Type.Int             => CType.Int()
      | Type.Long            => CType.Long()
      | Type.UnsignedType(Type = t) => match (t |> GetType)
                                        {
                                          | CType.Int => CType.UInt()
                                          | CType.Char => CType.UChar()
                                          | CType.Long => CType.ULong()
                                          | x          => x
                                        }
      | Type.SignedType(Type = t) => t |> GetType
      | Type.Char            => CType.Char()
      | Type.Void            => CType.Void()
    }
    
    GetDecl(t : Decl) : CTree.Decl
    {
      def spec = t.SpecifiersData.Map(GetSpecifier);
      def type = GetType(t.Type);
      def init = t.InitOptData.Map(x => x.ConstExpr |> GetConstExpr);
      def decls = t.DeclsData.Map(GetDecl(_, init));
      CTree.Decl(spec, type, decls)
    }
    
    GetDecl(t : TreeDecl, init : option[CConstExpr]) : CDecl
    {
      match (t)
      {
        | TreeDecl.Id(Name = n)                  => CDecl.Id(n |> NameToCName, init)
        | TreeDecl.Array(Name = n, SizeData = s) => CDecl.Array(n |> NameToCName, init, s.Map(int.Parse))
        | TreeDecl.FuncDecl(Name = n, ParmsData = p) => 
            def parms = p.Map(x => (x.Type |> GetType, x.NameOptData.Map(NameToCName)));
            CDecl.Function(n |> NameToCName, init, parms)
        | TreeDecl.Pointer(Name = n) => CDecl.Pointer(n |> NameToCName, init)
        | _ => null
      }
    }
    
    GetConstExpr(expr : ConstExpr) : CConstExpr
    {
      | ConstExpr.Splicable(Splicable = Splicable(Name = n)) => CConstExpr.Splicable(n.IdentifierBodyData)
      | ConstExpr.Int as a                                   => a.IntegerData |> int.Parse |> CConstExpr.Int
    }
    
    GetEnumDecl(decl : EnumDecl) : CEnumDecl
    {
      | EnumDecl.Option(Name = n, ValueOptData = v) => 
          def name = n |> NameToCName;
          def val = v.Map(x => GetConstExpr(x.ConstExpr));
          CEnumDecl.Option(name, val)
      | EnumDecl.SplicableMember(Name = m, ValueOptData = v) => 
          def val = match (v)
          {
            | Some(EnumDecl.SplicableMember.Nested.Value.Splicable(Name = n)) => CSplicableVal.Splicable(n.IdentifierBodyData) |> Some
            | Some(EnumDecl.SplicableMember.Nested.Value.Literal(ConstExpr = c)) => GetConstExpr(c) |> CSplicableVal.Value |> Some
            | _                                                                  => None()
          }
          CEnumDecl.SplicableMember(m.IdentifierBodyData, val)
      | EnumDecl.SplicableMembers(Name = m) => CEnumDecl.SplicableMembers(m.IdentifierBodyData)
    }
    
    ConvertTree(decl : Declaration) : CTree
    {
      | Declaration.QuotEnum(EnumDecl = e) => CTree.Quotation(CQuotation.EnumDecl(e |> GetEnumDecl))
      | Declaration.QuotType(QuotType = QuotType(QType = TypePtr(SpecifierOptData = s, Type = t))) => 
          def spec = s.Map(x => [GetSpecifier(x)]).WithDefault([]);
          def type = GetType(t) |> CType.Pointer(spec, _, []);
          CTree.Quotation(CQuotation.Type(type))
      | Declaration.QuotType(QuotType = QuotType(QType = Type(Type = t))) => CTree.Quotation(CQuotation.Type(t |> GetType))
      | Declaration.QuotDecl(QuotDecl = QuotDecl.TypeDecl(TypeDecl = t)) => CTree.Quotation(CQuotation.TypeDecl(GetTypeDecl(t)))
      | Declaration.TypeDecl(TypeDecl = td) => 
      
          match (GetTypeDecl(td))
          {
            | CTypeDecl.Type(c) => c |> CTree.Type
            | CTypeDecl.Decl(d) => d
          }
      | Declaration.QuotExpr(StatementsData = s) => CQuotation.Statement(s |> GetBody) |> CTree.Quotation
      | Declaration.Decl(Decl = Decl(SpecifiersData = s, Type = t, DeclsData = d, InitOptData = i)) => 
          def spec = s.Map(GetSpecifier);
          def type = t |> GetType;
          def init = i.Map(x => x.ConstExpr |> GetConstExpr);
          def decls = d.Map(GetDecl(_, init));
          CTree.Decl(spec, type, decls)
    }
    
    public Parse(text : string) : CTree
    {
      if (string.IsNullOrWhiteSpace(text)) null else
      {
        def source = SourceSnapshot(text, null : string);
        def result = parserHost.Parse(source);//Main.StateMachine(source, parserHost);
        def ast = result.CreateParseTree();
        if (result.IsSuccess) 
        {
          match (ast)
          {
            | CompilationUnit(DeclarationsData = [d]) => ConvertTree(d)
            | CompilationUnit(DeclarationsData = d)   => d.Map(ConvertTree) |> CTree.Compound
            | _                                       => null 
          }
        } else 
        {
          def msg = msg.GetMessages();
          foreach (m in msg)
          {
            System.Diagnostics.Trace.WriteLine(m)
          }
          null
          //(null, msg.GetMessages().NToList())
        }
      }
    }
  }
}
